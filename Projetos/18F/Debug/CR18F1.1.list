
CR18F1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cdc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08003d9c  08003d9c  00013d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f00  08003f00  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08003f00  08003f00  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f00  08003f00  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f00  08003f00  00013f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f04  08003f04  00013f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000004  08003f0c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08003f0c  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ead  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000241e  00000000  00000000  00031ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b30  00000000  00000000  000342f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a28  00000000  00000000  00034e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000e93a  00000000  00000000  00035850  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d464  00000000  00000000  0004418a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00048de2  00000000  00000000  000515ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009a3d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f4  00000000  00000000  0009a44c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d84 	.word	0x08003d84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08003d84 	.word	0x08003d84

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f003 fc79 	bl	8003b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f001 fa44 	bl	80016dc <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f924 	bl	80004b0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8e1 	bl	8000438 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000024 	.word	0x20000024

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000024 	.word	0x20000024

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002f4:	1dfb      	adds	r3, r7, #7
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	001a      	movs	r2, r3
 80002fa:	231f      	movs	r3, #31
 80002fc:	401a      	ands	r2, r3
 80002fe:	4b04      	ldr	r3, [pc, #16]	; (8000310 <NVIC_EnableIRQ+0x28>)
 8000300:	2101      	movs	r1, #1
 8000302:	4091      	lsls	r1, r2
 8000304:	000a      	movs	r2, r1
 8000306:	601a      	str	r2, [r3, #0]
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b002      	add	sp, #8
 800030e:	bd80      	pop	{r7, pc}
 8000310:	e000e100 	.word	0xe000e100

08000314 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	0002      	movs	r2, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000322:	1dfb      	adds	r3, r7, #7
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b7f      	cmp	r3, #127	; 0x7f
 8000328:	d932      	bls.n	8000390 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800032a:	4a2f      	ldr	r2, [pc, #188]	; (80003e8 <NVIC_SetPriority+0xd4>)
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	0019      	movs	r1, r3
 8000332:	230f      	movs	r3, #15
 8000334:	400b      	ands	r3, r1
 8000336:	3b08      	subs	r3, #8
 8000338:	089b      	lsrs	r3, r3, #2
 800033a:	3306      	adds	r3, #6
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	18d3      	adds	r3, r2, r3
 8000340:	3304      	adds	r3, #4
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	1dfa      	adds	r2, r7, #7
 8000346:	7812      	ldrb	r2, [r2, #0]
 8000348:	0011      	movs	r1, r2
 800034a:	2203      	movs	r2, #3
 800034c:	400a      	ands	r2, r1
 800034e:	00d2      	lsls	r2, r2, #3
 8000350:	21ff      	movs	r1, #255	; 0xff
 8000352:	4091      	lsls	r1, r2
 8000354:	000a      	movs	r2, r1
 8000356:	43d2      	mvns	r2, r2
 8000358:	401a      	ands	r2, r3
 800035a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	019b      	lsls	r3, r3, #6
 8000360:	22ff      	movs	r2, #255	; 0xff
 8000362:	401a      	ands	r2, r3
 8000364:	1dfb      	adds	r3, r7, #7
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	0018      	movs	r0, r3
 800036a:	2303      	movs	r3, #3
 800036c:	4003      	ands	r3, r0
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000372:	481d      	ldr	r0, [pc, #116]	; (80003e8 <NVIC_SetPriority+0xd4>)
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	001c      	movs	r4, r3
 800037a:	230f      	movs	r3, #15
 800037c:	4023      	ands	r3, r4
 800037e:	3b08      	subs	r3, #8
 8000380:	089b      	lsrs	r3, r3, #2
 8000382:	430a      	orrs	r2, r1
 8000384:	3306      	adds	r3, #6
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	18c3      	adds	r3, r0, r3
 800038a:	3304      	adds	r3, #4
 800038c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800038e:	e027      	b.n	80003e0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000390:	4a16      	ldr	r2, [pc, #88]	; (80003ec <NVIC_SetPriority+0xd8>)
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	b25b      	sxtb	r3, r3
 8000398:	089b      	lsrs	r3, r3, #2
 800039a:	33c0      	adds	r3, #192	; 0xc0
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	589b      	ldr	r3, [r3, r2]
 80003a0:	1dfa      	adds	r2, r7, #7
 80003a2:	7812      	ldrb	r2, [r2, #0]
 80003a4:	0011      	movs	r1, r2
 80003a6:	2203      	movs	r2, #3
 80003a8:	400a      	ands	r2, r1
 80003aa:	00d2      	lsls	r2, r2, #3
 80003ac:	21ff      	movs	r1, #255	; 0xff
 80003ae:	4091      	lsls	r1, r2
 80003b0:	000a      	movs	r2, r1
 80003b2:	43d2      	mvns	r2, r2
 80003b4:	401a      	ands	r2, r3
 80003b6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	019b      	lsls	r3, r3, #6
 80003bc:	22ff      	movs	r2, #255	; 0xff
 80003be:	401a      	ands	r2, r3
 80003c0:	1dfb      	adds	r3, r7, #7
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	0018      	movs	r0, r3
 80003c6:	2303      	movs	r3, #3
 80003c8:	4003      	ands	r3, r0
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ce:	4807      	ldr	r0, [pc, #28]	; (80003ec <NVIC_SetPriority+0xd8>)
 80003d0:	1dfb      	adds	r3, r7, #7
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b25b      	sxtb	r3, r3
 80003d6:	089b      	lsrs	r3, r3, #2
 80003d8:	430a      	orrs	r2, r1
 80003da:	33c0      	adds	r3, #192	; 0xc0
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	501a      	str	r2, [r3, r0]
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b003      	add	sp, #12
 80003e6:	bd90      	pop	{r4, r7, pc}
 80003e8:	e000ed00 	.word	0xe000ed00
 80003ec:	e000e100 	.word	0xe000e100

080003f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <SysTick_Config+0x40>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d901      	bls.n	8000406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000402:	2301      	movs	r3, #1
 8000404:	e010      	b.n	8000428 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <SysTick_Config+0x44>)
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	3a01      	subs	r2, #1
 800040c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800040e:	2301      	movs	r3, #1
 8000410:	425b      	negs	r3, r3
 8000412:	2103      	movs	r1, #3
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff ff7d 	bl	8000314 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <SysTick_Config+0x44>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000420:	4b04      	ldr	r3, [pc, #16]	; (8000434 <SysTick_Config+0x44>)
 8000422:	2207      	movs	r2, #7
 8000424:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000426:	2300      	movs	r3, #0
}
 8000428:	0018      	movs	r0, r3
 800042a:	46bd      	mov	sp, r7
 800042c:	b002      	add	sp, #8
 800042e:	bd80      	pop	{r7, pc}
 8000430:	00ffffff 	.word	0x00ffffff
 8000434:	e000e010 	.word	0xe000e010

08000438 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	230f      	movs	r3, #15
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	1c02      	adds	r2, r0, #0
 8000448:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	2b03      	cmp	r3, #3
 800044e:	d904      	bls.n	800045a <HAL_NVIC_SetPriority+0x22>
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <HAL_NVIC_SetPriority+0x3c>)
 8000452:	219b      	movs	r1, #155	; 0x9b
 8000454:	0018      	movs	r0, r3
 8000456:	f003 fad6 	bl	8003a06 <assert_failed>
  NVIC_SetPriority(IRQn,PreemptPriority);
 800045a:	68ba      	ldr	r2, [r7, #8]
 800045c:	230f      	movs	r3, #15
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	b25b      	sxtb	r3, r3
 8000464:	0011      	movs	r1, r2
 8000466:	0018      	movs	r0, r3
 8000468:	f7ff ff54 	bl	8000314 <NVIC_SetPriority>
}
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	b004      	add	sp, #16
 8000472:	bd80      	pop	{r7, pc}
 8000474:	08003d9c 	.word	0x08003d9c

08000478 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	0002      	movs	r2, r0
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000484:	1dfb      	adds	r3, r7, #7
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b7f      	cmp	r3, #127	; 0x7f
 800048a:	d904      	bls.n	8000496 <HAL_NVIC_EnableIRQ+0x1e>
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <HAL_NVIC_EnableIRQ+0x34>)
 800048e:	21ab      	movs	r1, #171	; 0xab
 8000490:	0018      	movs	r0, r3
 8000492:	f003 fab8 	bl	8003a06 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000496:	1dfb      	adds	r3, r7, #7
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	b25b      	sxtb	r3, r3
 800049c:	0018      	movs	r0, r3
 800049e:	f7ff ff23 	bl	80002e8 <NVIC_EnableIRQ>
}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b002      	add	sp, #8
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	08003d9c 	.word	0x08003d9c

080004b0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	0018      	movs	r0, r3
 80004bc:	f7ff ff98 	bl	80003f0 <SysTick_Config>
 80004c0:	0003      	movs	r3, r0
}
 80004c2:	0018      	movs	r0, r3
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b002      	add	sp, #8
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	2390      	movs	r3, #144	; 0x90
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d014      	beq.n	8000516 <HAL_GPIO_Init+0x4a>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4ac2      	ldr	r2, [pc, #776]	; (80007f8 <HAL_GPIO_Init+0x32c>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d010      	beq.n	8000516 <HAL_GPIO_Init+0x4a>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4ac1      	ldr	r2, [pc, #772]	; (80007fc <HAL_GPIO_Init+0x330>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d00c      	beq.n	8000516 <HAL_GPIO_Init+0x4a>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4ac0      	ldr	r2, [pc, #768]	; (8000800 <HAL_GPIO_Init+0x334>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d008      	beq.n	8000516 <HAL_GPIO_Init+0x4a>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4abf      	ldr	r2, [pc, #764]	; (8000804 <HAL_GPIO_Init+0x338>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d004      	beq.n	8000516 <HAL_GPIO_Init+0x4a>
 800050c:	4bbe      	ldr	r3, [pc, #760]	; (8000808 <HAL_GPIO_Init+0x33c>)
 800050e:	21c1      	movs	r1, #193	; 0xc1
 8000510:	0018      	movs	r0, r3
 8000512:	f003 fa78 	bl	8003a06 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	041b      	lsls	r3, r3, #16
 800051c:	0c1b      	lsrs	r3, r3, #16
 800051e:	d004      	beq.n	800052a <HAL_GPIO_Init+0x5e>
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	0c1b      	lsrs	r3, r3, #16
 8000526:	041b      	lsls	r3, r3, #16
 8000528:	d004      	beq.n	8000534 <HAL_GPIO_Init+0x68>
 800052a:	4bb7      	ldr	r3, [pc, #732]	; (8000808 <HAL_GPIO_Init+0x33c>)
 800052c:	21c2      	movs	r1, #194	; 0xc2
 800052e:	0018      	movs	r0, r3
 8000530:	f003 fa69 	bl	8003a06 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d036      	beq.n	80005aa <HAL_GPIO_Init+0xde>
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d032      	beq.n	80005aa <HAL_GPIO_Init+0xde>
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	2b11      	cmp	r3, #17
 800054a:	d02e      	beq.n	80005aa <HAL_GPIO_Init+0xde>
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	2b02      	cmp	r3, #2
 8000552:	d02a      	beq.n	80005aa <HAL_GPIO_Init+0xde>
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	2b12      	cmp	r3, #18
 800055a:	d026      	beq.n	80005aa <HAL_GPIO_Init+0xde>
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	4aaa      	ldr	r2, [pc, #680]	; (800080c <HAL_GPIO_Init+0x340>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d021      	beq.n	80005aa <HAL_GPIO_Init+0xde>
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	4aa9      	ldr	r2, [pc, #676]	; (8000810 <HAL_GPIO_Init+0x344>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d01c      	beq.n	80005aa <HAL_GPIO_Init+0xde>
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	4aa7      	ldr	r2, [pc, #668]	; (8000814 <HAL_GPIO_Init+0x348>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d017      	beq.n	80005aa <HAL_GPIO_Init+0xde>
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	4aa6      	ldr	r2, [pc, #664]	; (8000818 <HAL_GPIO_Init+0x34c>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d012      	beq.n	80005aa <HAL_GPIO_Init+0xde>
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	4aa4      	ldr	r2, [pc, #656]	; (800081c <HAL_GPIO_Init+0x350>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d00d      	beq.n	80005aa <HAL_GPIO_Init+0xde>
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	4aa3      	ldr	r2, [pc, #652]	; (8000820 <HAL_GPIO_Init+0x354>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d008      	beq.n	80005aa <HAL_GPIO_Init+0xde>
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	2b03      	cmp	r3, #3
 800059e:	d004      	beq.n	80005aa <HAL_GPIO_Init+0xde>
 80005a0:	4b99      	ldr	r3, [pc, #612]	; (8000808 <HAL_GPIO_Init+0x33c>)
 80005a2:	21c3      	movs	r1, #195	; 0xc3
 80005a4:	0018      	movs	r0, r3
 80005a6:	f003 fa2e 	bl	8003a06 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d100      	bne.n	80005b4 <HAL_GPIO_Init+0xe8>
 80005b2:	e1a2      	b.n	80008fa <HAL_GPIO_Init+0x42e>
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d100      	bne.n	80005be <HAL_GPIO_Init+0xf2>
 80005bc:	e19d      	b.n	80008fa <HAL_GPIO_Init+0x42e>
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d100      	bne.n	80005c8 <HAL_GPIO_Init+0xfc>
 80005c6:	e198      	b.n	80008fa <HAL_GPIO_Init+0x42e>
 80005c8:	4b8f      	ldr	r3, [pc, #572]	; (8000808 <HAL_GPIO_Init+0x33c>)
 80005ca:	21c4      	movs	r1, #196	; 0xc4
 80005cc:	0018      	movs	r0, r3
 80005ce:	f003 fa1a 	bl	8003a06 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005d2:	e192      	b.n	80008fa <HAL_GPIO_Init+0x42e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2101      	movs	r1, #1
 80005da:	697a      	ldr	r2, [r7, #20]
 80005dc:	4091      	lsls	r1, r2
 80005de:	000a      	movs	r2, r1
 80005e0:	4013      	ands	r3, r2
 80005e2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d100      	bne.n	80005ec <HAL_GPIO_Init+0x120>
 80005ea:	e183      	b.n	80008f4 <HAL_GPIO_Init+0x428>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d003      	beq.n	80005fc <HAL_GPIO_Init+0x130>
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	2b12      	cmp	r3, #18
 80005fa:	d13a      	bne.n	8000672 <HAL_GPIO_Init+0x1a6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	2390      	movs	r3, #144	; 0x90
 8000600:	05db      	lsls	r3, r3, #23
 8000602:	429a      	cmp	r2, r3
 8000604:	d008      	beq.n	8000618 <HAL_GPIO_Init+0x14c>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <HAL_GPIO_Init+0x32c>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d004      	beq.n	8000618 <HAL_GPIO_Init+0x14c>
 800060e:	4b7e      	ldr	r3, [pc, #504]	; (8000808 <HAL_GPIO_Init+0x33c>)
 8000610:	21d3      	movs	r1, #211	; 0xd3
 8000612:	0018      	movs	r0, r3
 8000614:	f003 f9f7 	bl	8003a06 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	2b06      	cmp	r3, #6
 800061e:	d904      	bls.n	800062a <HAL_GPIO_Init+0x15e>
 8000620:	4b79      	ldr	r3, [pc, #484]	; (8000808 <HAL_GPIO_Init+0x33c>)
 8000622:	21d4      	movs	r1, #212	; 0xd4
 8000624:	0018      	movs	r0, r3
 8000626:	f003 f9ee 	bl	8003a06 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	08da      	lsrs	r2, r3, #3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3208      	adds	r2, #8
 8000632:	0092      	lsls	r2, r2, #2
 8000634:	58d3      	ldr	r3, [r2, r3]
 8000636:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	2207      	movs	r2, #7
 800063c:	4013      	ands	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	220f      	movs	r2, #15
 8000642:	409a      	lsls	r2, r3
 8000644:	0013      	movs	r3, r2
 8000646:	43da      	mvns	r2, r3
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	4013      	ands	r3, r2
 800064c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	691a      	ldr	r2, [r3, #16]
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	2107      	movs	r1, #7
 8000656:	400b      	ands	r3, r1
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	409a      	lsls	r2, r3
 800065c:	0013      	movs	r3, r2
 800065e:	693a      	ldr	r2, [r7, #16]
 8000660:	4313      	orrs	r3, r2
 8000662:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	08da      	lsrs	r2, r3, #3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3208      	adds	r2, #8
 800066c:	0092      	lsls	r2, r2, #2
 800066e:	6939      	ldr	r1, [r7, #16]
 8000670:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	2203      	movs	r2, #3
 800067e:	409a      	lsls	r2, r3
 8000680:	0013      	movs	r3, r2
 8000682:	43da      	mvns	r2, r3
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	4013      	ands	r3, r2
 8000688:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	2203      	movs	r2, #3
 8000690:	401a      	ands	r2, r3
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	409a      	lsls	r2, r3
 8000698:	0013      	movs	r3, r2
 800069a:	693a      	ldr	r2, [r7, #16]
 800069c:	4313      	orrs	r3, r2
 800069e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d00b      	beq.n	80006c6 <HAL_GPIO_Init+0x1fa>
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d007      	beq.n	80006c6 <HAL_GPIO_Init+0x1fa>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ba:	2b11      	cmp	r3, #17
 80006bc:	d003      	beq.n	80006c6 <HAL_GPIO_Init+0x1fa>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	2b12      	cmp	r3, #18
 80006c4:	d141      	bne.n	800074a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d00c      	beq.n	80006e8 <HAL_GPIO_Init+0x21c>
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d008      	beq.n	80006e8 <HAL_GPIO_Init+0x21c>
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d004      	beq.n	80006e8 <HAL_GPIO_Init+0x21c>
 80006de:	4b4a      	ldr	r3, [pc, #296]	; (8000808 <HAL_GPIO_Init+0x33c>)
 80006e0:	21e8      	movs	r1, #232	; 0xe8
 80006e2:	0018      	movs	r0, r3
 80006e4:	f003 f98f 	bl	8003a06 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	2203      	movs	r2, #3
 80006f4:	409a      	lsls	r2, r3
 80006f6:	0013      	movs	r3, r2
 80006f8:	43da      	mvns	r2, r3
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	4013      	ands	r3, r2
 80006fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	68da      	ldr	r2, [r3, #12]
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	409a      	lsls	r2, r3
 800070a:	0013      	movs	r3, r2
 800070c:	693a      	ldr	r2, [r7, #16]
 800070e:	4313      	orrs	r3, r2
 8000710:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	693a      	ldr	r2, [r7, #16]
 8000716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800071e:	2201      	movs	r2, #1
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	409a      	lsls	r2, r3
 8000724:	0013      	movs	r3, r2
 8000726:	43da      	mvns	r2, r3
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	4013      	ands	r3, r2
 800072c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	091b      	lsrs	r3, r3, #4
 8000734:	2201      	movs	r2, #1
 8000736:	401a      	ands	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	409a      	lsls	r2, r3
 800073c:	0013      	movs	r3, r2
 800073e:	693a      	ldr	r2, [r7, #16]
 8000740:	4313      	orrs	r3, r2
 8000742:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	68db      	ldr	r3, [r3, #12]
 800074e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	2203      	movs	r2, #3
 8000756:	409a      	lsls	r2, r3
 8000758:	0013      	movs	r3, r2
 800075a:	43da      	mvns	r2, r3
 800075c:	693b      	ldr	r3, [r7, #16]
 800075e:	4013      	ands	r3, r2
 8000760:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	409a      	lsls	r2, r3
 800076c:	0013      	movs	r3, r2
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	4313      	orrs	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	685a      	ldr	r2, [r3, #4]
 800077e:	2380      	movs	r3, #128	; 0x80
 8000780:	055b      	lsls	r3, r3, #21
 8000782:	4013      	ands	r3, r2
 8000784:	d100      	bne.n	8000788 <HAL_GPIO_Init+0x2bc>
 8000786:	e0b5      	b.n	80008f4 <HAL_GPIO_Init+0x428>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000788:	4b26      	ldr	r3, [pc, #152]	; (8000824 <HAL_GPIO_Init+0x358>)
 800078a:	699a      	ldr	r2, [r3, #24]
 800078c:	4b25      	ldr	r3, [pc, #148]	; (8000824 <HAL_GPIO_Init+0x358>)
 800078e:	2101      	movs	r1, #1
 8000790:	430a      	orrs	r2, r1
 8000792:	619a      	str	r2, [r3, #24]
 8000794:	4b23      	ldr	r3, [pc, #140]	; (8000824 <HAL_GPIO_Init+0x358>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	2201      	movs	r2, #1
 800079a:	4013      	ands	r3, r2
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80007a0:	4a21      	ldr	r2, [pc, #132]	; (8000828 <HAL_GPIO_Init+0x35c>)
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	089b      	lsrs	r3, r3, #2
 80007a6:	3302      	adds	r3, #2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	589b      	ldr	r3, [r3, r2]
 80007ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	2203      	movs	r2, #3
 80007b2:	4013      	ands	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	220f      	movs	r2, #15
 80007b8:	409a      	lsls	r2, r3
 80007ba:	0013      	movs	r3, r2
 80007bc:	43da      	mvns	r2, r3
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	4013      	ands	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	2390      	movs	r3, #144	; 0x90
 80007c8:	05db      	lsls	r3, r3, #23
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d02e      	beq.n	800082c <HAL_GPIO_Init+0x360>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <HAL_GPIO_Init+0x32c>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d00d      	beq.n	80007f2 <HAL_GPIO_Init+0x326>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_GPIO_Init+0x330>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d007      	beq.n	80007ee <HAL_GPIO_Init+0x322>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a07      	ldr	r2, [pc, #28]	; (8000800 <HAL_GPIO_Init+0x334>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d101      	bne.n	80007ea <HAL_GPIO_Init+0x31e>
 80007e6:	2303      	movs	r3, #3
 80007e8:	e021      	b.n	800082e <HAL_GPIO_Init+0x362>
 80007ea:	2305      	movs	r3, #5
 80007ec:	e01f      	b.n	800082e <HAL_GPIO_Init+0x362>
 80007ee:	2302      	movs	r3, #2
 80007f0:	e01d      	b.n	800082e <HAL_GPIO_Init+0x362>
 80007f2:	2301      	movs	r3, #1
 80007f4:	e01b      	b.n	800082e <HAL_GPIO_Init+0x362>
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	48000400 	.word	0x48000400
 80007fc:	48000800 	.word	0x48000800
 8000800:	48000c00 	.word	0x48000c00
 8000804:	48001400 	.word	0x48001400
 8000808:	08003dd8 	.word	0x08003dd8
 800080c:	10110000 	.word	0x10110000
 8000810:	10210000 	.word	0x10210000
 8000814:	10310000 	.word	0x10310000
 8000818:	10120000 	.word	0x10120000
 800081c:	10220000 	.word	0x10220000
 8000820:	10320000 	.word	0x10320000
 8000824:	40021000 	.word	0x40021000
 8000828:	40010000 	.word	0x40010000
 800082c:	2300      	movs	r3, #0
 800082e:	697a      	ldr	r2, [r7, #20]
 8000830:	2103      	movs	r1, #3
 8000832:	400a      	ands	r2, r1
 8000834:	0092      	lsls	r2, r2, #2
 8000836:	4093      	lsls	r3, r2
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	4313      	orrs	r3, r2
 800083c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800083e:	4934      	ldr	r1, [pc, #208]	; (8000910 <HAL_GPIO_Init+0x444>)
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	089b      	lsrs	r3, r3, #2
 8000844:	3302      	adds	r3, #2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800084c:	4b31      	ldr	r3, [pc, #196]	; (8000914 <HAL_GPIO_Init+0x448>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	43da      	mvns	r2, r3
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	4013      	ands	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	025b      	lsls	r3, r3, #9
 8000864:	4013      	ands	r3, r2
 8000866:	d003      	beq.n	8000870 <HAL_GPIO_Init+0x3a4>
        {
          SET_BIT(temp, iocurrent); 
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4313      	orrs	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000870:	4b28      	ldr	r3, [pc, #160]	; (8000914 <HAL_GPIO_Init+0x448>)
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000876:	4b27      	ldr	r3, [pc, #156]	; (8000914 <HAL_GPIO_Init+0x448>)
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	43da      	mvns	r2, r3
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	4013      	ands	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	029b      	lsls	r3, r3, #10
 800088e:	4013      	ands	r3, r2
 8000890:	d003      	beq.n	800089a <HAL_GPIO_Init+0x3ce>
        { 
          SET_BIT(temp, iocurrent); 
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4313      	orrs	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800089a:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <HAL_GPIO_Init+0x448>)
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <HAL_GPIO_Init+0x448>)
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	43da      	mvns	r2, r3
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	4013      	ands	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685a      	ldr	r2, [r3, #4]
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	035b      	lsls	r3, r3, #13
 80008b8:	4013      	ands	r3, r2
 80008ba:	d003      	beq.n	80008c4 <HAL_GPIO_Init+0x3f8>
        {
          SET_BIT(temp, iocurrent); 
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <HAL_GPIO_Init+0x448>)
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_GPIO_Init+0x448>)
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	43da      	mvns	r2, r3
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	4013      	ands	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685a      	ldr	r2, [r3, #4]
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	039b      	lsls	r3, r3, #14
 80008e2:	4013      	ands	r3, r2
 80008e4:	d003      	beq.n	80008ee <HAL_GPIO_Init+0x422>
        {
          SET_BIT(temp, iocurrent); 
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_GPIO_Init+0x448>)
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	3301      	adds	r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	40da      	lsrs	r2, r3
 8000902:	1e13      	subs	r3, r2, #0
 8000904:	d000      	beq.n	8000908 <HAL_GPIO_Init+0x43c>
 8000906:	e665      	b.n	80005d4 <HAL_GPIO_Init+0x108>
  } 
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b006      	add	sp, #24
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40010000 	.word	0x40010000
 8000914:	40010400 	.word	0x40010400

08000918 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	000a      	movs	r2, r1
 8000922:	1cbb      	adds	r3, r7, #2
 8000924:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000926:	1cbb      	adds	r3, r7, #2
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d004      	beq.n	8000938 <HAL_GPIO_ReadPin+0x20>
 800092e:	1cbb      	adds	r3, r7, #2
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	0c1b      	lsrs	r3, r3, #16
 8000934:	041b      	lsls	r3, r3, #16
 8000936:	d007      	beq.n	8000948 <HAL_GPIO_ReadPin+0x30>
 8000938:	238e      	movs	r3, #142	; 0x8e
 800093a:	33ff      	adds	r3, #255	; 0xff
 800093c:	001a      	movs	r2, r3
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_GPIO_ReadPin+0x5c>)
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f003 f85f 	bl	8003a06 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	691b      	ldr	r3, [r3, #16]
 800094c:	1cba      	adds	r2, r7, #2
 800094e:	8812      	ldrh	r2, [r2, #0]
 8000950:	4013      	ands	r3, r2
 8000952:	d004      	beq.n	800095e <HAL_GPIO_ReadPin+0x46>
  {
    bitstatus = GPIO_PIN_SET;
 8000954:	230f      	movs	r3, #15
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	2201      	movs	r2, #1
 800095a:	701a      	strb	r2, [r3, #0]
 800095c:	e003      	b.n	8000966 <HAL_GPIO_ReadPin+0x4e>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800095e:	230f      	movs	r3, #15
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000966:	230f      	movs	r3, #15
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	781b      	ldrb	r3, [r3, #0]
  }
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b004      	add	sp, #16
 8000972:	bd80      	pop	{r7, pc}
 8000974:	08003dd8 	.word	0x08003dd8

08000978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	0008      	movs	r0, r1
 8000982:	0011      	movs	r1, r2
 8000984:	1cbb      	adds	r3, r7, #2
 8000986:	1c02      	adds	r2, r0, #0
 8000988:	801a      	strh	r2, [r3, #0]
 800098a:	1c7b      	adds	r3, r7, #1
 800098c:	1c0a      	adds	r2, r1, #0
 800098e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000990:	1cbb      	adds	r3, r7, #2
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d004      	beq.n	80009a2 <HAL_GPIO_WritePin+0x2a>
 8000998:	1cbb      	adds	r3, r7, #2
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	0c1b      	lsrs	r3, r3, #16
 800099e:	041b      	lsls	r3, r3, #16
 80009a0:	d006      	beq.n	80009b0 <HAL_GPIO_WritePin+0x38>
 80009a2:	23d6      	movs	r3, #214	; 0xd6
 80009a4:	005a      	lsls	r2, r3, #1
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <HAL_GPIO_WritePin+0x7c>)
 80009a8:	0011      	movs	r1, r2
 80009aa:	0018      	movs	r0, r3
 80009ac:	f003 f82b 	bl	8003a06 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80009b0:	1c7b      	adds	r3, r7, #1
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d00b      	beq.n	80009d0 <HAL_GPIO_WritePin+0x58>
 80009b8:	1c7b      	adds	r3, r7, #1
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d007      	beq.n	80009d0 <HAL_GPIO_WritePin+0x58>
 80009c0:	23ae      	movs	r3, #174	; 0xae
 80009c2:	33ff      	adds	r3, #255	; 0xff
 80009c4:	001a      	movs	r2, r3
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_GPIO_WritePin+0x7c>)
 80009c8:	0011      	movs	r1, r2
 80009ca:	0018      	movs	r0, r3
 80009cc:	f003 f81b 	bl	8003a06 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80009d0:	1c7b      	adds	r3, r7, #1
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d004      	beq.n	80009e2 <HAL_GPIO_WritePin+0x6a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009d8:	1cbb      	adds	r3, r7, #2
 80009da:	881a      	ldrh	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80009e0:	e003      	b.n	80009ea <HAL_GPIO_WritePin+0x72>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009e2:	1cbb      	adds	r3, r7, #2
 80009e4:	881a      	ldrh	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	08003dd8 	.word	0x08003dd8

080009f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	000a      	movs	r2, r1
 8000a02:	1cbb      	adds	r3, r7, #2
 8000a04:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000a06:	1cbb      	adds	r3, r7, #2
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d004      	beq.n	8000a18 <HAL_GPIO_TogglePin+0x20>
 8000a0e:	1cbb      	adds	r3, r7, #2
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	0c1b      	lsrs	r3, r3, #16
 8000a14:	041b      	lsls	r3, r3, #16
 8000a16:	d006      	beq.n	8000a26 <HAL_GPIO_TogglePin+0x2e>
 8000a18:	23e1      	movs	r3, #225	; 0xe1
 8000a1a:	005a      	lsls	r2, r3, #1
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <HAL_GPIO_TogglePin+0x44>)
 8000a1e:	0011      	movs	r1, r2
 8000a20:	0018      	movs	r0, r3
 8000a22:	f002 fff0 	bl	8003a06 <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	695a      	ldr	r2, [r3, #20]
 8000a2a:	1cbb      	adds	r3, r7, #2
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	405a      	eors	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	615a      	str	r2, [r3, #20]
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b002      	add	sp, #8
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	08003dd8 	.word	0x08003dd8

08000a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d106      	bne.n	8000a60 <HAL_RCC_OscConfig+0x20>
 8000a52:	2389      	movs	r3, #137	; 0x89
 8000a54:	005a      	lsls	r2, r3, #1
 8000a56:	4bc6      	ldr	r3, [pc, #792]	; (8000d70 <HAL_RCC_OscConfig+0x330>)
 8000a58:	0011      	movs	r1, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f002 ffd3 	bl	8003a06 <assert_failed>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d020      	beq.n	8000aaa <HAL_RCC_OscConfig+0x6a>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4013      	ands	r3, r2
 8000a70:	d11b      	bne.n	8000aaa <HAL_RCC_OscConfig+0x6a>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2202      	movs	r2, #2
 8000a78:	4013      	ands	r3, r2
 8000a7a:	d116      	bne.n	8000aaa <HAL_RCC_OscConfig+0x6a>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2208      	movs	r2, #8
 8000a82:	4013      	ands	r3, r2
 8000a84:	d111      	bne.n	8000aaa <HAL_RCC_OscConfig+0x6a>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	d10c      	bne.n	8000aaa <HAL_RCC_OscConfig+0x6a>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2210      	movs	r2, #16
 8000a96:	4013      	ands	r3, r2
 8000a98:	d107      	bne.n	8000aaa <HAL_RCC_OscConfig+0x6a>
 8000a9a:	2314      	movs	r3, #20
 8000a9c:	33ff      	adds	r3, #255	; 0xff
 8000a9e:	001a      	movs	r2, r3
 8000aa0:	4bb3      	ldr	r3, [pc, #716]	; (8000d70 <HAL_RCC_OscConfig+0x330>)
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f002 ffae 	bl	8003a06 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	d100      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x76>
 8000ab4:	e0a4      	b.n	8000c00 <HAL_RCC_OscConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d00f      	beq.n	8000ade <HAL_RCC_OscConfig+0x9e>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d00b      	beq.n	8000ade <HAL_RCC_OscConfig+0x9e>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	2b05      	cmp	r3, #5
 8000acc:	d007      	beq.n	8000ade <HAL_RCC_OscConfig+0x9e>
 8000ace:	231a      	movs	r3, #26
 8000ad0:	33ff      	adds	r3, #255	; 0xff
 8000ad2:	001a      	movs	r2, r3
 8000ad4:	4ba6      	ldr	r3, [pc, #664]	; (8000d70 <HAL_RCC_OscConfig+0x330>)
 8000ad6:	0011      	movs	r1, r2
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f002 ff94 	bl	8003a06 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ade:	4ba5      	ldr	r3, [pc, #660]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	d00e      	beq.n	8000b08 <HAL_RCC_OscConfig+0xc8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000aea:	4ba2      	ldr	r3, [pc, #648]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	220c      	movs	r2, #12
 8000af0:	4013      	ands	r3, r2
 8000af2:	2b08      	cmp	r3, #8
 8000af4:	d117      	bne.n	8000b26 <HAL_RCC_OscConfig+0xe6>
 8000af6:	4b9f      	ldr	r3, [pc, #636]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	025b      	lsls	r3, r3, #9
 8000afe:	401a      	ands	r2, r3
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	025b      	lsls	r3, r3, #9
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d10e      	bne.n	8000b26 <HAL_RCC_OscConfig+0xe6>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b08:	4b9a      	ldr	r3, [pc, #616]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	029b      	lsls	r3, r3, #10
 8000b10:	4013      	ands	r3, r2
 8000b12:	d100      	bne.n	8000b16 <HAL_RCC_OscConfig+0xd6>
 8000b14:	e073      	b.n	8000bfe <HAL_RCC_OscConfig+0x1be>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d000      	beq.n	8000b20 <HAL_RCC_OscConfig+0xe0>
 8000b1e:	e06e      	b.n	8000bfe <HAL_RCC_OscConfig+0x1be>
      {
        return HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	f000 fbe9 	bl	80012f8 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d107      	bne.n	8000b3e <HAL_RCC_OscConfig+0xfe>
 8000b2e:	4b91      	ldr	r3, [pc, #580]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	4b90      	ldr	r3, [pc, #576]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	0249      	lsls	r1, r1, #9
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	e02f      	b.n	8000b9e <HAL_RCC_OscConfig+0x15e>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10c      	bne.n	8000b60 <HAL_RCC_OscConfig+0x120>
 8000b46:	4b8b      	ldr	r3, [pc, #556]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b8a      	ldr	r3, [pc, #552]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000b4c:	498a      	ldr	r1, [pc, #552]	; (8000d78 <HAL_RCC_OscConfig+0x338>)
 8000b4e:	400a      	ands	r2, r1
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	4b88      	ldr	r3, [pc, #544]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b87      	ldr	r3, [pc, #540]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000b58:	4988      	ldr	r1, [pc, #544]	; (8000d7c <HAL_RCC_OscConfig+0x33c>)
 8000b5a:	400a      	ands	r2, r1
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	e01e      	b.n	8000b9e <HAL_RCC_OscConfig+0x15e>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b05      	cmp	r3, #5
 8000b66:	d10e      	bne.n	8000b86 <HAL_RCC_OscConfig+0x146>
 8000b68:	4b82      	ldr	r3, [pc, #520]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b81      	ldr	r3, [pc, #516]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000b6e:	2180      	movs	r1, #128	; 0x80
 8000b70:	02c9      	lsls	r1, r1, #11
 8000b72:	430a      	orrs	r2, r1
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	4b7f      	ldr	r3, [pc, #508]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	4b7e      	ldr	r3, [pc, #504]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	0249      	lsls	r1, r1, #9
 8000b80:	430a      	orrs	r2, r1
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	e00b      	b.n	8000b9e <HAL_RCC_OscConfig+0x15e>
 8000b86:	4b7b      	ldr	r3, [pc, #492]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4b7a      	ldr	r3, [pc, #488]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000b8c:	497a      	ldr	r1, [pc, #488]	; (8000d78 <HAL_RCC_OscConfig+0x338>)
 8000b8e:	400a      	ands	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	4b78      	ldr	r3, [pc, #480]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4b77      	ldr	r3, [pc, #476]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000b98:	4978      	ldr	r1, [pc, #480]	; (8000d7c <HAL_RCC_OscConfig+0x33c>)
 8000b9a:	400a      	ands	r2, r1
 8000b9c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d015      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x192>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba6:	f7ff fb77 	bl	8000298 <HAL_GetTick>
 8000baa:	0003      	movs	r3, r0
 8000bac:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bae:	e009      	b.n	8000bc4 <HAL_RCC_OscConfig+0x184>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bb0:	f7ff fb72 	bl	8000298 <HAL_GetTick>
 8000bb4:	0002      	movs	r2, r0
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	2b64      	cmp	r3, #100	; 0x64
 8000bbc:	d902      	bls.n	8000bc4 <HAL_RCC_OscConfig+0x184>
          {
            return HAL_TIMEOUT;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	f000 fb9a 	bl	80012f8 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bc4:	4b6b      	ldr	r3, [pc, #428]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	029b      	lsls	r3, r3, #10
 8000bcc:	4013      	ands	r3, r2
 8000bce:	d0ef      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x170>
 8000bd0:	e016      	b.n	8000c00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd2:	f7ff fb61 	bl	8000298 <HAL_GetTick>
 8000bd6:	0003      	movs	r3, r0
 8000bd8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bda:	e009      	b.n	8000bf0 <HAL_RCC_OscConfig+0x1b0>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bdc:	f7ff fb5c 	bl	8000298 <HAL_GetTick>
 8000be0:	0002      	movs	r2, r0
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	2b64      	cmp	r3, #100	; 0x64
 8000be8:	d902      	bls.n	8000bf0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000bea:	2303      	movs	r3, #3
 8000bec:	f000 fb84 	bl	80012f8 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bf0:	4b60      	ldr	r3, [pc, #384]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	029b      	lsls	r3, r3, #10
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	d1ef      	bne.n	8000bdc <HAL_RCC_OscConfig+0x19c>
 8000bfc:	e000      	b.n	8000c00 <HAL_RCC_OscConfig+0x1c0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bfe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2202      	movs	r2, #2
 8000c06:	4013      	ands	r3, r2
 8000c08:	d100      	bne.n	8000c0c <HAL_RCC_OscConfig+0x1cc>
 8000c0a:	e085      	b.n	8000d18 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00b      	beq.n	8000c2c <HAL_RCC_OscConfig+0x1ec>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d007      	beq.n	8000c2c <HAL_RCC_OscConfig+0x1ec>
 8000c1c:	234e      	movs	r3, #78	; 0x4e
 8000c1e:	33ff      	adds	r3, #255	; 0xff
 8000c20:	001a      	movs	r2, r3
 8000c22:	4b53      	ldr	r3, [pc, #332]	; (8000d70 <HAL_RCC_OscConfig+0x330>)
 8000c24:	0011      	movs	r1, r2
 8000c26:	0018      	movs	r0, r3
 8000c28:	f002 feed 	bl	8003a06 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	2b1f      	cmp	r3, #31
 8000c32:	d906      	bls.n	8000c42 <HAL_RCC_OscConfig+0x202>
 8000c34:	23a7      	movs	r3, #167	; 0xa7
 8000c36:	005a      	lsls	r2, r3, #1
 8000c38:	4b4d      	ldr	r3, [pc, #308]	; (8000d70 <HAL_RCC_OscConfig+0x330>)
 8000c3a:	0011      	movs	r1, r2
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f002 fee2 	bl	8003a06 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c42:	4b4c      	ldr	r3, [pc, #304]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	220c      	movs	r2, #12
 8000c48:	4013      	ands	r3, r2
 8000c4a:	d00b      	beq.n	8000c64 <HAL_RCC_OscConfig+0x224>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c4c:	4b49      	ldr	r3, [pc, #292]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	220c      	movs	r2, #12
 8000c52:	4013      	ands	r3, r2
 8000c54:	2b08      	cmp	r3, #8
 8000c56:	d11d      	bne.n	8000c94 <HAL_RCC_OscConfig+0x254>
 8000c58:	4b46      	ldr	r3, [pc, #280]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	025b      	lsls	r3, r3, #9
 8000c60:	4013      	ands	r3, r2
 8000c62:	d117      	bne.n	8000c94 <HAL_RCC_OscConfig+0x254>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c64:	4b43      	ldr	r3, [pc, #268]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2202      	movs	r2, #2
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d006      	beq.n	8000c7c <HAL_RCC_OscConfig+0x23c>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d002      	beq.n	8000c7c <HAL_RCC_OscConfig+0x23c>
      {
        return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	f000 fb3e 	bl	80012f8 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c7c:	4b3d      	ldr	r3, [pc, #244]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	22f8      	movs	r2, #248	; 0xf8
 8000c82:	4393      	bics	r3, r2
 8000c84:	0019      	movs	r1, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	00da      	lsls	r2, r3, #3
 8000c8c:	4b39      	ldr	r3, [pc, #228]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c92:	e041      	b.n	8000d18 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d024      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x2a6>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c9c:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca8:	f7ff faf6 	bl	8000298 <HAL_GetTick>
 8000cac:	0003      	movs	r3, r0
 8000cae:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb0:	e008      	b.n	8000cc4 <HAL_RCC_OscConfig+0x284>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cb2:	f7ff faf1 	bl	8000298 <HAL_GetTick>
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d901      	bls.n	8000cc4 <HAL_RCC_OscConfig+0x284>
          {
            return HAL_TIMEOUT;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	e319      	b.n	80012f8 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc4:	4b2b      	ldr	r3, [pc, #172]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2202      	movs	r2, #2
 8000cca:	4013      	ands	r3, r2
 8000ccc:	d0f1      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x272>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cce:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	22f8      	movs	r2, #248	; 0xf8
 8000cd4:	4393      	bics	r3, r2
 8000cd6:	0019      	movs	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	00da      	lsls	r2, r3, #3
 8000cde:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	e018      	b.n	8000d18 <HAL_RCC_OscConfig+0x2d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ce6:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000cec:	2101      	movs	r1, #1
 8000cee:	438a      	bics	r2, r1
 8000cf0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf2:	f7ff fad1 	bl	8000298 <HAL_GetTick>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cfa:	e008      	b.n	8000d0e <HAL_RCC_OscConfig+0x2ce>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cfc:	f7ff facc 	bl	8000298 <HAL_GetTick>
 8000d00:	0002      	movs	r2, r0
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d901      	bls.n	8000d0e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e2f4      	b.n	80012f8 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2202      	movs	r2, #2
 8000d14:	4013      	ands	r3, r2
 8000d16:	d1f1      	bne.n	8000cfc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2208      	movs	r2, #8
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d04d      	beq.n	8000dbe <HAL_RCC_OscConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00a      	beq.n	8000d40 <HAL_RCC_OscConfig+0x300>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d006      	beq.n	8000d40 <HAL_RCC_OscConfig+0x300>
 8000d32:	23c7      	movs	r3, #199	; 0xc7
 8000d34:	005a      	lsls	r2, r3, #1
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_RCC_OscConfig+0x330>)
 8000d38:	0011      	movs	r1, r2
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f002 fe63 	bl	8003a06 <assert_failed>
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d021      	beq.n	8000d8c <HAL_RCC_OscConfig+0x34c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_RCC_OscConfig+0x334>)
 8000d4e:	2101      	movs	r1, #1
 8000d50:	430a      	orrs	r2, r1
 8000d52:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d54:	f7ff faa0 	bl	8000298 <HAL_GetTick>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d5c:	e010      	b.n	8000d80 <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d5e:	f7ff fa9b 	bl	8000298 <HAL_GetTick>
 8000d62:	0002      	movs	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d909      	bls.n	8000d80 <HAL_RCC_OscConfig+0x340>
        {
          return HAL_TIMEOUT;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e2c3      	b.n	80012f8 <HAL_RCC_OscConfig+0x8b8>
 8000d70:	08003e14 	.word	0x08003e14
 8000d74:	40021000 	.word	0x40021000
 8000d78:	fffeffff 	.word	0xfffeffff
 8000d7c:	fffbffff 	.word	0xfffbffff
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d80:	4bb3      	ldr	r3, [pc, #716]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d84:	2202      	movs	r2, #2
 8000d86:	4013      	ands	r3, r2
 8000d88:	d0e9      	beq.n	8000d5e <HAL_RCC_OscConfig+0x31e>
 8000d8a:	e018      	b.n	8000dbe <HAL_RCC_OscConfig+0x37e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d8c:	4bb0      	ldr	r3, [pc, #704]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d90:	4baf      	ldr	r3, [pc, #700]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000d92:	2101      	movs	r1, #1
 8000d94:	438a      	bics	r2, r1
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d98:	f7ff fa7e 	bl	8000298 <HAL_GetTick>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da0:	e008      	b.n	8000db4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000da2:	f7ff fa79 	bl	8000298 <HAL_GetTick>
 8000da6:	0002      	movs	r2, r0
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d901      	bls.n	8000db4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8000db0:	2303      	movs	r3, #3
 8000db2:	e2a1      	b.n	80012f8 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db4:	4ba6      	ldr	r3, [pc, #664]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db8:	2202      	movs	r2, #2
 8000dba:	4013      	ands	r3, r2
 8000dbc:	d1f1      	bne.n	8000da2 <HAL_RCC_OscConfig+0x362>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	d100      	bne.n	8000dca <HAL_RCC_OscConfig+0x38a>
 8000dc8:	e0c0      	b.n	8000f4c <HAL_RCC_OscConfig+0x50c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dca:	2317      	movs	r3, #23
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
    
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00e      	beq.n	8000df8 <HAL_RCC_OscConfig+0x3b8>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d00a      	beq.n	8000df8 <HAL_RCC_OscConfig+0x3b8>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	2b05      	cmp	r3, #5
 8000de8:	d006      	beq.n	8000df8 <HAL_RCC_OscConfig+0x3b8>
 8000dea:	23dd      	movs	r3, #221	; 0xdd
 8000dec:	005a      	lsls	r2, r3, #1
 8000dee:	4b99      	ldr	r3, [pc, #612]	; (8001054 <HAL_RCC_OscConfig+0x614>)
 8000df0:	0011      	movs	r1, r2
 8000df2:	0018      	movs	r0, r3
 8000df4:	f002 fe07 	bl	8003a06 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000df8:	4b95      	ldr	r3, [pc, #596]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000dfa:	69da      	ldr	r2, [r3, #28]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	055b      	lsls	r3, r3, #21
 8000e00:	4013      	ands	r3, r2
 8000e02:	d111      	bne.n	8000e28 <HAL_RCC_OscConfig+0x3e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e04:	4b92      	ldr	r3, [pc, #584]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000e06:	69da      	ldr	r2, [r3, #28]
 8000e08:	4b91      	ldr	r3, [pc, #580]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	0549      	lsls	r1, r1, #21
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	61da      	str	r2, [r3, #28]
 8000e12:	4b8f      	ldr	r3, [pc, #572]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000e14:	69da      	ldr	r2, [r3, #28]
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	055b      	lsls	r3, r3, #21
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e20:	2317      	movs	r3, #23
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e28:	4b8b      	ldr	r3, [pc, #556]	; (8001058 <HAL_RCC_OscConfig+0x618>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4013      	ands	r3, r2
 8000e32:	d11a      	bne.n	8000e6a <HAL_RCC_OscConfig+0x42a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e34:	4b88      	ldr	r3, [pc, #544]	; (8001058 <HAL_RCC_OscConfig+0x618>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b87      	ldr	r3, [pc, #540]	; (8001058 <HAL_RCC_OscConfig+0x618>)
 8000e3a:	2180      	movs	r1, #128	; 0x80
 8000e3c:	0049      	lsls	r1, r1, #1
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e42:	f7ff fa29 	bl	8000298 <HAL_GetTick>
 8000e46:	0003      	movs	r3, r0
 8000e48:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4a:	e008      	b.n	8000e5e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e4c:	f7ff fa24 	bl	8000298 <HAL_GetTick>
 8000e50:	0002      	movs	r2, r0
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b64      	cmp	r3, #100	; 0x64
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e24c      	b.n	80012f8 <HAL_RCC_OscConfig+0x8b8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5e:	4b7e      	ldr	r3, [pc, #504]	; (8001058 <HAL_RCC_OscConfig+0x618>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4013      	ands	r3, r2
 8000e68:	d0f0      	beq.n	8000e4c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d106      	bne.n	8000e80 <HAL_RCC_OscConfig+0x440>
 8000e72:	4b77      	ldr	r3, [pc, #476]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000e74:	6a1a      	ldr	r2, [r3, #32]
 8000e76:	4b76      	ldr	r3, [pc, #472]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000e78:	2101      	movs	r1, #1
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	621a      	str	r2, [r3, #32]
 8000e7e:	e02d      	b.n	8000edc <HAL_RCC_OscConfig+0x49c>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10c      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x462>
 8000e88:	4b71      	ldr	r3, [pc, #452]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000e8a:	6a1a      	ldr	r2, [r3, #32]
 8000e8c:	4b70      	ldr	r3, [pc, #448]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000e8e:	2101      	movs	r1, #1
 8000e90:	438a      	bics	r2, r1
 8000e92:	621a      	str	r2, [r3, #32]
 8000e94:	4b6e      	ldr	r3, [pc, #440]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000e96:	6a1a      	ldr	r2, [r3, #32]
 8000e98:	4b6d      	ldr	r3, [pc, #436]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000e9a:	2104      	movs	r1, #4
 8000e9c:	438a      	bics	r2, r1
 8000e9e:	621a      	str	r2, [r3, #32]
 8000ea0:	e01c      	b.n	8000edc <HAL_RCC_OscConfig+0x49c>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2b05      	cmp	r3, #5
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x484>
 8000eaa:	4b69      	ldr	r3, [pc, #420]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000eac:	6a1a      	ldr	r2, [r3, #32]
 8000eae:	4b68      	ldr	r3, [pc, #416]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	621a      	str	r2, [r3, #32]
 8000eb6:	4b66      	ldr	r3, [pc, #408]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000eb8:	6a1a      	ldr	r2, [r3, #32]
 8000eba:	4b65      	ldr	r3, [pc, #404]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	621a      	str	r2, [r3, #32]
 8000ec2:	e00b      	b.n	8000edc <HAL_RCC_OscConfig+0x49c>
 8000ec4:	4b62      	ldr	r3, [pc, #392]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000ec6:	6a1a      	ldr	r2, [r3, #32]
 8000ec8:	4b61      	ldr	r3, [pc, #388]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000eca:	2101      	movs	r1, #1
 8000ecc:	438a      	bics	r2, r1
 8000ece:	621a      	str	r2, [r3, #32]
 8000ed0:	4b5f      	ldr	r3, [pc, #380]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000ed2:	6a1a      	ldr	r2, [r3, #32]
 8000ed4:	4b5e      	ldr	r3, [pc, #376]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	438a      	bics	r2, r1
 8000eda:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d014      	beq.n	8000f0e <HAL_RCC_OscConfig+0x4ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee4:	f7ff f9d8 	bl	8000298 <HAL_GetTick>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eec:	e009      	b.n	8000f02 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eee:	f7ff f9d3 	bl	8000298 <HAL_GetTick>
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	4a58      	ldr	r2, [pc, #352]	; (800105c <HAL_RCC_OscConfig+0x61c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e1fa      	b.n	80012f8 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f02:	4b53      	ldr	r3, [pc, #332]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	2202      	movs	r2, #2
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d0f0      	beq.n	8000eee <HAL_RCC_OscConfig+0x4ae>
 8000f0c:	e013      	b.n	8000f36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0e:	f7ff f9c3 	bl	8000298 <HAL_GetTick>
 8000f12:	0003      	movs	r3, r0
 8000f14:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f16:	e009      	b.n	8000f2c <HAL_RCC_OscConfig+0x4ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f18:	f7ff f9be 	bl	8000298 <HAL_GetTick>
 8000f1c:	0002      	movs	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	4a4e      	ldr	r2, [pc, #312]	; (800105c <HAL_RCC_OscConfig+0x61c>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_OscConfig+0x4ec>
        {
          return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e1e5      	b.n	80012f8 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f2c:	4b48      	ldr	r3, [pc, #288]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	2202      	movs	r2, #2
 8000f32:	4013      	ands	r3, r2
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f36:	2317      	movs	r3, #23
 8000f38:	18fb      	adds	r3, r7, r3
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d105      	bne.n	8000f4c <HAL_RCC_OscConfig+0x50c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f40:	4b43      	ldr	r3, [pc, #268]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000f42:	69da      	ldr	r2, [r3, #28]
 8000f44:	4b42      	ldr	r3, [pc, #264]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000f46:	4946      	ldr	r1, [pc, #280]	; (8001060 <HAL_RCC_OscConfig+0x620>)
 8000f48:	400a      	ands	r2, r1
 8000f4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2210      	movs	r2, #16
 8000f52:	4013      	ands	r3, r2
 8000f54:	d100      	bne.n	8000f58 <HAL_RCC_OscConfig+0x518>
 8000f56:	e08c      	b.n	8001072 <HAL_RCC_OscConfig+0x632>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d00e      	beq.n	8000f7e <HAL_RCC_OscConfig+0x53e>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d00a      	beq.n	8000f7e <HAL_RCC_OscConfig+0x53e>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	3305      	adds	r3, #5
 8000f6e:	d006      	beq.n	8000f7e <HAL_RCC_OscConfig+0x53e>
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	009a      	lsls	r2, r3, #2
 8000f74:	4b37      	ldr	r3, [pc, #220]	; (8001054 <HAL_RCC_OscConfig+0x614>)
 8000f76:	0011      	movs	r1, r2
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f002 fd44 	bl	8003a06 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	2b1f      	cmp	r3, #31
 8000f84:	d905      	bls.n	8000f92 <HAL_RCC_OscConfig+0x552>
 8000f86:	4a37      	ldr	r2, [pc, #220]	; (8001064 <HAL_RCC_OscConfig+0x624>)
 8000f88:	4b32      	ldr	r3, [pc, #200]	; (8001054 <HAL_RCC_OscConfig+0x614>)
 8000f8a:	0011      	movs	r1, r2
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f002 fd3a 	bl	8003a06 <assert_failed>

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d12a      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x5b0>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f9e:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000faa:	4b29      	ldr	r3, [pc, #164]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000fac:	2101      	movs	r1, #1
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb2:	f7ff f971 	bl	8000298 <HAL_GetTick>
 8000fb6:	0003      	movs	r3, r0
 8000fb8:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0x58e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000fbc:	f7ff f96c 	bl	8000298 <HAL_GetTick>
 8000fc0:	0002      	movs	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x58e>
        {
          return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e194      	b.n	80012f8 <HAL_RCC_OscConfig+0x8b8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d0f1      	beq.n	8000fbc <HAL_RCC_OscConfig+0x57c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fdc:	22f8      	movs	r2, #248	; 0xf8
 8000fde:	4393      	bics	r3, r2
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	00da      	lsls	r2, r3, #3
 8000fe8:	4b19      	ldr	r3, [pc, #100]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000fea:	430a      	orrs	r2, r1
 8000fec:	635a      	str	r2, [r3, #52]	; 0x34
 8000fee:	e040      	b.n	8001072 <HAL_RCC_OscConfig+0x632>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	3305      	adds	r3, #5
 8000ff6:	d111      	bne.n	800101c <HAL_RCC_OscConfig+0x5dc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8000ffe:	2104      	movs	r1, #4
 8001000:	438a      	bics	r2, r1
 8001002:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8001006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001008:	22f8      	movs	r2, #248	; 0xf8
 800100a:	4393      	bics	r3, r2
 800100c:	0019      	movs	r1, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	00da      	lsls	r2, r3, #3
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8001016:	430a      	orrs	r2, r1
 8001018:	635a      	str	r2, [r3, #52]	; 0x34
 800101a:	e02a      	b.n	8001072 <HAL_RCC_OscConfig+0x632>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 800101e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 8001022:	2104      	movs	r1, #4
 8001024:	430a      	orrs	r2, r1
 8001026:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 800102a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_RCC_OscConfig+0x610>)
 800102e:	2101      	movs	r1, #1
 8001030:	438a      	bics	r2, r1
 8001032:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001034:	f7ff f930 	bl	8000298 <HAL_GetTick>
 8001038:	0003      	movs	r3, r0
 800103a:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800103c:	e014      	b.n	8001068 <HAL_RCC_OscConfig+0x628>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800103e:	f7ff f92b 	bl	8000298 <HAL_GetTick>
 8001042:	0002      	movs	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d90d      	bls.n	8001068 <HAL_RCC_OscConfig+0x628>
        {
          return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e153      	b.n	80012f8 <HAL_RCC_OscConfig+0x8b8>
 8001050:	40021000 	.word	0x40021000
 8001054:	08003e14 	.word	0x08003e14
 8001058:	40007000 	.word	0x40007000
 800105c:	00001388 	.word	0x00001388
 8001060:	efffffff 	.word	0xefffffff
 8001064:	00000201 	.word	0x00000201
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001068:	4ba5      	ldr	r3, [pc, #660]	; (8001300 <HAL_RCC_OscConfig+0x8c0>)
 800106a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800106c:	2202      	movs	r2, #2
 800106e:	4013      	ands	r3, r2
 8001070:	d1e5      	bne.n	800103e <HAL_RCC_OscConfig+0x5fe>
  }
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00e      	beq.n	8001098 <HAL_RCC_OscConfig+0x658>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d00a      	beq.n	8001098 <HAL_RCC_OscConfig+0x658>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d006      	beq.n	8001098 <HAL_RCC_OscConfig+0x658>
 800108a:	239d      	movs	r3, #157	; 0x9d
 800108c:	009a      	lsls	r2, r3, #2
 800108e:	4b9d      	ldr	r3, [pc, #628]	; (8001304 <HAL_RCC_OscConfig+0x8c4>)
 8001090:	0011      	movs	r1, r2
 8001092:	0018      	movs	r0, r3
 8001094:	f002 fcb7 	bl	8003a06 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d100      	bne.n	80010a2 <HAL_RCC_OscConfig+0x662>
 80010a0:	e129      	b.n	80012f6 <HAL_RCC_OscConfig+0x8b6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010a2:	4b97      	ldr	r3, [pc, #604]	; (8001300 <HAL_RCC_OscConfig+0x8c0>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	220c      	movs	r2, #12
 80010a8:	4013      	ands	r3, r2
 80010aa:	2b08      	cmp	r3, #8
 80010ac:	d100      	bne.n	80010b0 <HAL_RCC_OscConfig+0x670>
 80010ae:	e120      	b.n	80012f2 <HAL_RCC_OscConfig+0x8b2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d000      	beq.n	80010ba <HAL_RCC_OscConfig+0x67a>
 80010b8:	e100      	b.n	80012bc <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00b      	beq.n	80010da <HAL_RCC_OscConfig+0x69a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	025b      	lsls	r3, r3, #9
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d005      	beq.n	80010da <HAL_RCC_OscConfig+0x69a>
 80010ce:	4a8e      	ldr	r2, [pc, #568]	; (8001308 <HAL_RCC_OscConfig+0x8c8>)
 80010d0:	4b8c      	ldr	r3, [pc, #560]	; (8001304 <HAL_RCC_OscConfig+0x8c4>)
 80010d2:	0011      	movs	r1, r2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f002 fc96 	bl	8003a06 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d059      	beq.n	8001196 <HAL_RCC_OscConfig+0x756>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	02db      	lsls	r3, r3, #11
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d053      	beq.n	8001196 <HAL_RCC_OscConfig+0x756>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	031b      	lsls	r3, r3, #12
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d04d      	beq.n	8001196 <HAL_RCC_OscConfig+0x756>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010fe:	23c0      	movs	r3, #192	; 0xc0
 8001100:	031b      	lsls	r3, r3, #12
 8001102:	429a      	cmp	r2, r3
 8001104:	d047      	beq.n	8001196 <HAL_RCC_OscConfig+0x756>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	035b      	lsls	r3, r3, #13
 800110e:	429a      	cmp	r2, r3
 8001110:	d041      	beq.n	8001196 <HAL_RCC_OscConfig+0x756>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001116:	23a0      	movs	r3, #160	; 0xa0
 8001118:	035b      	lsls	r3, r3, #13
 800111a:	429a      	cmp	r2, r3
 800111c:	d03b      	beq.n	8001196 <HAL_RCC_OscConfig+0x756>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001122:	23c0      	movs	r3, #192	; 0xc0
 8001124:	035b      	lsls	r3, r3, #13
 8001126:	429a      	cmp	r2, r3
 8001128:	d035      	beq.n	8001196 <HAL_RCC_OscConfig+0x756>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800112e:	23e0      	movs	r3, #224	; 0xe0
 8001130:	035b      	lsls	r3, r3, #13
 8001132:	429a      	cmp	r2, r3
 8001134:	d02f      	beq.n	8001196 <HAL_RCC_OscConfig+0x756>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	039b      	lsls	r3, r3, #14
 800113e:	429a      	cmp	r2, r3
 8001140:	d029      	beq.n	8001196 <HAL_RCC_OscConfig+0x756>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001146:	2390      	movs	r3, #144	; 0x90
 8001148:	039b      	lsls	r3, r3, #14
 800114a:	429a      	cmp	r2, r3
 800114c:	d023      	beq.n	8001196 <HAL_RCC_OscConfig+0x756>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001152:	23a0      	movs	r3, #160	; 0xa0
 8001154:	039b      	lsls	r3, r3, #14
 8001156:	429a      	cmp	r2, r3
 8001158:	d01d      	beq.n	8001196 <HAL_RCC_OscConfig+0x756>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800115e:	23b0      	movs	r3, #176	; 0xb0
 8001160:	039b      	lsls	r3, r3, #14
 8001162:	429a      	cmp	r2, r3
 8001164:	d017      	beq.n	8001196 <HAL_RCC_OscConfig+0x756>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800116a:	23c0      	movs	r3, #192	; 0xc0
 800116c:	039b      	lsls	r3, r3, #14
 800116e:	429a      	cmp	r2, r3
 8001170:	d011      	beq.n	8001196 <HAL_RCC_OscConfig+0x756>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001176:	23d0      	movs	r3, #208	; 0xd0
 8001178:	039b      	lsls	r3, r3, #14
 800117a:	429a      	cmp	r2, r3
 800117c:	d00b      	beq.n	8001196 <HAL_RCC_OscConfig+0x756>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001182:	23e0      	movs	r3, #224	; 0xe0
 8001184:	039b      	lsls	r3, r3, #14
 8001186:	429a      	cmp	r2, r3
 8001188:	d005      	beq.n	8001196 <HAL_RCC_OscConfig+0x756>
 800118a:	4a60      	ldr	r2, [pc, #384]	; (800130c <HAL_RCC_OscConfig+0x8cc>)
 800118c:	4b5d      	ldr	r3, [pc, #372]	; (8001304 <HAL_RCC_OscConfig+0x8c4>)
 800118e:	0011      	movs	r1, r2
 8001190:	0018      	movs	r0, r3
 8001192:	f002 fc38 	bl	8003a06 <assert_failed>
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119a:	2b00      	cmp	r3, #0
 800119c:	d041      	beq.n	8001222 <HAL_RCC_OscConfig+0x7e2>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d03d      	beq.n	8001222 <HAL_RCC_OscConfig+0x7e2>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d039      	beq.n	8001222 <HAL_RCC_OscConfig+0x7e2>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d035      	beq.n	8001222 <HAL_RCC_OscConfig+0x7e2>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d031      	beq.n	8001222 <HAL_RCC_OscConfig+0x7e2>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c2:	2b05      	cmp	r3, #5
 80011c4:	d02d      	beq.n	8001222 <HAL_RCC_OscConfig+0x7e2>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d029      	beq.n	8001222 <HAL_RCC_OscConfig+0x7e2>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d2:	2b07      	cmp	r3, #7
 80011d4:	d025      	beq.n	8001222 <HAL_RCC_OscConfig+0x7e2>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d021      	beq.n	8001222 <HAL_RCC_OscConfig+0x7e2>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e2:	2b09      	cmp	r3, #9
 80011e4:	d01d      	beq.n	8001222 <HAL_RCC_OscConfig+0x7e2>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ea:	2b0a      	cmp	r3, #10
 80011ec:	d019      	beq.n	8001222 <HAL_RCC_OscConfig+0x7e2>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f2:	2b0b      	cmp	r3, #11
 80011f4:	d015      	beq.n	8001222 <HAL_RCC_OscConfig+0x7e2>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fa:	2b0c      	cmp	r3, #12
 80011fc:	d011      	beq.n	8001222 <HAL_RCC_OscConfig+0x7e2>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001202:	2b0d      	cmp	r3, #13
 8001204:	d00d      	beq.n	8001222 <HAL_RCC_OscConfig+0x7e2>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120a:	2b0e      	cmp	r3, #14
 800120c:	d009      	beq.n	8001222 <HAL_RCC_OscConfig+0x7e2>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001212:	2b0f      	cmp	r3, #15
 8001214:	d005      	beq.n	8001222 <HAL_RCC_OscConfig+0x7e2>
 8001216:	4a3e      	ldr	r2, [pc, #248]	; (8001310 <HAL_RCC_OscConfig+0x8d0>)
 8001218:	4b3a      	ldr	r3, [pc, #232]	; (8001304 <HAL_RCC_OscConfig+0x8c4>)
 800121a:	0011      	movs	r1, r2
 800121c:	0018      	movs	r0, r3
 800121e:	f002 fbf2 	bl	8003a06 <assert_failed>
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001222:	4b37      	ldr	r3, [pc, #220]	; (8001300 <HAL_RCC_OscConfig+0x8c0>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4b36      	ldr	r3, [pc, #216]	; (8001300 <HAL_RCC_OscConfig+0x8c0>)
 8001228:	493a      	ldr	r1, [pc, #232]	; (8001314 <HAL_RCC_OscConfig+0x8d4>)
 800122a:	400a      	ands	r2, r1
 800122c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122e:	f7ff f833 	bl	8000298 <HAL_GetTick>
 8001232:	0003      	movs	r3, r0
 8001234:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x80a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001238:	f7ff f82e 	bl	8000298 <HAL_GetTick>
 800123c:	0002      	movs	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x80a>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e056      	b.n	80012f8 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <HAL_RCC_OscConfig+0x8c0>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	049b      	lsls	r3, r3, #18
 8001252:	4013      	ands	r3, r2
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x7f8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001256:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <HAL_RCC_OscConfig+0x8c0>)
 8001258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125a:	220f      	movs	r2, #15
 800125c:	4393      	bics	r3, r2
 800125e:	0019      	movs	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001264:	4b26      	ldr	r3, [pc, #152]	; (8001300 <HAL_RCC_OscConfig+0x8c0>)
 8001266:	430a      	orrs	r2, r1
 8001268:	62da      	str	r2, [r3, #44]	; 0x2c
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <HAL_RCC_OscConfig+0x8c0>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4a2a      	ldr	r2, [pc, #168]	; (8001318 <HAL_RCC_OscConfig+0x8d8>)
 8001270:	4013      	ands	r3, r2
 8001272:	0019      	movs	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	431a      	orrs	r2, r3
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <HAL_RCC_OscConfig+0x8c0>)
 8001280:	430a      	orrs	r2, r1
 8001282:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_RCC_OscConfig+0x8c0>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_RCC_OscConfig+0x8c0>)
 800128a:	2180      	movs	r1, #128	; 0x80
 800128c:	0449      	lsls	r1, r1, #17
 800128e:	430a      	orrs	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001292:	f7ff f801 	bl	8000298 <HAL_GetTick>
 8001296:	0003      	movs	r3, r0
 8001298:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800129c:	f7fe fffc 	bl	8000298 <HAL_GetTick>
 80012a0:	0002      	movs	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e024      	b.n	80012f8 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_RCC_OscConfig+0x8c0>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	049b      	lsls	r3, r3, #18
 80012b6:	4013      	ands	r3, r2
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0x85c>
 80012ba:	e01c      	b.n	80012f6 <HAL_RCC_OscConfig+0x8b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012bc:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_RCC_OscConfig+0x8c0>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <HAL_RCC_OscConfig+0x8c0>)
 80012c2:	4914      	ldr	r1, [pc, #80]	; (8001314 <HAL_RCC_OscConfig+0x8d4>)
 80012c4:	400a      	ands	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7fe ffe6 	bl	8000298 <HAL_GetTick>
 80012cc:	0003      	movs	r3, r0
 80012ce:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x8a4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d2:	f7fe ffe1 	bl	8000298 <HAL_GetTick>
 80012d6:	0002      	movs	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x8a4>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e009      	b.n	80012f8 <HAL_RCC_OscConfig+0x8b8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_RCC_OscConfig+0x8c0>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	049b      	lsls	r3, r3, #18
 80012ec:	4013      	ands	r3, r2
 80012ee:	d1f0      	bne.n	80012d2 <HAL_RCC_OscConfig+0x892>
 80012f0:	e001      	b.n	80012f6 <HAL_RCC_OscConfig+0x8b6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_RCC_OscConfig+0x8b8>
    }
  }
  
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b006      	add	sp, #24
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40021000 	.word	0x40021000
 8001304:	08003e14 	.word	0x08003e14
 8001308:	0000027d 	.word	0x0000027d
 800130c:	0000027e 	.word	0x0000027e
 8001310:	0000027f 	.word	0x0000027f
 8001314:	feffffff 	.word	0xfeffffff
 8001318:	ffc2ffff 	.word	0xffc2ffff

0800131c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d105      	bne.n	800133c <HAL_RCC_ClockConfig+0x20>
 8001330:	4aac      	ldr	r2, [pc, #688]	; (80015e4 <HAL_RCC_ClockConfig+0x2c8>)
 8001332:	4bad      	ldr	r3, [pc, #692]	; (80015e8 <HAL_RCC_ClockConfig+0x2cc>)
 8001334:	0011      	movs	r1, r2
 8001336:	0018      	movs	r0, r3
 8001338:	f002 fb65 	bl	8003a06 <assert_failed>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2201      	movs	r2, #1
 8001342:	4013      	ands	r3, r2
 8001344:	d10f      	bne.n	8001366 <HAL_RCC_ClockConfig+0x4a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	d10a      	bne.n	8001366 <HAL_RCC_ClockConfig+0x4a>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2204      	movs	r2, #4
 8001356:	4013      	ands	r3, r2
 8001358:	d105      	bne.n	8001366 <HAL_RCC_ClockConfig+0x4a>
 800135a:	4aa4      	ldr	r2, [pc, #656]	; (80015ec <HAL_RCC_ClockConfig+0x2d0>)
 800135c:	4ba2      	ldr	r3, [pc, #648]	; (80015e8 <HAL_RCC_ClockConfig+0x2cc>)
 800135e:	0011      	movs	r1, r2
 8001360:	0018      	movs	r0, r3
 8001362:	f002 fb50 	bl	8003a06 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d009      	beq.n	8001380 <HAL_RCC_ClockConfig+0x64>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d006      	beq.n	8001380 <HAL_RCC_ClockConfig+0x64>
 8001372:	23b7      	movs	r3, #183	; 0xb7
 8001374:	009a      	lsls	r2, r3, #2
 8001376:	4b9c      	ldr	r3, [pc, #624]	; (80015e8 <HAL_RCC_ClockConfig+0x2cc>)
 8001378:	0011      	movs	r1, r2
 800137a:	0018      	movs	r0, r3
 800137c:	f002 fb43 	bl	8003a06 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001380:	4b9b      	ldr	r3, [pc, #620]	; (80015f0 <HAL_RCC_ClockConfig+0x2d4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	4013      	ands	r3, r2
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d911      	bls.n	80013b2 <HAL_RCC_ClockConfig+0x96>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138e:	4b98      	ldr	r3, [pc, #608]	; (80015f0 <HAL_RCC_ClockConfig+0x2d4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2201      	movs	r2, #1
 8001394:	4393      	bics	r3, r2
 8001396:	0019      	movs	r1, r3
 8001398:	4b95      	ldr	r3, [pc, #596]	; (80015f0 <HAL_RCC_ClockConfig+0x2d4>)
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013a0:	4b93      	ldr	r3, [pc, #588]	; (80015f0 <HAL_RCC_ClockConfig+0x2d4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2201      	movs	r2, #1
 80013a6:	4013      	ands	r3, r2
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x96>
    {
      return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e114      	b.n	80015dc <HAL_RCC_ClockConfig+0x2c0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2202      	movs	r2, #2
 80013b8:	4013      	ands	r3, r2
 80013ba:	d033      	beq.n	8001424 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d025      	beq.n	8001410 <HAL_RCC_ClockConfig+0xf4>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b80      	cmp	r3, #128	; 0x80
 80013ca:	d021      	beq.n	8001410 <HAL_RCC_ClockConfig+0xf4>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2b90      	cmp	r3, #144	; 0x90
 80013d2:	d01d      	beq.n	8001410 <HAL_RCC_ClockConfig+0xf4>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2ba0      	cmp	r3, #160	; 0xa0
 80013da:	d019      	beq.n	8001410 <HAL_RCC_ClockConfig+0xf4>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2bb0      	cmp	r3, #176	; 0xb0
 80013e2:	d015      	beq.n	8001410 <HAL_RCC_ClockConfig+0xf4>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2bc0      	cmp	r3, #192	; 0xc0
 80013ea:	d011      	beq.n	8001410 <HAL_RCC_ClockConfig+0xf4>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2bd0      	cmp	r3, #208	; 0xd0
 80013f2:	d00d      	beq.n	8001410 <HAL_RCC_ClockConfig+0xf4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2be0      	cmp	r3, #224	; 0xe0
 80013fa:	d009      	beq.n	8001410 <HAL_RCC_ClockConfig+0xf4>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2bf0      	cmp	r3, #240	; 0xf0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_ClockConfig+0xf4>
 8001404:	4a7b      	ldr	r2, [pc, #492]	; (80015f4 <HAL_RCC_ClockConfig+0x2d8>)
 8001406:	4b78      	ldr	r3, [pc, #480]	; (80015e8 <HAL_RCC_ClockConfig+0x2cc>)
 8001408:	0011      	movs	r1, r2
 800140a:	0018      	movs	r0, r3
 800140c:	f002 fafb 	bl	8003a06 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001410:	4b79      	ldr	r3, [pc, #484]	; (80015f8 <HAL_RCC_ClockConfig+0x2dc>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	22f0      	movs	r2, #240	; 0xf0
 8001416:	4393      	bics	r3, r2
 8001418:	0019      	movs	r1, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	4b76      	ldr	r3, [pc, #472]	; (80015f8 <HAL_RCC_ClockConfig+0x2dc>)
 8001420:	430a      	orrs	r2, r1
 8001422:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2201      	movs	r2, #1
 800142a:	4013      	ands	r3, r2
 800142c:	d100      	bne.n	8001430 <HAL_RCC_ClockConfig+0x114>
 800142e:	e079      	b.n	8001524 <HAL_RCC_ClockConfig+0x208>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00d      	beq.n	8001454 <HAL_RCC_ClockConfig+0x138>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d009      	beq.n	8001454 <HAL_RCC_ClockConfig+0x138>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d005      	beq.n	8001454 <HAL_RCC_ClockConfig+0x138>
 8001448:	4a6c      	ldr	r2, [pc, #432]	; (80015fc <HAL_RCC_ClockConfig+0x2e0>)
 800144a:	4b67      	ldr	r3, [pc, #412]	; (80015e8 <HAL_RCC_ClockConfig+0x2cc>)
 800144c:	0011      	movs	r1, r2
 800144e:	0018      	movs	r0, r3
 8001450:	f002 fad9 	bl	8003a06 <assert_failed>
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d107      	bne.n	800146c <HAL_RCC_ClockConfig+0x150>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145c:	4b66      	ldr	r3, [pc, #408]	; (80015f8 <HAL_RCC_ClockConfig+0x2dc>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	029b      	lsls	r3, r3, #10
 8001464:	4013      	ands	r3, r2
 8001466:	d114      	bne.n	8001492 <HAL_RCC_ClockConfig+0x176>
      {
        return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0b7      	b.n	80015dc <HAL_RCC_ClockConfig+0x2c0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d107      	bne.n	8001484 <HAL_RCC_ClockConfig+0x168>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001474:	4b60      	ldr	r3, [pc, #384]	; (80015f8 <HAL_RCC_ClockConfig+0x2dc>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	049b      	lsls	r3, r3, #18
 800147c:	4013      	ands	r3, r2
 800147e:	d108      	bne.n	8001492 <HAL_RCC_ClockConfig+0x176>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0ab      	b.n	80015dc <HAL_RCC_ClockConfig+0x2c0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001484:	4b5c      	ldr	r3, [pc, #368]	; (80015f8 <HAL_RCC_ClockConfig+0x2dc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2202      	movs	r2, #2
 800148a:	4013      	ands	r3, r2
 800148c:	d101      	bne.n	8001492 <HAL_RCC_ClockConfig+0x176>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e0a4      	b.n	80015dc <HAL_RCC_ClockConfig+0x2c0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001492:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <HAL_RCC_ClockConfig+0x2dc>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2203      	movs	r2, #3
 8001498:	4393      	bics	r3, r2
 800149a:	0019      	movs	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	4b55      	ldr	r3, [pc, #340]	; (80015f8 <HAL_RCC_ClockConfig+0x2dc>)
 80014a2:	430a      	orrs	r2, r1
 80014a4:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a6:	f7fe fef7 	bl	8000298 <HAL_GetTick>
 80014aa:	0003      	movs	r3, r0
 80014ac:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d111      	bne.n	80014da <HAL_RCC_ClockConfig+0x1be>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b6:	e009      	b.n	80014cc <HAL_RCC_ClockConfig+0x1b0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b8:	f7fe feee 	bl	8000298 <HAL_GetTick>
 80014bc:	0002      	movs	r2, r0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	4a4f      	ldr	r2, [pc, #316]	; (8001600 <HAL_RCC_ClockConfig+0x2e4>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_ClockConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e087      	b.n	80015dc <HAL_RCC_ClockConfig+0x2c0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014cc:	4b4a      	ldr	r3, [pc, #296]	; (80015f8 <HAL_RCC_ClockConfig+0x2dc>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	220c      	movs	r2, #12
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d1ef      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x19c>
 80014d8:	e024      	b.n	8001524 <HAL_RCC_ClockConfig+0x208>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d11b      	bne.n	800151a <HAL_RCC_ClockConfig+0x1fe>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014e2:	e009      	b.n	80014f8 <HAL_RCC_ClockConfig+0x1dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e4:	f7fe fed8 	bl	8000298 <HAL_GetTick>
 80014e8:	0002      	movs	r2, r0
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	4a44      	ldr	r2, [pc, #272]	; (8001600 <HAL_RCC_ClockConfig+0x2e4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_ClockConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e071      	b.n	80015dc <HAL_RCC_ClockConfig+0x2c0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f8:	4b3f      	ldr	r3, [pc, #252]	; (80015f8 <HAL_RCC_ClockConfig+0x2dc>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	220c      	movs	r2, #12
 80014fe:	4013      	ands	r3, r2
 8001500:	2b08      	cmp	r3, #8
 8001502:	d1ef      	bne.n	80014e4 <HAL_RCC_ClockConfig+0x1c8>
 8001504:	e00e      	b.n	8001524 <HAL_RCC_ClockConfig+0x208>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001506:	f7fe fec7 	bl	8000298 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	4a3b      	ldr	r2, [pc, #236]	; (8001600 <HAL_RCC_ClockConfig+0x2e4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_ClockConfig+0x1fe>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e060      	b.n	80015dc <HAL_RCC_ClockConfig+0x2c0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800151a:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <HAL_RCC_ClockConfig+0x2dc>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	220c      	movs	r2, #12
 8001520:	4013      	ands	r3, r2
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_ClockConfig+0x1ea>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001524:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <HAL_RCC_ClockConfig+0x2d4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4013      	ands	r3, r2
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d211      	bcs.n	8001556 <HAL_RCC_ClockConfig+0x23a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001532:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <HAL_RCC_ClockConfig+0x2d4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2201      	movs	r2, #1
 8001538:	4393      	bics	r3, r2
 800153a:	0019      	movs	r1, r3
 800153c:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <HAL_RCC_ClockConfig+0x2d4>)
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001544:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <HAL_RCC_ClockConfig+0x2d4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2201      	movs	r2, #1
 800154a:	4013      	ands	r3, r2
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d001      	beq.n	8001556 <HAL_RCC_ClockConfig+0x23a>
    {
      return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e042      	b.n	80015dc <HAL_RCC_ClockConfig+0x2c0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2204      	movs	r2, #4
 800155c:	4013      	ands	r3, r2
 800155e:	d02b      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x29c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d01d      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x288>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	429a      	cmp	r2, r3
 8001572:	d017      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x288>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	23a0      	movs	r3, #160	; 0xa0
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	429a      	cmp	r2, r3
 800157e:	d011      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x288>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	23c0      	movs	r3, #192	; 0xc0
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	429a      	cmp	r2, r3
 800158a:	d00b      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x288>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	23e0      	movs	r3, #224	; 0xe0
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	429a      	cmp	r2, r3
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x288>
 8001598:	4a1a      	ldr	r2, [pc, #104]	; (8001604 <HAL_RCC_ClockConfig+0x2e8>)
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_RCC_ClockConfig+0x2cc>)
 800159c:	0011      	movs	r1, r2
 800159e:	0018      	movs	r0, r3
 80015a0:	f002 fa31 	bl	8003a06 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_RCC_ClockConfig+0x2dc>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	4a17      	ldr	r2, [pc, #92]	; (8001608 <HAL_RCC_ClockConfig+0x2ec>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	0019      	movs	r1, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_RCC_ClockConfig+0x2dc>)
 80015b4:	430a      	orrs	r2, r1
 80015b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80015b8:	f000 f82c 	bl	8001614 <HAL_RCC_GetSysClockFreq>
 80015bc:	0001      	movs	r1, r0
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_RCC_ClockConfig+0x2dc>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	091b      	lsrs	r3, r3, #4
 80015c4:	220f      	movs	r2, #15
 80015c6:	4013      	ands	r3, r2
 80015c8:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_RCC_ClockConfig+0x2f0>)
 80015ca:	5cd3      	ldrb	r3, [r2, r3]
 80015cc:	000a      	movs	r2, r1
 80015ce:	40da      	lsrs	r2, r3
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_RCC_ClockConfig+0x2f4>)
 80015d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80015d4:	2000      	movs	r0, #0
 80015d6:	f7fe fe37 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	b004      	add	sp, #16
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	000002da 	.word	0x000002da
 80015e8:	08003e14 	.word	0x08003e14
 80015ec:	000002db 	.word	0x000002db
 80015f0:	40022000 	.word	0x40022000
 80015f4:	000002f3 	.word	0x000002f3
 80015f8:	40021000 	.word	0x40021000
 80015fc:	000002fa 	.word	0x000002fa
 8001600:	00001388 	.word	0x00001388
 8001604:	00000363 	.word	0x00000363
 8001608:	fffff8ff 	.word	0xfffff8ff
 800160c:	08003ef0 	.word	0x08003ef0
 8001610:	20000000 	.word	0x20000000

08001614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b08f      	sub	sp, #60	; 0x3c
 8001618:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800161a:	2314      	movs	r3, #20
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	4a2b      	ldr	r2, [pc, #172]	; (80016cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001620:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001622:	c313      	stmia	r3!, {r0, r1, r4}
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4a29      	ldr	r2, [pc, #164]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800162c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800162e:	c313      	stmia	r3!, {r0, r1, r4}
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001638:	2300      	movs	r3, #0
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
 800163c:	2300      	movs	r3, #0
 800163e:	637b      	str	r3, [r7, #52]	; 0x34
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001648:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800164e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001650:	220c      	movs	r2, #12
 8001652:	4013      	ands	r3, r2
 8001654:	2b04      	cmp	r3, #4
 8001656:	d002      	beq.n	800165e <HAL_RCC_GetSysClockFreq+0x4a>
 8001658:	2b08      	cmp	r3, #8
 800165a:	d003      	beq.n	8001664 <HAL_RCC_GetSysClockFreq+0x50>
 800165c:	e02d      	b.n	80016ba <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001662:	e02d      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001666:	0c9b      	lsrs	r3, r3, #18
 8001668:	220f      	movs	r2, #15
 800166a:	4013      	ands	r3, r2
 800166c:	2214      	movs	r2, #20
 800166e:	18ba      	adds	r2, r7, r2
 8001670:	5cd3      	ldrb	r3, [r2, r3]
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	220f      	movs	r2, #15
 800167a:	4013      	ands	r3, r2
 800167c:	1d3a      	adds	r2, r7, #4
 800167e:	5cd3      	ldrb	r3, [r2, r3]
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	025b      	lsls	r3, r3, #9
 8001688:	4013      	ands	r3, r2
 800168a:	d009      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800168c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800168e:	4812      	ldr	r0, [pc, #72]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001690:	f7fe fd3a 	bl	8000108 <__udivsi3>
 8001694:	0003      	movs	r3, r0
 8001696:	001a      	movs	r2, r3
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	4353      	muls	r3, r2
 800169c:	637b      	str	r3, [r7, #52]	; 0x34
 800169e:	e009      	b.n	80016b4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80016a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016a2:	000a      	movs	r2, r1
 80016a4:	0152      	lsls	r2, r2, #5
 80016a6:	1a52      	subs	r2, r2, r1
 80016a8:	0193      	lsls	r3, r2, #6
 80016aa:	1a9b      	subs	r3, r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	185b      	adds	r3, r3, r1
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80016b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016b8:	e002      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80016c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80016c2:	0018      	movs	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b00f      	add	sp, #60	; 0x3c
 80016c8:	bd90      	pop	{r4, r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	08003e4c 	.word	0x08003e4c
 80016d0:	08003e5c 	.word	0x08003e5c
 80016d4:	40021000 	.word	0x40021000
 80016d8:	007a1200 	.word	0x007a1200

080016dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016e0:	4b02      	ldr	r3, [pc, #8]	; (80016ec <HAL_RCC_GetHCLKFreq+0x10>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	20000000 	.word	0x20000000

080016f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e1b1      	b.n	8001a66 <HAL_SPI_Init+0x376>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4ab2      	ldr	r2, [pc, #712]	; (80019d0 <HAL_SPI_Init+0x2e0>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d00b      	beq.n	8001724 <HAL_SPI_Init+0x34>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4ab0      	ldr	r2, [pc, #704]	; (80019d4 <HAL_SPI_Init+0x2e4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d006      	beq.n	8001724 <HAL_SPI_Init+0x34>
 8001716:	2392      	movs	r3, #146	; 0x92
 8001718:	005a      	lsls	r2, r3, #1
 800171a:	4baf      	ldr	r3, [pc, #700]	; (80019d8 <HAL_SPI_Init+0x2e8>)
 800171c:	0011      	movs	r1, r2
 800171e:	0018      	movs	r0, r3
 8001720:	f002 f971 	bl	8003a06 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00d      	beq.n	8001748 <HAL_SPI_Init+0x58>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	2382      	movs	r3, #130	; 0x82
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	429a      	cmp	r2, r3
 8001736:	d007      	beq.n	8001748 <HAL_SPI_Init+0x58>
 8001738:	2326      	movs	r3, #38	; 0x26
 800173a:	33ff      	adds	r3, #255	; 0xff
 800173c:	001a      	movs	r2, r3
 800173e:	4ba6      	ldr	r3, [pc, #664]	; (80019d8 <HAL_SPI_Init+0x2e8>)
 8001740:	0011      	movs	r1, r2
 8001742:	0018      	movs	r0, r3
 8001744:	f002 f95f 	bl	8003a06 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d012      	beq.n	8001776 <HAL_SPI_Init+0x86>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	429a      	cmp	r2, r3
 800175a:	d00c      	beq.n	8001776 <HAL_SPI_Init+0x86>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	429a      	cmp	r2, r3
 8001766:	d006      	beq.n	8001776 <HAL_SPI_Init+0x86>
 8001768:	2393      	movs	r3, #147	; 0x93
 800176a:	005a      	lsls	r2, r3, #1
 800176c:	4b9a      	ldr	r3, [pc, #616]	; (80019d8 <HAL_SPI_Init+0x2e8>)
 800176e:	0011      	movs	r1, r2
 8001770:	0018      	movs	r0, r3
 8001772:	f002 f948 	bl	8003a06 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	23f0      	movs	r3, #240	; 0xf0
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	429a      	cmp	r2, r3
 8001780:	d04f      	beq.n	8001822 <HAL_SPI_Init+0x132>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	23e0      	movs	r3, #224	; 0xe0
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	429a      	cmp	r2, r3
 800178c:	d049      	beq.n	8001822 <HAL_SPI_Init+0x132>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	23d0      	movs	r3, #208	; 0xd0
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	429a      	cmp	r2, r3
 8001798:	d043      	beq.n	8001822 <HAL_SPI_Init+0x132>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	23c0      	movs	r3, #192	; 0xc0
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d03d      	beq.n	8001822 <HAL_SPI_Init+0x132>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	23b0      	movs	r3, #176	; 0xb0
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d037      	beq.n	8001822 <HAL_SPI_Init+0x132>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	23a0      	movs	r3, #160	; 0xa0
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d031      	beq.n	8001822 <HAL_SPI_Init+0x132>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	2390      	movs	r3, #144	; 0x90
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d02b      	beq.n	8001822 <HAL_SPI_Init+0x132>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d025      	beq.n	8001822 <HAL_SPI_Init+0x132>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	23e0      	movs	r3, #224	; 0xe0
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	429a      	cmp	r2, r3
 80017e0:	d01f      	beq.n	8001822 <HAL_SPI_Init+0x132>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	23c0      	movs	r3, #192	; 0xc0
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d019      	beq.n	8001822 <HAL_SPI_Init+0x132>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	23a0      	movs	r3, #160	; 0xa0
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d013      	beq.n	8001822 <HAL_SPI_Init+0x132>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	429a      	cmp	r2, r3
 8001804:	d00d      	beq.n	8001822 <HAL_SPI_Init+0x132>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	23c0      	movs	r3, #192	; 0xc0
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	429a      	cmp	r2, r3
 8001810:	d007      	beq.n	8001822 <HAL_SPI_Init+0x132>
 8001812:	2328      	movs	r3, #40	; 0x28
 8001814:	33ff      	adds	r3, #255	; 0xff
 8001816:	001a      	movs	r2, r3
 8001818:	4b6f      	ldr	r3, [pc, #444]	; (80019d8 <HAL_SPI_Init+0x2e8>)
 800181a:	0011      	movs	r1, r2
 800181c:	0018      	movs	r0, r3
 800181e:	f002 f8f2 	bl	8003a06 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699a      	ldr	r2, [r3, #24]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	429a      	cmp	r2, r3
 800182c:	d010      	beq.n	8001850 <HAL_SPI_Init+0x160>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00c      	beq.n	8001850 <HAL_SPI_Init+0x160>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699a      	ldr	r2, [r3, #24]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	02db      	lsls	r3, r3, #11
 800183e:	429a      	cmp	r2, r3
 8001840:	d006      	beq.n	8001850 <HAL_SPI_Init+0x160>
 8001842:	2394      	movs	r3, #148	; 0x94
 8001844:	005a      	lsls	r2, r3, #1
 8001846:	4b64      	ldr	r3, [pc, #400]	; (80019d8 <HAL_SPI_Init+0x2e8>)
 8001848:	0011      	movs	r1, r2
 800184a:	0018      	movs	r0, r3
 800184c:	f002 f8db 	bl	8003a06 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001854:	2b08      	cmp	r3, #8
 8001856:	d00b      	beq.n	8001870 <HAL_SPI_Init+0x180>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185c:	2b00      	cmp	r3, #0
 800185e:	d007      	beq.n	8001870 <HAL_SPI_Init+0x180>
 8001860:	232a      	movs	r3, #42	; 0x2a
 8001862:	33ff      	adds	r3, #255	; 0xff
 8001864:	001a      	movs	r2, r3
 8001866:	4b5c      	ldr	r3, [pc, #368]	; (80019d8 <HAL_SPI_Init+0x2e8>)
 8001868:	0011      	movs	r1, r2
 800186a:	0018      	movs	r0, r3
 800186c:	f002 f8cb 	bl	8003a06 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d022      	beq.n	80018be <HAL_SPI_Init+0x1ce>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	2b08      	cmp	r3, #8
 800187e:	d01e      	beq.n	80018be <HAL_SPI_Init+0x1ce>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	2b10      	cmp	r3, #16
 8001886:	d01a      	beq.n	80018be <HAL_SPI_Init+0x1ce>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	2b18      	cmp	r3, #24
 800188e:	d016      	beq.n	80018be <HAL_SPI_Init+0x1ce>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	2b20      	cmp	r3, #32
 8001896:	d012      	beq.n	80018be <HAL_SPI_Init+0x1ce>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2b28      	cmp	r3, #40	; 0x28
 800189e:	d00e      	beq.n	80018be <HAL_SPI_Init+0x1ce>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	2b30      	cmp	r3, #48	; 0x30
 80018a6:	d00a      	beq.n	80018be <HAL_SPI_Init+0x1ce>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	2b38      	cmp	r3, #56	; 0x38
 80018ae:	d006      	beq.n	80018be <HAL_SPI_Init+0x1ce>
 80018b0:	2395      	movs	r3, #149	; 0x95
 80018b2:	005a      	lsls	r2, r3, #1
 80018b4:	4b48      	ldr	r3, [pc, #288]	; (80019d8 <HAL_SPI_Init+0x2e8>)
 80018b6:	0011      	movs	r1, r2
 80018b8:	0018      	movs	r0, r3
 80018ba:	f002 f8a4 	bl	8003a06 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <HAL_SPI_Init+0x1ee>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	2b80      	cmp	r3, #128	; 0x80
 80018cc:	d007      	beq.n	80018de <HAL_SPI_Init+0x1ee>
 80018ce:	232c      	movs	r3, #44	; 0x2c
 80018d0:	33ff      	adds	r3, #255	; 0xff
 80018d2:	001a      	movs	r2, r3
 80018d4:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <HAL_SPI_Init+0x2e8>)
 80018d6:	0011      	movs	r1, r2
 80018d8:	0018      	movs	r0, r3
 80018da:	f002 f894 	bl	8003a06 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00a      	beq.n	80018fc <HAL_SPI_Init+0x20c>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d006      	beq.n	80018fc <HAL_SPI_Init+0x20c>
 80018ee:	2396      	movs	r3, #150	; 0x96
 80018f0:	005a      	lsls	r2, r3, #1
 80018f2:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <HAL_SPI_Init+0x2e8>)
 80018f4:	0011      	movs	r1, r2
 80018f6:	0018      	movs	r0, r3
 80018f8:	f002 f885 	bl	8003a06 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	2b00      	cmp	r3, #0
 8001902:	d11e      	bne.n	8001942 <HAL_SPI_Init+0x252>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00b      	beq.n	8001924 <HAL_SPI_Init+0x234>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d007      	beq.n	8001924 <HAL_SPI_Init+0x234>
 8001914:	2330      	movs	r3, #48	; 0x30
 8001916:	33ff      	adds	r3, #255	; 0xff
 8001918:	001a      	movs	r2, r3
 800191a:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <HAL_SPI_Init+0x2e8>)
 800191c:	0011      	movs	r1, r2
 800191e:	0018      	movs	r0, r3
 8001920:	f002 f871 	bl	8003a06 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00a      	beq.n	8001942 <HAL_SPI_Init+0x252>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d006      	beq.n	8001942 <HAL_SPI_Init+0x252>
 8001934:	2398      	movs	r3, #152	; 0x98
 8001936:	005a      	lsls	r2, r3, #1
 8001938:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <HAL_SPI_Init+0x2e8>)
 800193a:	0011      	movs	r1, r2
 800193c:	0018      	movs	r0, r3
 800193e:	f002 f862 	bl	8003a06 <assert_failed>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	225d      	movs	r2, #93	; 0x5d
 800194c:	5c9b      	ldrb	r3, [r3, r2]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d107      	bne.n	8001964 <HAL_SPI_Init+0x274>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	225c      	movs	r2, #92	; 0x5c
 8001958:	2100      	movs	r1, #0
 800195a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	0018      	movs	r0, r3
 8001960:	f002 f898 	bl	8003a94 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	225d      	movs	r2, #93	; 0x5d
 8001968:	2102      	movs	r1, #2
 800196a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2140      	movs	r1, #64	; 0x40
 8001978:	438a      	bics	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	23e0      	movs	r3, #224	; 0xe0
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	429a      	cmp	r2, r3
 8001986:	d902      	bls.n	800198e <HAL_SPI_Init+0x29e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e002      	b.n	8001994 <HAL_SPI_Init+0x2a4>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	015b      	lsls	r3, r3, #5
 8001992:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	23f0      	movs	r3, #240	; 0xf0
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	429a      	cmp	r2, r3
 800199e:	d008      	beq.n	80019b2 <HAL_SPI_Init+0x2c2>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	23e0      	movs	r3, #224	; 0xe0
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d002      	beq.n	80019b2 <HAL_SPI_Init+0x2c2>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d113      	bne.n	80019e2 <HAL_SPI_Init+0x2f2>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68da      	ldr	r2, [r3, #12]
 80019be:	23e0      	movs	r3, #224	; 0xe0
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d90a      	bls.n	80019dc <HAL_SPI_Init+0x2ec>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2202      	movs	r2, #2
 80019ca:	631a      	str	r2, [r3, #48]	; 0x30
 80019cc:	e009      	b.n	80019e2 <HAL_SPI_Init+0x2f2>
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	40013000 	.word	0x40013000
 80019d4:	40003800 	.word	0x40003800
 80019d8:	08003e6c 	.word	0x08003e6c
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6999      	ldr	r1, [r3, #24]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	400b      	ands	r3, r1
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	0011      	movs	r1, r2
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	0c1b      	lsrs	r3, r3, #16
 8001a24:	2204      	movs	r2, #4
 8001a26:	401a      	ands	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	0011      	movs	r1, r2
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	69da      	ldr	r2, [r3, #28]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4907      	ldr	r1, [pc, #28]	; (8001a70 <HAL_SPI_Init+0x380>)
 8001a52:	400a      	ands	r2, r1
 8001a54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	225d      	movs	r2, #93	; 0x5d
 8001a60:	2101      	movs	r1, #1
 8001a62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b004      	add	sp, #16
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	fffff7ff 	.word	0xfffff7ff

08001a74 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	1dbb      	adds	r3, r7, #6
 8001a82:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a88:	231f      	movs	r3, #31
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size > 1U))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	23e0      	movs	r3, #224	; 0xe0
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d803      	bhi.n	8001aa4 <HAL_SPI_Transmit+0x30>
 8001a9c:	1dbb      	adds	r3, r7, #6
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d909      	bls.n	8001ab8 <HAL_SPI_Transmit+0x44>
  {
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d005      	beq.n	8001ab8 <HAL_SPI_Transmit+0x44>
 8001aac:	4ab8      	ldr	r2, [pc, #736]	; (8001d90 <HAL_SPI_Transmit+0x31c>)
 8001aae:	4bb9      	ldr	r3, [pc, #740]	; (8001d94 <HAL_SPI_Transmit+0x320>)
 8001ab0:	0011      	movs	r1, r2
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f001 ffa7 	bl	8003a06 <assert_failed>
  }

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00b      	beq.n	8001ad8 <HAL_SPI_Transmit+0x64>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d005      	beq.n	8001ad8 <HAL_SPI_Transmit+0x64>
 8001acc:	4ab2      	ldr	r2, [pc, #712]	; (8001d98 <HAL_SPI_Transmit+0x324>)
 8001ace:	4bb1      	ldr	r3, [pc, #708]	; (8001d94 <HAL_SPI_Transmit+0x320>)
 8001ad0:	0011      	movs	r1, r2
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f001 ff97 	bl	8003a06 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	225c      	movs	r2, #92	; 0x5c
 8001adc:	5c9b      	ldrb	r3, [r3, r2]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_SPI_Transmit+0x72>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e14f      	b.n	8001d86 <HAL_SPI_Transmit+0x312>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	225c      	movs	r2, #92	; 0x5c
 8001aea:	2101      	movs	r1, #1
 8001aec:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001aee:	f7fe fbd3 	bl	8000298 <HAL_GetTick>
 8001af2:	0003      	movs	r3, r0
 8001af4:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	225d      	movs	r2, #93	; 0x5d
 8001afa:	5c9b      	ldrb	r3, [r3, r2]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d004      	beq.n	8001b0c <HAL_SPI_Transmit+0x98>
  {
    errorcode = HAL_BUSY;
 8001b02:	231f      	movs	r3, #31
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	2202      	movs	r2, #2
 8001b08:	701a      	strb	r2, [r3, #0]
    goto error;
 8001b0a:	e131      	b.n	8001d70 <HAL_SPI_Transmit+0x2fc>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_SPI_Transmit+0xa6>
 8001b12:	1dbb      	adds	r3, r7, #6
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d104      	bne.n	8001b24 <HAL_SPI_Transmit+0xb0>
  {
    errorcode = HAL_ERROR;
 8001b1a:	231f      	movs	r3, #31
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
    goto error;
 8001b22:	e125      	b.n	8001d70 <HAL_SPI_Transmit+0x2fc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	225d      	movs	r2, #93	; 0x5d
 8001b28:	2103      	movs	r1, #3
 8001b2a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1dba      	adds	r2, r7, #6
 8001b3c:	8812      	ldrh	r2, [r2, #0]
 8001b3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1dba      	adds	r2, r7, #6
 8001b44:	8812      	ldrh	r2, [r2, #0]
 8001b46:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2244      	movs	r2, #68	; 0x44
 8001b52:	2100      	movs	r1, #0
 8001b54:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2246      	movs	r2, #70	; 0x46
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	021b      	lsls	r3, r3, #8
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d108      	bne.n	8001b88 <HAL_SPI_Transmit+0x114>
  {
    SPI_1LINE_TX(hspi);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2180      	movs	r1, #128	; 0x80
 8001b82:	01c9      	lsls	r1, r1, #7
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2240      	movs	r2, #64	; 0x40
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b40      	cmp	r3, #64	; 0x40
 8001b94:	d007      	beq.n	8001ba6 <HAL_SPI_Transmit+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2140      	movs	r1, #64	; 0x40
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	23e0      	movs	r3, #224	; 0xe0
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d948      	bls.n	8001c44 <HAL_SPI_Transmit+0x1d0>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d004      	beq.n	8001bc4 <HAL_SPI_Transmit+0x150>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d139      	bne.n	8001c38 <HAL_SPI_Transmit+0x1c4>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	881a      	ldrh	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001be2:	e029      	b.n	8001c38 <HAL_SPI_Transmit+0x1c4>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2202      	movs	r2, #2
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d10f      	bne.n	8001c12 <HAL_SPI_Transmit+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	881a      	ldrh	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	3302      	adds	r3, #2
 8001c00:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c10:	e012      	b.n	8001c38 <HAL_SPI_Transmit+0x1c4>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00a      	beq.n	8001c2e <HAL_SPI_Transmit+0x1ba>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	d00c      	beq.n	8001c38 <HAL_SPI_Transmit+0x1c4>
 8001c1e:	f7fe fb3b 	bl	8000298 <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d804      	bhi.n	8001c38 <HAL_SPI_Transmit+0x1c4>
        {
          errorcode = HAL_TIMEOUT;
 8001c2e:	231f      	movs	r3, #31
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	2203      	movs	r2, #3
 8001c34:	701a      	strb	r2, [r3, #0]
          goto error;
 8001c36:	e09b      	b.n	8001d70 <HAL_SPI_Transmit+0x2fc>
    while (hspi->TxXferCount > 0U)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1d0      	bne.n	8001be4 <HAL_SPI_Transmit+0x170>
 8001c42:	e071      	b.n	8001d28 <HAL_SPI_Transmit+0x2b4>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d004      	beq.n	8001c56 <HAL_SPI_Transmit+0x1e2>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d163      	bne.n	8001d1e <HAL_SPI_Transmit+0x2aa>
    {
      if (hspi->TxXferCount > 1U)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d90f      	bls.n	8001c80 <HAL_SPI_Transmit+0x20c>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	881a      	ldrh	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b02      	subs	r3, #2
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c7e:	e04e      	b.n	8001d1e <HAL_SPI_Transmit+0x2aa>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	60ba      	str	r2, [r7, #8]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	320c      	adds	r2, #12
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3b01      	subs	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001c9e:	e03e      	b.n	8001d1e <HAL_SPI_Transmit+0x2aa>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d124      	bne.n	8001cf8 <HAL_SPI_Transmit+0x284>
      {
        if (hspi->TxXferCount > 1U)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d90f      	bls.n	8001cd8 <HAL_SPI_Transmit+0x264>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	881a      	ldrh	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3b02      	subs	r3, #2
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cd6:	e022      	b.n	8001d1e <HAL_SPI_Transmit+0x2aa>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	60ba      	str	r2, [r7, #8]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	320c      	adds	r2, #12
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cf6:	e012      	b.n	8001d1e <HAL_SPI_Transmit+0x2aa>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00a      	beq.n	8001d14 <HAL_SPI_Transmit+0x2a0>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	3301      	adds	r3, #1
 8001d02:	d00c      	beq.n	8001d1e <HAL_SPI_Transmit+0x2aa>
 8001d04:	f7fe fac8 	bl	8000298 <HAL_GetTick>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d804      	bhi.n	8001d1e <HAL_SPI_Transmit+0x2aa>
        {
          errorcode = HAL_TIMEOUT;
 8001d14:	231f      	movs	r3, #31
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	2203      	movs	r2, #3
 8001d1a:	701a      	strb	r2, [r3, #0]
          goto error;
 8001d1c:	e028      	b.n	8001d70 <HAL_SPI_Transmit+0x2fc>
    while (hspi->TxXferCount > 0U)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1bb      	bne.n	8001ca0 <HAL_SPI_Transmit+0x22c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	6839      	ldr	r1, [r7, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f000 fd20 	bl	8002774 <SPI_EndRxTxTransaction>
 8001d34:	1e03      	subs	r3, r0, #0
 8001d36:	d002      	beq.n	8001d3e <HAL_SPI_Transmit+0x2ca>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10a      	bne.n	8001d5c <HAL_SPI_Transmit+0x2e8>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d004      	beq.n	8001d6e <HAL_SPI_Transmit+0x2fa>
  {
    errorcode = HAL_ERROR;
 8001d64:	231f      	movs	r3, #31
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	e000      	b.n	8001d70 <HAL_SPI_Transmit+0x2fc>
  }

error:
 8001d6e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	225d      	movs	r2, #93	; 0x5d
 8001d74:	2101      	movs	r1, #1
 8001d76:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	225c      	movs	r2, #92	; 0x5c
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001d80:	231f      	movs	r3, #31
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	781b      	ldrb	r3, [r3, #0]
}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b008      	add	sp, #32
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	00000209 	.word	0x00000209
 8001d94:	08003e6c 	.word	0x08003e6c
 8001d98:	0000020d 	.word	0x0000020d

08001d9c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	1dbb      	adds	r3, r7, #6
 8001daa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001db0:	2317      	movs	r3, #23
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size > 1U))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	23e0      	movs	r3, #224	; 0xe0
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d803      	bhi.n	8001dcc <HAL_SPI_Receive+0x30>
 8001dc4:	1dbb      	adds	r3, r7, #6
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d909      	bls.n	8001de0 <HAL_SPI_Receive+0x44>
  {
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d005      	beq.n	8001de0 <HAL_SPI_Receive+0x44>
 8001dd4:	4a98      	ldr	r2, [pc, #608]	; (8002038 <HAL_SPI_Receive+0x29c>)
 8001dd6:	4b99      	ldr	r3, [pc, #612]	; (800203c <HAL_SPI_Receive+0x2a0>)
 8001dd8:	0011      	movs	r1, r2
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f001 fe13 	bl	8003a06 <assert_failed>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	2382      	movs	r3, #130	; 0x82
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d113      	bne.n	8001e14 <HAL_SPI_Receive+0x78>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10f      	bne.n	8001e14 <HAL_SPI_Receive+0x78>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	225d      	movs	r2, #93	; 0x5d
 8001df8:	2104      	movs	r1, #4
 8001dfa:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001dfc:	1dbb      	adds	r3, r7, #6
 8001dfe:	881c      	ldrh	r4, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	0023      	movs	r3, r4
 8001e0c:	f000 f91c 	bl	8002048 <HAL_SPI_TransmitReceive>
 8001e10:	0003      	movs	r3, r0
 8001e12:	e10c      	b.n	800202e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	225c      	movs	r2, #92	; 0x5c
 8001e18:	5c9b      	ldrb	r3, [r3, r2]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_SPI_Receive+0x86>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e105      	b.n	800202e <HAL_SPI_Receive+0x292>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	225c      	movs	r2, #92	; 0x5c
 8001e26:	2101      	movs	r1, #1
 8001e28:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e2a:	f7fe fa35 	bl	8000298 <HAL_GetTick>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	225d      	movs	r2, #93	; 0x5d
 8001e36:	5c9b      	ldrb	r3, [r3, r2]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d004      	beq.n	8001e48 <HAL_SPI_Receive+0xac>
  {
    errorcode = HAL_BUSY;
 8001e3e:	2317      	movs	r3, #23
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	2202      	movs	r2, #2
 8001e44:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e46:	e0e7      	b.n	8002018 <HAL_SPI_Receive+0x27c>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_SPI_Receive+0xba>
 8001e4e:	1dbb      	adds	r3, r7, #6
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d104      	bne.n	8001e60 <HAL_SPI_Receive+0xc4>
  {
    errorcode = HAL_ERROR;
 8001e56:	2317      	movs	r3, #23
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e5e:	e0db      	b.n	8002018 <HAL_SPI_Receive+0x27c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	225d      	movs	r2, #93	; 0x5d
 8001e64:	2104      	movs	r1, #4
 8001e66:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1dba      	adds	r2, r7, #6
 8001e78:	2144      	movs	r1, #68	; 0x44
 8001e7a:	8812      	ldrh	r2, [r2, #0]
 8001e7c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1dba      	adds	r2, r7, #6
 8001e82:	2146      	movs	r1, #70	; 0x46
 8001e84:	8812      	ldrh	r2, [r2, #0]
 8001e86:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx FiFo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	23e0      	movs	r3, #224	; 0xe0
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d908      	bls.n	8001ec4 <HAL_SPI_Receive+0x128>
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4960      	ldr	r1, [pc, #384]	; (8002040 <HAL_SPI_Receive+0x2a4>)
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	e008      	b.n	8001ed6 <HAL_SPI_Receive+0x13a>
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2180      	movs	r1, #128	; 0x80
 8001ed0:	0149      	lsls	r1, r1, #5
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d107      	bne.n	8001ef2 <HAL_SPI_Receive+0x156>
  {
    SPI_1LINE_RX(hspi);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4955      	ldr	r1, [pc, #340]	; (8002044 <HAL_SPI_Receive+0x2a8>)
 8001eee:	400a      	ands	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2240      	movs	r2, #64	; 0x40
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b40      	cmp	r3, #64	; 0x40
 8001efe:	d007      	beq.n	8001f10 <HAL_SPI_Receive+0x174>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2140      	movs	r1, #64	; 0x40
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	23e0      	movs	r3, #224	; 0xe0
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d862      	bhi.n	8001fe2 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001f1c:	e02d      	b.n	8001f7a <HAL_SPI_Receive+0x1de>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d113      	bne.n	8001f54 <HAL_SPI_Receive+0x1b8>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	330c      	adds	r3, #12
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2246      	movs	r2, #70	; 0x46
 8001f44:	5a9b      	ldrh	r3, [r3, r2]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b299      	uxth	r1, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2246      	movs	r2, #70	; 0x46
 8001f50:	5299      	strh	r1, [r3, r2]
 8001f52:	e012      	b.n	8001f7a <HAL_SPI_Receive+0x1de>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <HAL_SPI_Receive+0x1d4>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	d00c      	beq.n	8001f7a <HAL_SPI_Receive+0x1de>
 8001f60:	f7fe f99a 	bl	8000298 <HAL_GetTick>
 8001f64:	0002      	movs	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d804      	bhi.n	8001f7a <HAL_SPI_Receive+0x1de>
        {
          errorcode = HAL_TIMEOUT;
 8001f70:	2317      	movs	r3, #23
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	2203      	movs	r2, #3
 8001f76:	701a      	strb	r2, [r3, #0]
          goto error;
 8001f78:	e04e      	b.n	8002018 <HAL_SPI_Receive+0x27c>
    while (hspi->RxXferCount > 0U)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2246      	movs	r2, #70	; 0x46
 8001f7e:	5a9b      	ldrh	r3, [r3, r2]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1cb      	bne.n	8001f1e <HAL_SPI_Receive+0x182>
 8001f86:	e032      	b.n	8001fee <HAL_SPI_Receive+0x252>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d112      	bne.n	8001fbc <HAL_SPI_Receive+0x220>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2246      	movs	r2, #70	; 0x46
 8001fac:	5a9b      	ldrh	r3, [r3, r2]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b299      	uxth	r1, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2246      	movs	r2, #70	; 0x46
 8001fb8:	5299      	strh	r1, [r3, r2]
 8001fba:	e012      	b.n	8001fe2 <HAL_SPI_Receive+0x246>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_SPI_Receive+0x23c>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	d00c      	beq.n	8001fe2 <HAL_SPI_Receive+0x246>
 8001fc8:	f7fe f966 	bl	8000298 <HAL_GetTick>
 8001fcc:	0002      	movs	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d804      	bhi.n	8001fe2 <HAL_SPI_Receive+0x246>
        {
          errorcode = HAL_TIMEOUT;
 8001fd8:	2317      	movs	r3, #23
 8001fda:	18fb      	adds	r3, r7, r3
 8001fdc:	2203      	movs	r2, #3
 8001fde:	701a      	strb	r2, [r3, #0]
          goto error;
 8001fe0:	e01a      	b.n	8002018 <HAL_SPI_Receive+0x27c>
    while (hspi->RxXferCount > 0U)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2246      	movs	r2, #70	; 0x46
 8001fe6:	5a9b      	ldrh	r3, [r3, r2]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1cc      	bne.n	8001f88 <HAL_SPI_Receive+0x1ec>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	6839      	ldr	r1, [r7, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f000 fb5f 	bl	80026b8 <SPI_EndRxTransaction>
 8001ffa:	1e03      	subs	r3, r0, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_SPI_Receive+0x268>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002008:	2b00      	cmp	r3, #0
 800200a:	d004      	beq.n	8002016 <HAL_SPI_Receive+0x27a>
  {
    errorcode = HAL_ERROR;
 800200c:	2317      	movs	r3, #23
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
 8002014:	e000      	b.n	8002018 <HAL_SPI_Receive+0x27c>
  }

error :
 8002016:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	225d      	movs	r2, #93	; 0x5d
 800201c:	2101      	movs	r1, #1
 800201e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	225c      	movs	r2, #92	; 0x5c
 8002024:	2100      	movs	r1, #0
 8002026:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002028:	2317      	movs	r3, #23
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	781b      	ldrb	r3, [r3, #0]
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b007      	add	sp, #28
 8002034:	bd90      	pop	{r4, r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	000002c6 	.word	0x000002c6
 800203c:	08003e6c 	.word	0x08003e6c
 8002040:	ffffefff 	.word	0xffffefff
 8002044:	ffffbfff 	.word	0xffffbfff

08002048 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	001a      	movs	r2, r3
 8002056:	1cbb      	adds	r3, r7, #2
 8002058:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0U, tmp1 = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8002066:	2301      	movs	r3, #1
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 800206a:	2323      	movs	r3, #35	; 0x23
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size > 1U))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	23e0      	movs	r3, #224	; 0xe0
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	429a      	cmp	r2, r3
 800207c:	d803      	bhi.n	8002086 <HAL_SPI_TransmitReceive+0x3e>
 800207e:	1cbb      	adds	r3, r7, #2
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d914      	bls.n	80020b0 <HAL_SPI_TransmitReceive+0x68>
  {
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pTxData));
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2201      	movs	r2, #1
 800208a:	4013      	ands	r3, r2
 800208c:	d006      	beq.n	800209c <HAL_SPI_TransmitReceive+0x54>
 800208e:	23ee      	movs	r3, #238	; 0xee
 8002090:	009a      	lsls	r2, r3, #2
 8002092:	4bbd      	ldr	r3, [pc, #756]	; (8002388 <HAL_SPI_TransmitReceive+0x340>)
 8002094:	0011      	movs	r1, r2
 8002096:	0018      	movs	r0, r3
 8002098:	f001 fcb5 	bl	8003a06 <assert_failed>
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pRxData));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	4013      	ands	r3, r2
 80020a2:	d005      	beq.n	80020b0 <HAL_SPI_TransmitReceive+0x68>
 80020a4:	4ab9      	ldr	r2, [pc, #740]	; (800238c <HAL_SPI_TransmitReceive+0x344>)
 80020a6:	4bb8      	ldr	r3, [pc, #736]	; (8002388 <HAL_SPI_TransmitReceive+0x340>)
 80020a8:	0011      	movs	r1, r2
 80020aa:	0018      	movs	r0, r3
 80020ac:	f001 fcab 	bl	8003a06 <assert_failed>
  }

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_SPI_TransmitReceive+0x7c>
 80020b8:	4ab5      	ldr	r2, [pc, #724]	; (8002390 <HAL_SPI_TransmitReceive+0x348>)
 80020ba:	4bb3      	ldr	r3, [pc, #716]	; (8002388 <HAL_SPI_TransmitReceive+0x340>)
 80020bc:	0011      	movs	r1, r2
 80020be:	0018      	movs	r0, r3
 80020c0:	f001 fca1 	bl	8003a06 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	225c      	movs	r2, #92	; 0x5c
 80020c8:	5c9b      	ldrb	r3, [r3, r2]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_SPI_TransmitReceive+0x8a>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e1fa      	b.n	80024c8 <HAL_SPI_TransmitReceive+0x480>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	225c      	movs	r2, #92	; 0x5c
 80020d6:	2101      	movs	r1, #1
 80020d8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020da:	f7fe f8dd 	bl	8000298 <HAL_GetTick>
 80020de:	0003      	movs	r3, r0
 80020e0:	617b      	str	r3, [r7, #20]

  tmp  = hspi->State;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	225d      	movs	r2, #93	; 0x5d
 80020e6:	5c9b      	ldrb	r3, [r3, r2]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d010      	beq.n	800211a <HAL_SPI_TransmitReceive+0xd2>
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	2382      	movs	r3, #130	; 0x82
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	429a      	cmp	r2, r3
 8002100:	d106      	bne.n	8002110 <HAL_SPI_TransmitReceive+0xc8>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d102      	bne.n	8002110 <HAL_SPI_TransmitReceive+0xc8>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	2b04      	cmp	r3, #4
 800210e:	d004      	beq.n	800211a <HAL_SPI_TransmitReceive+0xd2>
  {
    errorcode = HAL_BUSY;
 8002110:	2323      	movs	r3, #35	; 0x23
 8002112:	18fb      	adds	r3, r7, r3
 8002114:	2202      	movs	r2, #2
 8002116:	701a      	strb	r2, [r3, #0]
    goto error;
 8002118:	e1cb      	b.n	80024b2 <HAL_SPI_TransmitReceive+0x46a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d006      	beq.n	800212e <HAL_SPI_TransmitReceive+0xe6>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_SPI_TransmitReceive+0xe6>
 8002126:	1cbb      	adds	r3, r7, #2
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d104      	bne.n	8002138 <HAL_SPI_TransmitReceive+0xf0>
  {
    errorcode = HAL_ERROR;
 800212e:	2323      	movs	r3, #35	; 0x23
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
    goto error;
 8002136:	e1bc      	b.n	80024b2 <HAL_SPI_TransmitReceive+0x46a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	225d      	movs	r2, #93	; 0x5d
 800213c:	5c9b      	ldrb	r3, [r3, r2]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b04      	cmp	r3, #4
 8002142:	d003      	beq.n	800214c <HAL_SPI_TransmitReceive+0x104>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	225d      	movs	r2, #93	; 0x5d
 8002148:	2105      	movs	r1, #5
 800214a:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1cba      	adds	r2, r7, #2
 800215c:	2146      	movs	r1, #70	; 0x46
 800215e:	8812      	ldrh	r2, [r2, #0]
 8002160:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1cba      	adds	r2, r7, #2
 8002166:	2144      	movs	r1, #68	; 0x44
 8002168:	8812      	ldrh	r2, [r2, #0]
 800216a:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1cba      	adds	r2, r7, #2
 8002176:	8812      	ldrh	r2, [r2, #0]
 8002178:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1cba      	adds	r2, r7, #2
 800217e:	8812      	ldrh	r2, [r2, #0]
 8002180:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	23e0      	movs	r3, #224	; 0xe0
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	429a      	cmp	r2, r3
 8002198:	d805      	bhi.n	80021a6 <HAL_SPI_TransmitReceive+0x15e>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2246      	movs	r2, #70	; 0x46
 800219e:	5a9b      	ldrh	r3, [r3, r2]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d908      	bls.n	80021b8 <HAL_SPI_TransmitReceive+0x170>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4978      	ldr	r1, [pc, #480]	; (8002394 <HAL_SPI_TransmitReceive+0x34c>)
 80021b2:	400a      	ands	r2, r1
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	e008      	b.n	80021ca <HAL_SPI_TransmitReceive+0x182>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2180      	movs	r1, #128	; 0x80
 80021c4:	0149      	lsls	r1, r1, #5
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2240      	movs	r2, #64	; 0x40
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b40      	cmp	r3, #64	; 0x40
 80021d6:	d007      	beq.n	80021e8 <HAL_SPI_TransmitReceive+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2140      	movs	r1, #64	; 0x40
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	23e0      	movs	r3, #224	; 0xe0
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d800      	bhi.n	80021f6 <HAL_SPI_TransmitReceive+0x1ae>
 80021f4:	e075      	b.n	80022e2 <HAL_SPI_TransmitReceive+0x29a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <HAL_SPI_TransmitReceive+0x1c0>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002202:	b29b      	uxth	r3, r3
 8002204:	2b01      	cmp	r3, #1
 8002206:	d160      	bne.n	80022ca <HAL_SPI_TransmitReceive+0x282>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	881a      	ldrh	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	3302      	adds	r3, #2
 8002216:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800221c:	b29b      	uxth	r3, r3
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002226:	e050      	b.n	80022ca <HAL_SPI_TransmitReceive+0x282>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	2b00      	cmp	r3, #0
 800222c:	d01c      	beq.n	8002268 <HAL_SPI_TransmitReceive+0x220>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002232:	b29b      	uxth	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d017      	beq.n	8002268 <HAL_SPI_TransmitReceive+0x220>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2202      	movs	r2, #2
 8002240:	4013      	ands	r3, r2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d110      	bne.n	8002268 <HAL_SPI_TransmitReceive+0x220>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	881a      	ldrh	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	3302      	adds	r3, #2
 8002254:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2246      	movs	r2, #70	; 0x46
 800226c:	5a9b      	ldrh	r3, [r3, r2]
 800226e:	b29b      	uxth	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01a      	beq.n	80022aa <HAL_SPI_TransmitReceive+0x262>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2201      	movs	r2, #1
 800227c:	4013      	ands	r3, r2
 800227e:	2b01      	cmp	r3, #1
 8002280:	d113      	bne.n	80022aa <HAL_SPI_TransmitReceive+0x262>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	b29a      	uxth	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3302      	adds	r3, #2
 8002292:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2246      	movs	r2, #70	; 0x46
 8002298:	5a9b      	ldrh	r3, [r3, r2]
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b299      	uxth	r1, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2246      	movs	r2, #70	; 0x46
 80022a4:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022a6:	2301      	movs	r3, #1
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80022aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ac:	3301      	adds	r3, #1
 80022ae:	d00c      	beq.n	80022ca <HAL_SPI_TransmitReceive+0x282>
 80022b0:	f7fd fff2 	bl	8000298 <HAL_GetTick>
 80022b4:	0002      	movs	r2, r0
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022bc:	429a      	cmp	r2, r3
 80022be:	d804      	bhi.n	80022ca <HAL_SPI_TransmitReceive+0x282>
      {
        errorcode = HAL_TIMEOUT;
 80022c0:	2323      	movs	r3, #35	; 0x23
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	2203      	movs	r2, #3
 80022c6:	701a      	strb	r2, [r3, #0]
        goto error;
 80022c8:	e0f3      	b.n	80024b2 <HAL_SPI_TransmitReceive+0x46a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1a9      	bne.n	8002228 <HAL_SPI_TransmitReceive+0x1e0>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2246      	movs	r2, #70	; 0x46
 80022d8:	5a9b      	ldrh	r3, [r3, r2]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1a3      	bne.n	8002228 <HAL_SPI_TransmitReceive+0x1e0>
 80022e0:	e0d2      	b.n	8002488 <HAL_SPI_TransmitReceive+0x440>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <HAL_SPI_TransmitReceive+0x2ae>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d000      	beq.n	80022f6 <HAL_SPI_TransmitReceive+0x2ae>
 80022f4:	e0bb      	b.n	800246e <HAL_SPI_TransmitReceive+0x426>
    {
      if (hspi->TxXferCount > 1U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d90f      	bls.n	8002320 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	881a      	ldrh	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	3302      	adds	r3, #2
 800230e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b02      	subs	r3, #2
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800231e:	e0a6      	b.n	800246e <HAL_SPI_TransmitReceive+0x426>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	60ba      	str	r2, [r7, #8]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	320c      	adds	r2, #12
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002334:	b29b      	uxth	r3, r3
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800233e:	e096      	b.n	800246e <HAL_SPI_TransmitReceive+0x426>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	2b00      	cmp	r3, #0
 8002344:	d039      	beq.n	80023ba <HAL_SPI_TransmitReceive+0x372>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800234a:	b29b      	uxth	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d034      	beq.n	80023ba <HAL_SPI_TransmitReceive+0x372>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2202      	movs	r2, #2
 8002358:	4013      	ands	r3, r2
 800235a:	2b02      	cmp	r3, #2
 800235c:	d12d      	bne.n	80023ba <HAL_SPI_TransmitReceive+0x372>
      {
        if (hspi->TxXferCount > 1U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002362:	b29b      	uxth	r3, r3
 8002364:	2b01      	cmp	r3, #1
 8002366:	d917      	bls.n	8002398 <HAL_SPI_TransmitReceive+0x350>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	881a      	ldrh	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	3302      	adds	r3, #2
 8002376:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b02      	subs	r3, #2
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002386:	e016      	b.n	80023b6 <HAL_SPI_TransmitReceive+0x36e>
 8002388:	08003e6c 	.word	0x08003e6c
 800238c:	000003b9 	.word	0x000003b9
 8002390:	000003bd 	.word	0x000003bd
 8002394:	ffffefff 	.word	0xffffefff
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	60ba      	str	r2, [r7, #8]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	320c      	adds	r2, #12
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2246      	movs	r2, #70	; 0x46
 80023be:	5a9b      	ldrh	r3, [r3, r2]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d043      	beq.n	800244e <HAL_SPI_TransmitReceive+0x406>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2201      	movs	r2, #1
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d13c      	bne.n	800244e <HAL_SPI_TransmitReceive+0x406>
      {
        if (hspi->RxXferCount > 1U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2246      	movs	r2, #70	; 0x46
 80023d8:	5a9b      	ldrh	r3, [r3, r2]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d921      	bls.n	8002424 <HAL_SPI_TransmitReceive+0x3dc>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3302      	adds	r3, #2
 80023f0:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2246      	movs	r2, #70	; 0x46
 80023f6:	5a9b      	ldrh	r3, [r3, r2]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	3b02      	subs	r3, #2
 80023fc:	b299      	uxth	r1, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2246      	movs	r2, #70	; 0x46
 8002402:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2246      	movs	r2, #70	; 0x46
 8002408:	5a9b      	ldrh	r3, [r3, r2]
 800240a:	b29b      	uxth	r3, r3
 800240c:	2b01      	cmp	r3, #1
 800240e:	d81c      	bhi.n	800244a <HAL_SPI_TransmitReceive+0x402>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2180      	movs	r1, #128	; 0x80
 800241c:	0149      	lsls	r1, r1, #5
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	e012      	b.n	800244a <HAL_SPI_TransmitReceive+0x402>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	330c      	adds	r3, #12
 800242a:	001a      	movs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	1c59      	adds	r1, r3, #1
 8002430:	6079      	str	r1, [r7, #4]
 8002432:	7812      	ldrb	r2, [r2, #0]
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2246      	movs	r2, #70	; 0x46
 800243c:	5a9b      	ldrh	r3, [r3, r2]
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b299      	uxth	r1, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2246      	movs	r2, #70	; 0x46
 8002448:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800244a:	2301      	movs	r3, #1
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002450:	3301      	adds	r3, #1
 8002452:	d00c      	beq.n	800246e <HAL_SPI_TransmitReceive+0x426>
 8002454:	f7fd ff20 	bl	8000298 <HAL_GetTick>
 8002458:	0002      	movs	r2, r0
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002460:	429a      	cmp	r2, r3
 8002462:	d804      	bhi.n	800246e <HAL_SPI_TransmitReceive+0x426>
      {
        errorcode = HAL_TIMEOUT;
 8002464:	2323      	movs	r3, #35	; 0x23
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	2203      	movs	r2, #3
 800246a:	701a      	strb	r2, [r3, #0]
        goto error;
 800246c:	e021      	b.n	80024b2 <HAL_SPI_TransmitReceive+0x46a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d000      	beq.n	800247a <HAL_SPI_TransmitReceive+0x432>
 8002478:	e762      	b.n	8002340 <HAL_SPI_TransmitReceive+0x2f8>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2246      	movs	r2, #70	; 0x46
 800247e:	5a9b      	ldrh	r3, [r3, r2]
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d000      	beq.n	8002488 <HAL_SPI_TransmitReceive+0x440>
 8002486:	e75b      	b.n	8002340 <HAL_SPI_TransmitReceive+0x2f8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	0018      	movs	r0, r3
 8002490:	f000 f970 	bl	8002774 <SPI_EndRxTxTransaction>
 8002494:	1e03      	subs	r3, r0, #0
 8002496:	d002      	beq.n	800249e <HAL_SPI_TransmitReceive+0x456>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d004      	beq.n	80024b0 <HAL_SPI_TransmitReceive+0x468>
  {
    errorcode = HAL_ERROR;
 80024a6:	2323      	movs	r3, #35	; 0x23
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	e000      	b.n	80024b2 <HAL_SPI_TransmitReceive+0x46a>
  }

error :
 80024b0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	225d      	movs	r2, #93	; 0x5d
 80024b6:	2101      	movs	r1, #1
 80024b8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	225c      	movs	r2, #92	; 0x5c
 80024be:	2100      	movs	r1, #0
 80024c0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80024c2:	2323      	movs	r3, #35	; 0x23
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	781b      	ldrb	r3, [r3, #0]
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b00a      	add	sp, #40	; 0x28
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	225d      	movs	r2, #93	; 0x5d
 80024dc:	5c9b      	ldrb	r3, [r3, r2]
 80024de:	b2db      	uxtb	r3, r3
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b002      	add	sp, #8
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024f6:	e050      	b.n	800259a <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	3301      	adds	r3, #1
 80024fc:	d04d      	beq.n	800259a <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <SPI_WaitFlagStateUntilTimeout+0x2c>
 8002504:	f7fd fec8 	bl	8000298 <HAL_GetTick>
 8002508:	0002      	movs	r2, r0
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d842      	bhi.n	800259a <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	21e0      	movs	r1, #224	; 0xe0
 8002520:	438a      	bics	r2, r1
 8002522:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	2382      	movs	r3, #130	; 0x82
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	429a      	cmp	r2, r3
 800252e:	d113      	bne.n	8002558 <SPI_WaitFlagStateUntilTimeout+0x70>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	429a      	cmp	r2, r3
 800253a:	d005      	beq.n	8002548 <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	429a      	cmp	r2, r3
 8002546:	d107      	bne.n	8002558 <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2140      	movs	r1, #64	; 0x40
 8002554:	438a      	bics	r2, r1
 8002556:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	019b      	lsls	r3, r3, #6
 8002560:	429a      	cmp	r2, r3
 8002562:	d110      	bne.n	8002586 <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4914      	ldr	r1, [pc, #80]	; (80025c0 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8002570:	400a      	ands	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2180      	movs	r1, #128	; 0x80
 8002580:	0189      	lsls	r1, r1, #6
 8002582:	430a      	orrs	r2, r1
 8002584:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	225d      	movs	r2, #93	; 0x5d
 800258a:	2101      	movs	r1, #1
 800258c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	225c      	movs	r2, #92	; 0x5c
 8002592:	2100      	movs	r1, #0
 8002594:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e00e      	b.n	80025b8 <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	4013      	ands	r3, r2
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d101      	bne.n	80025ae <SPI_WaitFlagStateUntilTimeout+0xc6>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <SPI_WaitFlagStateUntilTimeout+0xc8>
 80025ae:	2300      	movs	r3, #0
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d1a0      	bne.n	80024f8 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	0018      	movs	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b004      	add	sp, #16
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	ffffdfff 	.word	0xffffdfff

080025c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80025d2:	e062      	b.n	800269a <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	23c0      	movs	r3, #192	; 0xc0
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	429a      	cmp	r2, r3
 80025dc:	d10c      	bne.n	80025f8 <SPI_WaitFifoStateUntilTimeout+0x34>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	330c      	adds	r3, #12
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	2117      	movs	r1, #23
 80025f0:	187b      	adds	r3, r7, r1
 80025f2:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80025f4:	187b      	adds	r3, r7, r1
 80025f6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	3301      	adds	r3, #1
 80025fc:	d04d      	beq.n	800269a <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d007      	beq.n	8002614 <SPI_WaitFifoStateUntilTimeout+0x50>
 8002604:	f7fd fe48 	bl	8000298 <HAL_GetTick>
 8002608:	0002      	movs	r2, r0
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d842      	bhi.n	800269a <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	21e0      	movs	r1, #224	; 0xe0
 8002620:	438a      	bics	r2, r1
 8002622:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	2382      	movs	r3, #130	; 0x82
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	429a      	cmp	r2, r3
 800262e:	d113      	bne.n	8002658 <SPI_WaitFifoStateUntilTimeout+0x94>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	429a      	cmp	r2, r3
 800263a:	d005      	beq.n	8002648 <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	429a      	cmp	r2, r3
 8002646:	d107      	bne.n	8002658 <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2140      	movs	r1, #64	; 0x40
 8002654:	438a      	bics	r2, r1
 8002656:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	019b      	lsls	r3, r3, #6
 8002660:	429a      	cmp	r2, r3
 8002662:	d110      	bne.n	8002686 <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4911      	ldr	r1, [pc, #68]	; (80026b4 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8002670:	400a      	ands	r2, r1
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	0189      	lsls	r1, r1, #6
 8002682:	430a      	orrs	r2, r1
 8002684:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	225d      	movs	r2, #93	; 0x5d
 800268a:	2101      	movs	r1, #1
 800268c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	225c      	movs	r2, #92	; 0x5c
 8002692:	2100      	movs	r1, #0
 8002694:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e008      	b.n	80026ac <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	4013      	ands	r3, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d194      	bne.n	80025d4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b006      	add	sp, #24
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	ffffdfff 	.word	0xffffdfff

080026b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	2382      	movs	r3, #130	; 0x82
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d113      	bne.n	80026f8 <SPI_EndRxTransaction+0x40>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	429a      	cmp	r2, r3
 80026da:	d005      	beq.n	80026e8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d107      	bne.n	80026f8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2140      	movs	r1, #64	; 0x40
 80026f4:	438a      	bics	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	0013      	movs	r3, r2
 8002702:	2200      	movs	r2, #0
 8002704:	2180      	movs	r1, #128	; 0x80
 8002706:	f7ff feef 	bl	80024e8 <SPI_WaitFlagStateUntilTimeout>
 800270a:	1e03      	subs	r3, r0, #0
 800270c:	d007      	beq.n	800271e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002712:	2220      	movs	r2, #32
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e026      	b.n	800276c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	2382      	movs	r3, #130	; 0x82
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	429a      	cmp	r2, r3
 8002728:	d11f      	bne.n	800276a <SPI_EndRxTransaction+0xb2>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	429a      	cmp	r2, r3
 8002734:	d005      	beq.n	8002742 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	429a      	cmp	r2, r3
 8002740:	d113      	bne.n	800276a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	23c0      	movs	r3, #192	; 0xc0
 8002746:	00d9      	lsls	r1, r3, #3
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	0013      	movs	r3, r2
 8002750:	2200      	movs	r2, #0
 8002752:	f7ff ff37 	bl	80025c4 <SPI_WaitFifoStateUntilTimeout>
 8002756:	1e03      	subs	r3, r0, #0
 8002758:	d007      	beq.n	800276a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275e:	2220      	movs	r2, #32
 8002760:	431a      	orrs	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e000      	b.n	800276c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b004      	add	sp, #16
 8002772:	bd80      	pop	{r7, pc}

08002774 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	23c0      	movs	r3, #192	; 0xc0
 8002784:	0159      	lsls	r1, r3, #5
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	0013      	movs	r3, r2
 800278e:	2200      	movs	r2, #0
 8002790:	f7ff ff18 	bl	80025c4 <SPI_WaitFifoStateUntilTimeout>
 8002794:	1e03      	subs	r3, r0, #0
 8002796:	d007      	beq.n	80027a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279c:	2220      	movs	r2, #32
 800279e:	431a      	orrs	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e027      	b.n	80027f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	0013      	movs	r3, r2
 80027b2:	2200      	movs	r2, #0
 80027b4:	2180      	movs	r1, #128	; 0x80
 80027b6:	f7ff fe97 	bl	80024e8 <SPI_WaitFlagStateUntilTimeout>
 80027ba:	1e03      	subs	r3, r0, #0
 80027bc:	d007      	beq.n	80027ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c2:	2220      	movs	r2, #32
 80027c4:	431a      	orrs	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e014      	b.n	80027f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	23c0      	movs	r3, #192	; 0xc0
 80027d2:	00d9      	lsls	r1, r3, #3
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	0013      	movs	r3, r2
 80027dc:	2200      	movs	r2, #0
 80027de:	f7ff fef1 	bl	80025c4 <SPI_WaitFifoStateUntilTimeout>
 80027e2:	1e03      	subs	r3, r0, #0
 80027e4:	d007      	beq.n	80027f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ea:	2220      	movs	r2, #32
 80027ec:	431a      	orrs	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e000      	b.n	80027f8 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b004      	add	sp, #16
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e081      	b.n	8002916 <HAL_TIM_Base_Init+0x116>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a42      	ldr	r2, [pc, #264]	; (8002920 <HAL_TIM_Base_Init+0x120>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d022      	beq.n	8002862 <HAL_TIM_Base_Init+0x62>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a40      	ldr	r2, [pc, #256]	; (8002924 <HAL_TIM_Base_Init+0x124>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01d      	beq.n	8002862 <HAL_TIM_Base_Init+0x62>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a3f      	ldr	r2, [pc, #252]	; (8002928 <HAL_TIM_Base_Init+0x128>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d018      	beq.n	8002862 <HAL_TIM_Base_Init+0x62>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a3d      	ldr	r2, [pc, #244]	; (800292c <HAL_TIM_Base_Init+0x12c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_TIM_Base_Init+0x62>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a3c      	ldr	r2, [pc, #240]	; (8002930 <HAL_TIM_Base_Init+0x130>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00e      	beq.n	8002862 <HAL_TIM_Base_Init+0x62>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a3a      	ldr	r2, [pc, #232]	; (8002934 <HAL_TIM_Base_Init+0x134>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d009      	beq.n	8002862 <HAL_TIM_Base_Init+0x62>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a39      	ldr	r2, [pc, #228]	; (8002938 <HAL_TIM_Base_Init+0x138>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_TIM_Base_Init+0x62>
 8002858:	4b38      	ldr	r3, [pc, #224]	; (800293c <HAL_TIM_Base_Init+0x13c>)
 800285a:	21d4      	movs	r1, #212	; 0xd4
 800285c:	0018      	movs	r0, r3
 800285e:	f001 f8d2 	bl	8003a06 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d014      	beq.n	8002894 <HAL_TIM_Base_Init+0x94>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b10      	cmp	r3, #16
 8002870:	d010      	beq.n	8002894 <HAL_TIM_Base_Init+0x94>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b20      	cmp	r3, #32
 8002878:	d00c      	beq.n	8002894 <HAL_TIM_Base_Init+0x94>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b40      	cmp	r3, #64	; 0x40
 8002880:	d008      	beq.n	8002894 <HAL_TIM_Base_Init+0x94>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b60      	cmp	r3, #96	; 0x60
 8002888:	d004      	beq.n	8002894 <HAL_TIM_Base_Init+0x94>
 800288a:	4b2c      	ldr	r3, [pc, #176]	; (800293c <HAL_TIM_Base_Init+0x13c>)
 800288c:	21d5      	movs	r1, #213	; 0xd5
 800288e:	0018      	movs	r0, r3
 8002890:	f001 f8b9 	bl	8003a06 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d010      	beq.n	80028be <HAL_TIM_Base_Init+0xbe>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d00a      	beq.n	80028be <HAL_TIM_Base_Init+0xbe>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d004      	beq.n	80028be <HAL_TIM_Base_Init+0xbe>
 80028b4:	4b21      	ldr	r3, [pc, #132]	; (800293c <HAL_TIM_Base_Init+0x13c>)
 80028b6:	21d6      	movs	r1, #214	; 0xd6
 80028b8:	0018      	movs	r0, r3
 80028ba:	f001 f8a4 	bl	8003a06 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d008      	beq.n	80028d8 <HAL_TIM_Base_Init+0xd8>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	2b80      	cmp	r3, #128	; 0x80
 80028cc:	d004      	beq.n	80028d8 <HAL_TIM_Base_Init+0xd8>
 80028ce:	4b1b      	ldr	r3, [pc, #108]	; (800293c <HAL_TIM_Base_Init+0x13c>)
 80028d0:	21d7      	movs	r1, #215	; 0xd7
 80028d2:	0018      	movs	r0, r3
 80028d4:	f001 f897 	bl	8003a06 <assert_failed>

  if(htim->State == HAL_TIM_STATE_RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	223d      	movs	r2, #61	; 0x3d
 80028dc:	5c9b      	ldrb	r3, [r3, r2]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d107      	bne.n	80028f4 <HAL_TIM_Base_Init+0xf4>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	223c      	movs	r2, #60	; 0x3c
 80028e8:	2100      	movs	r1, #0
 80028ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	0018      	movs	r0, r3
 80028f0:	f001 f9cc 	bl	8003c8c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	223d      	movs	r2, #61	; 0x3d
 80028f8:	2102      	movs	r1, #2
 80028fa:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3304      	adds	r3, #4
 8002904:	0019      	movs	r1, r3
 8002906:	0010      	movs	r0, r2
 8002908:	f000 f9a4 	bl	8002c54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	223d      	movs	r2, #61	; 0x3d
 8002910:	2101      	movs	r1, #1
 8002912:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	0018      	movs	r0, r3
 8002918:	46bd      	mov	sp, r7
 800291a:	b002      	add	sp, #8
 800291c:	bd80      	pop	{r7, pc}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	40012c00 	.word	0x40012c00
 8002924:	40000400 	.word	0x40000400
 8002928:	40001000 	.word	0x40001000
 800292c:	40002000 	.word	0x40002000
 8002930:	40014000 	.word	0x40014000
 8002934:	40014400 	.word	0x40014400
 8002938:	40014800 	.word	0x40014800
 800293c:	08003ea4 	.word	0x08003ea4

08002940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <HAL_TIM_Base_Start_IT+0x88>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d024      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x5c>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <HAL_TIM_Base_Start_IT+0x8c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d01f      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x5c>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <HAL_TIM_Base_Start_IT+0x90>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d01a      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x5c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1a      	ldr	r2, [pc, #104]	; (80029d4 <HAL_TIM_Base_Start_IT+0x94>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d015      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x5c>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <HAL_TIM_Base_Start_IT+0x98>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d010      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x5c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a17      	ldr	r2, [pc, #92]	; (80029dc <HAL_TIM_Base_Start_IT+0x9c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00b      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x5c>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a15      	ldr	r2, [pc, #84]	; (80029e0 <HAL_TIM_Base_Start_IT+0xa0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d006      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x5c>
 800298e:	23af      	movs	r3, #175	; 0xaf
 8002990:	005a      	lsls	r2, r3, #1
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <HAL_TIM_Base_Start_IT+0xa4>)
 8002994:	0011      	movs	r1, r2
 8002996:	0018      	movs	r0, r3
 8002998:	f001 f835 	bl	8003a06 <assert_failed>

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2101      	movs	r1, #1
 80029a8:	430a      	orrs	r2, r1
 80029aa:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2101      	movs	r1, #1
 80029b8:	430a      	orrs	r2, r1
 80029ba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40001000 	.word	0x40001000
 80029d4:	40002000 	.word	0x40002000
 80029d8:	40014000 	.word	0x40014000
 80029dc:	40014400 	.word	0x40014400
 80029e0:	40014800 	.word	0x40014800
 80029e4:	08003ea4 	.word	0x08003ea4

080029e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	2202      	movs	r2, #2
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d124      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2202      	movs	r2, #2
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d11d      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2203      	movs	r2, #3
 8002a12:	4252      	negs	r2, r2
 8002a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2203      	movs	r2, #3
 8002a24:	4013      	ands	r3, r2
 8002a26:	d004      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 f8fa 	bl	8002c24 <HAL_TIM_IC_CaptureCallback>
 8002a30:	e007      	b.n	8002a42 <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f000 f8ed 	bl	8002c14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f000 f8f9 	bl	8002c34 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2204      	movs	r2, #4
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d125      	bne.n	8002aa2 <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d11e      	bne.n	8002aa2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2205      	movs	r2, #5
 8002a6a:	4252      	negs	r2, r2
 8002a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2202      	movs	r2, #2
 8002a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699a      	ldr	r2, [r3, #24]
 8002a7a:	23c0      	movs	r3, #192	; 0xc0
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d004      	beq.n	8002a8c <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	0018      	movs	r0, r3
 8002a86:	f000 f8cd 	bl	8002c24 <HAL_TIM_IC_CaptureCallback>
 8002a8a:	e007      	b.n	8002a9c <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f000 f8c0 	bl	8002c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	0018      	movs	r0, r3
 8002a98:	f000 f8cc 	bl	8002c34 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2208      	movs	r2, #8
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d124      	bne.n	8002afa <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d11d      	bne.n	8002afa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2209      	movs	r2, #9
 8002ac4:	4252      	negs	r2, r2
 8002ac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2204      	movs	r2, #4
 8002acc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d004      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	0018      	movs	r0, r3
 8002ade:	f000 f8a1 	bl	8002c24 <HAL_TIM_IC_CaptureCallback>
 8002ae2:	e007      	b.n	8002af4 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f000 f894 	bl	8002c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	0018      	movs	r0, r3
 8002af0:	f000 f8a0 	bl	8002c34 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2210      	movs	r2, #16
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d125      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2210      	movs	r2, #16
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d11e      	bne.n	8002b54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2211      	movs	r2, #17
 8002b1c:	4252      	negs	r2, r2
 8002b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2208      	movs	r2, #8
 8002b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	23c0      	movs	r3, #192	; 0xc0
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4013      	ands	r3, r2
 8002b32:	d004      	beq.n	8002b3e <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	0018      	movs	r0, r3
 8002b38:	f000 f874 	bl	8002c24 <HAL_TIM_IC_CaptureCallback>
 8002b3c:	e007      	b.n	8002b4e <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	0018      	movs	r0, r3
 8002b42:	f000 f867 	bl	8002c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f000 f873 	bl	8002c34 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d10f      	bne.n	8002b82 <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d108      	bne.n	8002b82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2202      	movs	r2, #2
 8002b76:	4252      	negs	r2, r2
 8002b78:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f000 fedf 	bl	8003940 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b80      	cmp	r3, #128	; 0x80
 8002b8e:	d10f      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2280      	movs	r2, #128	; 0x80
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b80      	cmp	r3, #128	; 0x80
 8002b9c:	d108      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2281      	movs	r2, #129	; 0x81
 8002ba4:	4252      	negs	r2, r2
 8002ba6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 f8d2 	bl	8002d54 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2240      	movs	r2, #64	; 0x40
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b40      	cmp	r3, #64	; 0x40
 8002bbc:	d10f      	bne.n	8002bde <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2240      	movs	r2, #64	; 0x40
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b40      	cmp	r3, #64	; 0x40
 8002bca:	d108      	bne.n	8002bde <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2241      	movs	r2, #65	; 0x41
 8002bd2:	4252      	negs	r2, r2
 8002bd4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f000 f833 	bl	8002c44 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	2220      	movs	r2, #32
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d10f      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	d108      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2221      	movs	r2, #33	; 0x21
 8002c00:	4252      	negs	r2, r2
 8002c02:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	0018      	movs	r0, r3
 8002c08:	f000 f89c 	bl	8002d44 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b002      	add	sp, #8
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c1c:	46c0      	nop			; (mov r8, r8)
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b002      	add	sp, #8
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c2c:	46c0      	nop			; (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b002      	add	sp, #8
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c3c:	46c0      	nop			; (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b002      	add	sp, #8
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c4c:	46c0      	nop			; (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b002      	add	sp, #8
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a2f      	ldr	r2, [pc, #188]	; (8002d28 <TIM_Base_SetConfig+0xd4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <TIM_Base_SetConfig+0x24>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a2e      	ldr	r2, [pc, #184]	; (8002d2c <TIM_Base_SetConfig+0xd8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d108      	bne.n	8002c8a <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2270      	movs	r2, #112	; 0x70
 8002c7c:	4393      	bics	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a26      	ldr	r2, [pc, #152]	; (8002d28 <TIM_Base_SetConfig+0xd4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <TIM_Base_SetConfig+0x66>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a25      	ldr	r2, [pc, #148]	; (8002d2c <TIM_Base_SetConfig+0xd8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00f      	beq.n	8002cba <TIM_Base_SetConfig+0x66>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a24      	ldr	r2, [pc, #144]	; (8002d30 <TIM_Base_SetConfig+0xdc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00b      	beq.n	8002cba <TIM_Base_SetConfig+0x66>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a23      	ldr	r2, [pc, #140]	; (8002d34 <TIM_Base_SetConfig+0xe0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d007      	beq.n	8002cba <TIM_Base_SetConfig+0x66>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a22      	ldr	r2, [pc, #136]	; (8002d38 <TIM_Base_SetConfig+0xe4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d003      	beq.n	8002cba <TIM_Base_SetConfig+0x66>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a21      	ldr	r2, [pc, #132]	; (8002d3c <TIM_Base_SetConfig+0xe8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d108      	bne.n	8002ccc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4a20      	ldr	r2, [pc, #128]	; (8002d40 <TIM_Base_SetConfig+0xec>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2280      	movs	r2, #128	; 0x80
 8002cd0:	4393      	bics	r3, r2
 8002cd2:	001a      	movs	r2, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a0c      	ldr	r2, [pc, #48]	; (8002d28 <TIM_Base_SetConfig+0xd4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00b      	beq.n	8002d12 <TIM_Base_SetConfig+0xbe>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a0d      	ldr	r2, [pc, #52]	; (8002d34 <TIM_Base_SetConfig+0xe0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d007      	beq.n	8002d12 <TIM_Base_SetConfig+0xbe>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a0c      	ldr	r2, [pc, #48]	; (8002d38 <TIM_Base_SetConfig+0xe4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d003      	beq.n	8002d12 <TIM_Base_SetConfig+0xbe>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <TIM_Base_SetConfig+0xe8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d103      	bne.n	8002d1a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	615a      	str	r2, [r3, #20]
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b004      	add	sp, #16
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40012c00 	.word	0x40012c00
 8002d2c:	40000400 	.word	0x40000400
 8002d30:	40002000 	.word	0x40002000
 8002d34:	40014000 	.word	0x40014000
 8002d38:	40014400 	.word	0x40014400
 8002d3c:	40014800 	.word	0x40014800
 8002d40:	fffffcff 	.word	0xfffffcff

08002d44 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b002      	add	sp, #8
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d5c:	46c0      	nop			; (mov r8, r8)
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b002      	add	sp, #8
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <InputsConfigure>:
 * @param  GPIO_Pin				A number of a port pin
 * @param  GPIO_TypeDef*		A pointer to a structure off a port
 */
void
InputsConfigure (InputNameType InName, uint8_t InDebounceDown, uint8_t InDebounceUp, uint16_t GPIO_Pin, GPIO_TypeDef* GPIO)
{
 8002d64:	b5b0      	push	{r4, r5, r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	0005      	movs	r5, r0
 8002d6c:	000c      	movs	r4, r1
 8002d6e:	0010      	movs	r0, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	1dfb      	adds	r3, r7, #7
 8002d74:	1c2a      	adds	r2, r5, #0
 8002d76:	701a      	strb	r2, [r3, #0]
 8002d78:	1dbb      	adds	r3, r7, #6
 8002d7a:	1c22      	adds	r2, r4, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	1d7b      	adds	r3, r7, #5
 8002d80:	1c02      	adds	r2, r0, #0
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	1cbb      	adds	r3, r7, #2
 8002d86:	1c0a      	adds	r2, r1, #0
 8002d88:	801a      	strh	r2, [r3, #0]
	/* Check the parameters */
	if (InName < kInputCount)
 8002d8a:	1dfb      	adds	r3, r7, #7
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b11      	cmp	r3, #17
 8002d90:	d842      	bhi.n	8002e18 <InputsConfigure+0xb4>
	{
		InputConf[InName].GPIO = GPIO;
 8002d92:	1dfb      	adds	r3, r7, #7
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	4a22      	ldr	r2, [pc, #136]	; (8002e20 <InputsConfigure+0xbc>)
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	18d3      	adds	r3, r2, r3
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	601a      	str	r2, [r3, #0]
		InputConf[InName].GPIO_Pin = GPIO_Pin;
 8002da2:	1dfb      	adds	r3, r7, #7
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	4a1e      	ldr	r2, [pc, #120]	; (8002e20 <InputsConfigure+0xbc>)
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	18d3      	adds	r3, r2, r3
 8002dac:	3308      	adds	r3, #8
 8002dae:	1cba      	adds	r2, r7, #2
 8002db0:	8812      	ldrh	r2, [r2, #0]
 8002db2:	801a      	strh	r2, [r3, #0]
		InputConf[InName].InDebounceDown = InDebounceDown;
 8002db4:	1dfb      	adds	r3, r7, #7
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	4a19      	ldr	r2, [pc, #100]	; (8002e20 <InputsConfigure+0xbc>)
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	18d3      	adds	r3, r2, r3
 8002dbe:	330b      	adds	r3, #11
 8002dc0:	1dba      	adds	r2, r7, #6
 8002dc2:	7812      	ldrb	r2, [r2, #0]
 8002dc4:	701a      	strb	r2, [r3, #0]
		InputConf[InName].InDebounceUp = InDebounceUp;
 8002dc6:	1dfb      	adds	r3, r7, #7
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	4a15      	ldr	r2, [pc, #84]	; (8002e20 <InputsConfigure+0xbc>)
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	18d3      	adds	r3, r2, r3
 8002dd0:	330a      	adds	r3, #10
 8002dd2:	1d7a      	adds	r2, r7, #5
 8002dd4:	7812      	ldrb	r2, [r2, #0]
 8002dd6:	701a      	strb	r2, [r3, #0]
		InputConf[InName].InDebounceDownCounter = 0x00;
 8002dd8:	1dfb      	adds	r3, r7, #7
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	4a10      	ldr	r2, [pc, #64]	; (8002e20 <InputsConfigure+0xbc>)
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	18d3      	adds	r3, r2, r3
 8002de2:	330d      	adds	r3, #13
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
		InputConf[InName].InDebounceUpCounter = 0x00;
 8002de8:	1dfb      	adds	r3, r7, #7
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4a0c      	ldr	r2, [pc, #48]	; (8002e20 <InputsConfigure+0xbc>)
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	18d3      	adds	r3, r2, r3
 8002df2:	330c      	adds	r3, #12
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
		InputConf[InName].InStateAtt = GPIO_PIN_RESET;
 8002df8:	1dfb      	adds	r3, r7, #7
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	4a08      	ldr	r2, [pc, #32]	; (8002e20 <InputsConfigure+0xbc>)
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	18d3      	adds	r3, r2, r3
 8002e02:	330e      	adds	r3, #14
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
		InputConf[InName].InStateOld = GPIO_PIN_RESET;
 8002e08:	1dfb      	adds	r3, r7, #7
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <InputsConfigure+0xbc>)
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	18d3      	adds	r3, r2, r3
 8002e12:	330f      	adds	r3, #15
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
	}
}
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b002      	add	sp, #8
 8002e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e20:	20000028 	.word	0x20000028

08002e24 <InputsInit>:
 * @brief Use a InputsConfigure for listing inputs avaliable
 * @param  None
 */
void
InputsInit (void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af02      	add	r7, sp, #8
	InputsConfigure (In01, 10, 10, McuIn1_Pin, McuIn1_GPIO_Port);
 8002e2a:	4b53      	ldr	r3, [pc, #332]	; (8002f78 <InputsInit+0x154>)
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	2301      	movs	r3, #1
 8002e30:	220a      	movs	r2, #10
 8002e32:	210a      	movs	r1, #10
 8002e34:	2000      	movs	r0, #0
 8002e36:	f7ff ff95 	bl	8002d64 <InputsConfigure>
	InputsConfigure (In02, 10, 10, McuIn2_Pin, McuIn2_GPIO_Port);
 8002e3a:	4b4f      	ldr	r3, [pc, #316]	; (8002f78 <InputsInit+0x154>)
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	2302      	movs	r3, #2
 8002e40:	220a      	movs	r2, #10
 8002e42:	210a      	movs	r1, #10
 8002e44:	2001      	movs	r0, #1
 8002e46:	f7ff ff8d 	bl	8002d64 <InputsConfigure>
	InputsConfigure (In03, 10, 10, McuIn3_Pin, McuIn3_GPIO_Port);
 8002e4a:	4b4b      	ldr	r3, [pc, #300]	; (8002f78 <InputsInit+0x154>)
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	2304      	movs	r3, #4
 8002e50:	220a      	movs	r2, #10
 8002e52:	210a      	movs	r1, #10
 8002e54:	2002      	movs	r0, #2
 8002e56:	f7ff ff85 	bl	8002d64 <InputsConfigure>
	InputsConfigure (In04, 10, 10, McuIn4_Pin, McuIn4_GPIO_Port);
 8002e5a:	4b47      	ldr	r3, [pc, #284]	; (8002f78 <InputsInit+0x154>)
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	2308      	movs	r3, #8
 8002e60:	220a      	movs	r2, #10
 8002e62:	210a      	movs	r1, #10
 8002e64:	2003      	movs	r0, #3
 8002e66:	f7ff ff7d 	bl	8002d64 <InputsConfigure>
	InputsConfigure (In05, 10, 10, McuIn5_Pin, McuIn5_GPIO_Port);
 8002e6a:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <InputsInit+0x154>)
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	2310      	movs	r3, #16
 8002e70:	220a      	movs	r2, #10
 8002e72:	210a      	movs	r1, #10
 8002e74:	2004      	movs	r0, #4
 8002e76:	f7ff ff75 	bl	8002d64 <InputsConfigure>
	InputsConfigure (In06, 10, 10, McuIn6_Pin, McuIn6_GPIO_Port);
 8002e7a:	4b3f      	ldr	r3, [pc, #252]	; (8002f78 <InputsInit+0x154>)
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	2320      	movs	r3, #32
 8002e80:	220a      	movs	r2, #10
 8002e82:	210a      	movs	r1, #10
 8002e84:	2005      	movs	r0, #5
 8002e86:	f7ff ff6d 	bl	8002d64 <InputsConfigure>
	InputsConfigure (In07, 10, 10, McuIn7_Pin, McuIn7_GPIO_Port);
 8002e8a:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <InputsInit+0x154>)
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	2340      	movs	r3, #64	; 0x40
 8002e90:	220a      	movs	r2, #10
 8002e92:	210a      	movs	r1, #10
 8002e94:	2006      	movs	r0, #6
 8002e96:	f7ff ff65 	bl	8002d64 <InputsConfigure>
	InputsConfigure (In08, 10, 10, McuIn8_Pin, McuIn8_GPIO_Port);
 8002e9a:	4b37      	ldr	r3, [pc, #220]	; (8002f78 <InputsInit+0x154>)
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	220a      	movs	r2, #10
 8002ea2:	210a      	movs	r1, #10
 8002ea4:	2007      	movs	r0, #7
 8002ea6:	f7ff ff5d 	bl	8002d64 <InputsConfigure>
	InputsConfigure (In09, 10, 10, McuIn9_Pin, McuIn9_GPIO_Port);
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	005a      	lsls	r2, r3, #1
 8002eae:	4b32      	ldr	r3, [pc, #200]	; (8002f78 <InputsInit+0x154>)
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	0013      	movs	r3, r2
 8002eb4:	220a      	movs	r2, #10
 8002eb6:	210a      	movs	r1, #10
 8002eb8:	2008      	movs	r0, #8
 8002eba:	f7ff ff53 	bl	8002d64 <InputsConfigure>
	InputsConfigure (In10, 10, 10, McuIn10_Pin, McuIn10_GPIO_Port);
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	009a      	lsls	r2, r3, #2
 8002ec2:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <InputsInit+0x154>)
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	0013      	movs	r3, r2
 8002ec8:	220a      	movs	r2, #10
 8002eca:	210a      	movs	r1, #10
 8002ecc:	2009      	movs	r0, #9
 8002ece:	f7ff ff49 	bl	8002d64 <InputsConfigure>
	InputsConfigure (In11, 10, 10, McuIn11_Pin, McuIn11_GPIO_Port);
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	00da      	lsls	r2, r3, #3
 8002ed6:	4b28      	ldr	r3, [pc, #160]	; (8002f78 <InputsInit+0x154>)
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	0013      	movs	r3, r2
 8002edc:	220a      	movs	r2, #10
 8002ede:	210a      	movs	r1, #10
 8002ee0:	200a      	movs	r0, #10
 8002ee2:	f7ff ff3f 	bl	8002d64 <InputsConfigure>
	InputsConfigure (In12, 10, 10, McuIn12_Pin, McuIn12_GPIO_Port);
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	011a      	lsls	r2, r3, #4
 8002eea:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <InputsInit+0x154>)
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	0013      	movs	r3, r2
 8002ef0:	220a      	movs	r2, #10
 8002ef2:	210a      	movs	r1, #10
 8002ef4:	200b      	movs	r0, #11
 8002ef6:	f7ff ff35 	bl	8002d64 <InputsConfigure>
	InputsConfigure (In13, 10, 10, McuIn13_Pin, McuIn13_GPIO_Port);
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <InputsInit+0x154>)
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	0013      	movs	r3, r2
 8002f04:	220a      	movs	r2, #10
 8002f06:	210a      	movs	r1, #10
 8002f08:	200c      	movs	r0, #12
 8002f0a:	f7ff ff2b 	bl	8002d64 <InputsConfigure>
	InputsConfigure (In14, 10, 10, McuIn14_Pin, McuIn14_GPIO_Port);
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	019a      	lsls	r2, r3, #6
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <InputsInit+0x154>)
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	0013      	movs	r3, r2
 8002f18:	220a      	movs	r2, #10
 8002f1a:	210a      	movs	r1, #10
 8002f1c:	200d      	movs	r0, #13
 8002f1e:	f7ff ff21 	bl	8002d64 <InputsConfigure>
	InputsConfigure (In15, 10, 10, McuIn15_Pin, McuIn15_GPIO_Port);
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	01da      	lsls	r2, r3, #7
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <InputsInit+0x154>)
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	0013      	movs	r3, r2
 8002f2c:	220a      	movs	r2, #10
 8002f2e:	210a      	movs	r1, #10
 8002f30:	200e      	movs	r0, #14
 8002f32:	f7ff ff17 	bl	8002d64 <InputsConfigure>
	InputsConfigure (In16, 10, 10, McuIn16_Pin, McuIn16_GPIO_Port);
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	021a      	lsls	r2, r3, #8
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <InputsInit+0x154>)
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	0013      	movs	r3, r2
 8002f40:	220a      	movs	r2, #10
 8002f42:	210a      	movs	r1, #10
 8002f44:	200f      	movs	r0, #15
 8002f46:	f7ff ff0d 	bl	8002d64 <InputsConfigure>
	InputsConfigure (In17, 10, 10, McuIn17_Pin, McuIn17_GPIO_Port);
 8002f4a:	2390      	movs	r3, #144	; 0x90
 8002f4c:	05db      	lsls	r3, r3, #23
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	2302      	movs	r3, #2
 8002f52:	220a      	movs	r2, #10
 8002f54:	210a      	movs	r1, #10
 8002f56:	2010      	movs	r0, #16
 8002f58:	f7ff ff04 	bl	8002d64 <InputsConfigure>
	InputsConfigure (In18, 10, 10, McuIn18_Pin, McuIn18_GPIO_Port);
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	021a      	lsls	r2, r3, #8
 8002f60:	2390      	movs	r3, #144	; 0x90
 8002f62:	05db      	lsls	r3, r3, #23
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	0013      	movs	r3, r2
 8002f68:	220a      	movs	r2, #10
 8002f6a:	210a      	movs	r1, #10
 8002f6c:	2011      	movs	r0, #17
 8002f6e:	f7ff fef9 	bl	8002d64 <InputsConfigure>
}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	48000400 	.word	0x48000400

08002f7c <InputsGetState>:
 * @brief Get a state off a digital input
 * @param  InName				A enum index in vector
 */
uint8_t
InputsGetState (InputNameType InName)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	0002      	movs	r2, r0
 8002f84:	1dfb      	adds	r3, r7, #7
 8002f86:	701a      	strb	r2, [r3, #0]
	uint8_t InStateRet = 0;
 8002f88:	230f      	movs	r3, #15
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]

	if (InName < kInputCount)
 8002f90:	1dfb      	adds	r3, r7, #7
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b11      	cmp	r3, #17
 8002f96:	d809      	bhi.n	8002fac <InputsGetState+0x30>
	{
		InStateRet = InputConf[InName].InStateAtt;
 8002f98:	1dfb      	adds	r3, r7, #7
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	230f      	movs	r3, #15
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	4906      	ldr	r1, [pc, #24]	; (8002fbc <InputsGetState+0x40>)
 8002fa2:	0112      	lsls	r2, r2, #4
 8002fa4:	188a      	adds	r2, r1, r2
 8002fa6:	320e      	adds	r2, #14
 8002fa8:	7812      	ldrb	r2, [r2, #0]
 8002faa:	701a      	strb	r2, [r3, #0]
	}
	return (InStateRet);
 8002fac:	230f      	movs	r3, #15
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	781b      	ldrb	r3, [r3, #0]
}
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b004      	add	sp, #16
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	20000028 	.word	0x20000028

08002fc0 <InputsPeriodic>:
 * @param  None

 */
void
InputsPeriodic (void)
{
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i = 0; i < kInputCount; i++)
 8002fc6:	1dfb      	adds	r3, r7, #7
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	e0a4      	b.n	8003118 <InputsPeriodic+0x158>
	{
		InputConf[i].InState = HAL_GPIO_ReadPin (InputConf[i].GPIO, InputConf[i].GPIO_Pin);
 8002fce:	1dfb      	adds	r3, r7, #7
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	4a56      	ldr	r2, [pc, #344]	; (800312c <InputsPeriodic+0x16c>)
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	18d3      	adds	r3, r2, r3
 8002fd8:	3304      	adds	r3, #4
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	1dfb      	adds	r3, r7, #7
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	4a52      	ldr	r2, [pc, #328]	; (800312c <InputsPeriodic+0x16c>)
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	18d3      	adds	r3, r2, r3
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	881a      	ldrh	r2, [r3, #0]
 8002fea:	1dfb      	adds	r3, r7, #7
 8002fec:	781c      	ldrb	r4, [r3, #0]
 8002fee:	0011      	movs	r1, r2
 8002ff0:	f7fd fc92 	bl	8000918 <HAL_GPIO_ReadPin>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	0019      	movs	r1, r3
 8002ff8:	4b4c      	ldr	r3, [pc, #304]	; (800312c <InputsPeriodic+0x16c>)
 8002ffa:	0122      	lsls	r2, r4, #4
 8002ffc:	54d1      	strb	r1, [r2, r3]

		if (InputConf[i].InState == GPIO_PIN_RESET)
 8002ffe:	1dfb      	adds	r3, r7, #7
 8003000:	781a      	ldrb	r2, [r3, #0]
 8003002:	4b4a      	ldr	r3, [pc, #296]	; (800312c <InputsPeriodic+0x16c>)
 8003004:	0112      	lsls	r2, r2, #4
 8003006:	5cd3      	ldrb	r3, [r2, r3]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d13c      	bne.n	8003086 <InputsPeriodic+0xc6>
		{
			if (InputConf[i].InDebounceUpCounter < InputConf[i].InDebounceUp)
 800300c:	1dfb      	adds	r3, r7, #7
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	4a46      	ldr	r2, [pc, #280]	; (800312c <InputsPeriodic+0x16c>)
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	18d3      	adds	r3, r2, r3
 8003016:	330c      	adds	r3, #12
 8003018:	781a      	ldrb	r2, [r3, #0]
 800301a:	1dfb      	adds	r3, r7, #7
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	4943      	ldr	r1, [pc, #268]	; (800312c <InputsPeriodic+0x16c>)
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	18cb      	adds	r3, r1, r3
 8003024:	330a      	adds	r3, #10
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d20f      	bcs.n	800304c <InputsPeriodic+0x8c>
			{
				InputConf[i].InDebounceUpCounter++;
 800302c:	1dfb      	adds	r3, r7, #7
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	493e      	ldr	r1, [pc, #248]	; (800312c <InputsPeriodic+0x16c>)
 8003032:	011a      	lsls	r2, r3, #4
 8003034:	188a      	adds	r2, r1, r2
 8003036:	320c      	adds	r2, #12
 8003038:	7812      	ldrb	r2, [r2, #0]
 800303a:	3201      	adds	r2, #1
 800303c:	b2d1      	uxtb	r1, r2
 800303e:	4a3b      	ldr	r2, [pc, #236]	; (800312c <InputsPeriodic+0x16c>)
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	18d3      	adds	r3, r2, r3
 8003044:	330c      	adds	r3, #12
 8003046:	1c0a      	adds	r2, r1, #0
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	e01c      	b.n	8003086 <InputsPeriodic+0xc6>
			}
			else
			{
				InputConf[i].InStateAtt = GPIO_PIN_SET;
 800304c:	1dfb      	adds	r3, r7, #7
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	4a36      	ldr	r2, [pc, #216]	; (800312c <InputsPeriodic+0x16c>)
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	18d3      	adds	r3, r2, r3
 8003056:	330e      	adds	r3, #14
 8003058:	2201      	movs	r2, #1
 800305a:	701a      	strb	r2, [r3, #0]
				InputConf[i].InDebounceDownCounter = 0;
 800305c:	1dfb      	adds	r3, r7, #7
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	4a32      	ldr	r2, [pc, #200]	; (800312c <InputsPeriodic+0x16c>)
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	18d3      	adds	r3, r2, r3
 8003066:	330d      	adds	r3, #13
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
				InputConf[i].InStateOld = InputConf[i].InState;
 800306c:	1dfb      	adds	r3, r7, #7
 800306e:	7819      	ldrb	r1, [r3, #0]
 8003070:	1dfb      	adds	r3, r7, #7
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	4a2d      	ldr	r2, [pc, #180]	; (800312c <InputsPeriodic+0x16c>)
 8003076:	0109      	lsls	r1, r1, #4
 8003078:	5c89      	ldrb	r1, [r1, r2]
 800307a:	4a2c      	ldr	r2, [pc, #176]	; (800312c <InputsPeriodic+0x16c>)
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	18d3      	adds	r3, r2, r3
 8003080:	330f      	adds	r3, #15
 8003082:	1c0a      	adds	r2, r1, #0
 8003084:	701a      	strb	r2, [r3, #0]
			}
		}

		if (InputConf[i].InState == GPIO_PIN_SET)
 8003086:	1dfb      	adds	r3, r7, #7
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	4b28      	ldr	r3, [pc, #160]	; (800312c <InputsPeriodic+0x16c>)
 800308c:	0112      	lsls	r2, r2, #4
 800308e:	5cd3      	ldrb	r3, [r2, r3]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d13c      	bne.n	800310e <InputsPeriodic+0x14e>
		{
			if (InputConf[i].InDebounceDownCounter < InputConf[i].InDebounceDown)
 8003094:	1dfb      	adds	r3, r7, #7
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	4a24      	ldr	r2, [pc, #144]	; (800312c <InputsPeriodic+0x16c>)
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	18d3      	adds	r3, r2, r3
 800309e:	330d      	adds	r3, #13
 80030a0:	781a      	ldrb	r2, [r3, #0]
 80030a2:	1dfb      	adds	r3, r7, #7
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	4921      	ldr	r1, [pc, #132]	; (800312c <InputsPeriodic+0x16c>)
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	18cb      	adds	r3, r1, r3
 80030ac:	330b      	adds	r3, #11
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d20f      	bcs.n	80030d4 <InputsPeriodic+0x114>
			{
				InputConf[i].InDebounceDownCounter++;
 80030b4:	1dfb      	adds	r3, r7, #7
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	491c      	ldr	r1, [pc, #112]	; (800312c <InputsPeriodic+0x16c>)
 80030ba:	011a      	lsls	r2, r3, #4
 80030bc:	188a      	adds	r2, r1, r2
 80030be:	320d      	adds	r2, #13
 80030c0:	7812      	ldrb	r2, [r2, #0]
 80030c2:	3201      	adds	r2, #1
 80030c4:	b2d1      	uxtb	r1, r2
 80030c6:	4a19      	ldr	r2, [pc, #100]	; (800312c <InputsPeriodic+0x16c>)
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	18d3      	adds	r3, r2, r3
 80030cc:	330d      	adds	r3, #13
 80030ce:	1c0a      	adds	r2, r1, #0
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	e01c      	b.n	800310e <InputsPeriodic+0x14e>
			}
			else
			{
				InputConf[i].InStateAtt = GPIO_PIN_RESET;
 80030d4:	1dfb      	adds	r3, r7, #7
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	4a14      	ldr	r2, [pc, #80]	; (800312c <InputsPeriodic+0x16c>)
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	18d3      	adds	r3, r2, r3
 80030de:	330e      	adds	r3, #14
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
				InputConf[i].InDebounceUpCounter = 0;
 80030e4:	1dfb      	adds	r3, r7, #7
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	4a10      	ldr	r2, [pc, #64]	; (800312c <InputsPeriodic+0x16c>)
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	18d3      	adds	r3, r2, r3
 80030ee:	330c      	adds	r3, #12
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]
				InputConf[i].InStateOld = InputConf[i].InState;
 80030f4:	1dfb      	adds	r3, r7, #7
 80030f6:	7819      	ldrb	r1, [r3, #0]
 80030f8:	1dfb      	adds	r3, r7, #7
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	4a0b      	ldr	r2, [pc, #44]	; (800312c <InputsPeriodic+0x16c>)
 80030fe:	0109      	lsls	r1, r1, #4
 8003100:	5c89      	ldrb	r1, [r1, r2]
 8003102:	4a0a      	ldr	r2, [pc, #40]	; (800312c <InputsPeriodic+0x16c>)
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	18d3      	adds	r3, r2, r3
 8003108:	330f      	adds	r3, #15
 800310a:	1c0a      	adds	r2, r1, #0
 800310c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < kInputCount; i++)
 800310e:	1dfb      	adds	r3, r7, #7
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	1dfb      	adds	r3, r7, #7
 8003114:	3201      	adds	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
 8003118:	1dfb      	adds	r3, r7, #7
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b11      	cmp	r3, #17
 800311e:	d800      	bhi.n	8003122 <InputsPeriodic+0x162>
 8003120:	e755      	b.n	8002fce <InputsPeriodic+0xe>
			}
		}
	}
}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	46bd      	mov	sp, r7
 8003126:	b003      	add	sp, #12
 8003128:	bd90      	pop	{r4, r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	20000028 	.word	0x20000028

08003130 <nRf905WriteSpi>:
 * @param  TxSpiBuffer				A pointer to vector write
 * @param  Size						A size of a vector
 * @return RetValue 				A status error
 */
HAL_StatusTypeDef nRf905WriteSpi(uint8_t *TxSpiBuffer, uint32_t Size)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef RetValue = HAL_ERROR;
 800313a:	230f      	movs	r3, #15
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]

	if(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_READY)
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <nRf905WriteSpi+0x54>)
 8003144:	0018      	movs	r0, r3
 8003146:	f7ff f9c3 	bl	80024d0 <HAL_SPI_GetState>
 800314a:	0003      	movs	r3, r0
 800314c:	2b01      	cmp	r3, #1
 800314e:	d112      	bne.n	8003176 <nRf905WriteSpi+0x46>
	{
		RetValue = HAL_SPI_Transmit(&hspi1, &TxSpiBuffer, Size, 10);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	b29a      	uxth	r2, r3
 8003154:	230f      	movs	r3, #15
 8003156:	18fc      	adds	r4, r7, r3
 8003158:	1d39      	adds	r1, r7, #4
 800315a:	480a      	ldr	r0, [pc, #40]	; (8003184 <nRf905WriteSpi+0x54>)
 800315c:	230a      	movs	r3, #10
 800315e:	f7fe fc89 	bl	8001a74 <HAL_SPI_Transmit>
 8003162:	0003      	movs	r3, r0
 8003164:	7023      	strb	r3, [r4, #0]
		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <nRf905WriteSpi+0x54>)
 800316a:	0018      	movs	r0, r3
 800316c:	f7ff f9b0 	bl	80024d0 <HAL_SPI_GetState>
 8003170:	0003      	movs	r3, r0
 8003172:	2b01      	cmp	r3, #1
 8003174:	d1f8      	bne.n	8003168 <nRf905WriteSpi+0x38>
			{

			}
	}
	return(RetValue);
 8003176:	230f      	movs	r3, #15
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	781b      	ldrb	r3, [r3, #0]
}
 800317c:	0018      	movs	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	b005      	add	sp, #20
 8003182:	bd90      	pop	{r4, r7, pc}
 8003184:	20000148 	.word	0x20000148

08003188 <nRf905ReadSpi>:
 * @param  RxSpiBuffer				A pointer to vector write
 * @param  Size						A size of a vector
 * @return RetValue 				A status error
 */
HAL_StatusTypeDef nRf905ReadSpi(uint8_t* RxSpiBuffer, uint32_t Size)
{
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef RetValue = HAL_ERROR;
 8003192:	230f      	movs	r3, #15
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	2201      	movs	r2, #1
 8003198:	701a      	strb	r2, [r3, #0]

	if(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_READY)
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <nRf905ReadSpi+0x54>)
 800319c:	0018      	movs	r0, r3
 800319e:	f7ff f997 	bl	80024d0 <HAL_SPI_GetState>
 80031a2:	0003      	movs	r3, r0
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d112      	bne.n	80031ce <nRf905ReadSpi+0x46>
	{
		RetValue = HAL_SPI_Receive(&hspi1, &RxSpiBuffer, Size, 10); //&
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	230f      	movs	r3, #15
 80031ae:	18fc      	adds	r4, r7, r3
 80031b0:	1d39      	adds	r1, r7, #4
 80031b2:	480a      	ldr	r0, [pc, #40]	; (80031dc <nRf905ReadSpi+0x54>)
 80031b4:	230a      	movs	r3, #10
 80031b6:	f7fe fdf1 	bl	8001d9c <HAL_SPI_Receive>
 80031ba:	0003      	movs	r3, r0
 80031bc:	7023      	strb	r3, [r4, #0]
		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <nRf905ReadSpi+0x54>)
 80031c2:	0018      	movs	r0, r3
 80031c4:	f7ff f984 	bl	80024d0 <HAL_SPI_GetState>
 80031c8:	0003      	movs	r3, r0
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d1f8      	bne.n	80031c0 <nRf905ReadSpi+0x38>
			{

			}
	}
	return(RetValue);
 80031ce:	230f      	movs	r3, #15
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	781b      	ldrb	r3, [r3, #0]
}
 80031d4:	0018      	movs	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b005      	add	sp, #20
 80031da:	bd90      	pop	{r4, r7, pc}
 80031dc:	20000148 	.word	0x20000148

080031e0 <Nrf905SetMode>:
/**
 * @brief Simple function to control a power state off a nFR905
 * @param  nRF905ModeMode			A enumeration status
 */
void Nrf905SetMode(nRF905ModeType nRF905ModeMode)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	0002      	movs	r2, r0
 80031e8:	1dfb      	adds	r3, r7, #7
 80031ea:	701a      	strb	r2, [r3, #0]
	switch(nRF905ModeMode)
 80031ec:	1dfb      	adds	r3, r7, #7
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d900      	bls.n	80031f6 <Nrf905SetMode+0x16>
 80031f4:	e081      	b.n	80032fa <Nrf905SetMode+0x11a>
 80031f6:	009a      	lsls	r2, r3, #2
 80031f8:	4b50      	ldr	r3, [pc, #320]	; (800333c <Nrf905SetMode+0x15c>)
 80031fa:	18d3      	adds	r3, r2, r3
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	469f      	mov	pc, r3
	{
	case ePdMode:
		Nrf905ResetPwrUp();
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	0059      	lsls	r1, r3, #1
 8003204:	2390      	movs	r3, #144	; 0x90
 8003206:	05db      	lsls	r3, r3, #23
 8003208:	2200      	movs	r2, #0
 800320a:	0018      	movs	r0, r3
 800320c:	f7fd fbb4 	bl	8000978 <HAL_GPIO_WritePin>
		Nrf905ResetTxEn();
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	00d9      	lsls	r1, r3, #3
 8003214:	2390      	movs	r3, #144	; 0x90
 8003216:	05db      	lsls	r3, r3, #23
 8003218:	2200      	movs	r2, #0
 800321a:	0018      	movs	r0, r3
 800321c:	f7fd fbac 	bl	8000978 <HAL_GPIO_WritePin>
		Nrf905ResetTRxCe();
 8003220:	2380      	movs	r3, #128	; 0x80
 8003222:	0099      	lsls	r1, r3, #2
 8003224:	2390      	movs	r3, #144	; 0x90
 8003226:	05db      	lsls	r3, r3, #23
 8003228:	2200      	movs	r2, #0
 800322a:	0018      	movs	r0, r3
 800322c:	f7fd fba4 	bl	8000978 <HAL_GPIO_WritePin>
		break;
 8003230:	e07c      	b.n	800332c <Nrf905SetMode+0x14c>
	case ePuMode:
		Nrf905SetPwrUp();
 8003232:	2380      	movs	r3, #128	; 0x80
 8003234:	0059      	lsls	r1, r3, #1
 8003236:	2390      	movs	r3, #144	; 0x90
 8003238:	05db      	lsls	r3, r3, #23
 800323a:	2201      	movs	r2, #1
 800323c:	0018      	movs	r0, r3
 800323e:	f7fd fb9b 	bl	8000978 <HAL_GPIO_WritePin>
		Nrf905ResetTxEn();
 8003242:	2380      	movs	r3, #128	; 0x80
 8003244:	00d9      	lsls	r1, r3, #3
 8003246:	2390      	movs	r3, #144	; 0x90
 8003248:	05db      	lsls	r3, r3, #23
 800324a:	2200      	movs	r2, #0
 800324c:	0018      	movs	r0, r3
 800324e:	f7fd fb93 	bl	8000978 <HAL_GPIO_WritePin>
		Nrf905ResetTRxCe();
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	0099      	lsls	r1, r3, #2
 8003256:	2390      	movs	r3, #144	; 0x90
 8003258:	05db      	lsls	r3, r3, #23
 800325a:	2200      	movs	r2, #0
 800325c:	0018      	movs	r0, r3
 800325e:	f7fd fb8b 	bl	8000978 <HAL_GPIO_WritePin>
		break;
 8003262:	e063      	b.n	800332c <Nrf905SetMode+0x14c>
	case eSbMode:
		Nrf905SetPwrUp();
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	0059      	lsls	r1, r3, #1
 8003268:	2390      	movs	r3, #144	; 0x90
 800326a:	05db      	lsls	r3, r3, #23
 800326c:	2201      	movs	r2, #1
 800326e:	0018      	movs	r0, r3
 8003270:	f7fd fb82 	bl	8000978 <HAL_GPIO_WritePin>
		Nrf905ResetTxEn();
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	00d9      	lsls	r1, r3, #3
 8003278:	2390      	movs	r3, #144	; 0x90
 800327a:	05db      	lsls	r3, r3, #23
 800327c:	2200      	movs	r2, #0
 800327e:	0018      	movs	r0, r3
 8003280:	f7fd fb7a 	bl	8000978 <HAL_GPIO_WritePin>
		Nrf905ResetTRxCe();
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	0099      	lsls	r1, r3, #2
 8003288:	2390      	movs	r3, #144	; 0x90
 800328a:	05db      	lsls	r3, r3, #23
 800328c:	2200      	movs	r2, #0
 800328e:	0018      	movs	r0, r3
 8003290:	f7fd fb72 	bl	8000978 <HAL_GPIO_WritePin>
		break;
 8003294:	e04a      	b.n	800332c <Nrf905SetMode+0x14c>
	case eRxMode:
		Nrf905SetPwrUp();
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	0059      	lsls	r1, r3, #1
 800329a:	2390      	movs	r3, #144	; 0x90
 800329c:	05db      	lsls	r3, r3, #23
 800329e:	2201      	movs	r2, #1
 80032a0:	0018      	movs	r0, r3
 80032a2:	f7fd fb69 	bl	8000978 <HAL_GPIO_WritePin>
		Nrf905SetTxEn();
 80032a6:	2380      	movs	r3, #128	; 0x80
 80032a8:	00d9      	lsls	r1, r3, #3
 80032aa:	2390      	movs	r3, #144	; 0x90
 80032ac:	05db      	lsls	r3, r3, #23
 80032ae:	2201      	movs	r2, #1
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7fd fb61 	bl	8000978 <HAL_GPIO_WritePin>
		Nrf905ResetTRxCe();
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	0099      	lsls	r1, r3, #2
 80032ba:	2390      	movs	r3, #144	; 0x90
 80032bc:	05db      	lsls	r3, r3, #23
 80032be:	2200      	movs	r2, #0
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7fd fb59 	bl	8000978 <HAL_GPIO_WritePin>
		break;
 80032c6:	e031      	b.n	800332c <Nrf905SetMode+0x14c>
	case eTxMode:
		Nrf905SetPwrUp();
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	0059      	lsls	r1, r3, #1
 80032cc:	2390      	movs	r3, #144	; 0x90
 80032ce:	05db      	lsls	r3, r3, #23
 80032d0:	2201      	movs	r2, #1
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7fd fb50 	bl	8000978 <HAL_GPIO_WritePin>
		Nrf905SetTxEn();
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	00d9      	lsls	r1, r3, #3
 80032dc:	2390      	movs	r3, #144	; 0x90
 80032de:	05db      	lsls	r3, r3, #23
 80032e0:	2201      	movs	r2, #1
 80032e2:	0018      	movs	r0, r3
 80032e4:	f7fd fb48 	bl	8000978 <HAL_GPIO_WritePin>
		Nrf905SetTRxCe();
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	0099      	lsls	r1, r3, #2
 80032ec:	2390      	movs	r3, #144	; 0x90
 80032ee:	05db      	lsls	r3, r3, #23
 80032f0:	2201      	movs	r2, #1
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7fd fb40 	bl	8000978 <HAL_GPIO_WritePin>
		break;
 80032f8:	e018      	b.n	800332c <Nrf905SetMode+0x14c>
	default:
		Nrf905ResetPwrUp();
 80032fa:	2380      	movs	r3, #128	; 0x80
 80032fc:	0059      	lsls	r1, r3, #1
 80032fe:	2390      	movs	r3, #144	; 0x90
 8003300:	05db      	lsls	r3, r3, #23
 8003302:	2200      	movs	r2, #0
 8003304:	0018      	movs	r0, r3
 8003306:	f7fd fb37 	bl	8000978 <HAL_GPIO_WritePin>
		Nrf905ResetTxEn();
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	00d9      	lsls	r1, r3, #3
 800330e:	2390      	movs	r3, #144	; 0x90
 8003310:	05db      	lsls	r3, r3, #23
 8003312:	2200      	movs	r2, #0
 8003314:	0018      	movs	r0, r3
 8003316:	f7fd fb2f 	bl	8000978 <HAL_GPIO_WritePin>
		Nrf905ResetTRxCe();
 800331a:	2380      	movs	r3, #128	; 0x80
 800331c:	0099      	lsls	r1, r3, #2
 800331e:	2390      	movs	r3, #144	; 0x90
 8003320:	05db      	lsls	r3, r3, #23
 8003322:	2200      	movs	r2, #0
 8003324:	0018      	movs	r0, r3
 8003326:	f7fd fb27 	bl	8000978 <HAL_GPIO_WritePin>
		break;
 800332a:	46c0      	nop			; (mov r8, r8)
	}
	HAL_Delay(5);
 800332c:	2005      	movs	r0, #5
 800332e:	f7fc ffbd 	bl	80002ac <HAL_Delay>
}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	b002      	add	sp, #8
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	08003edc 	.word	0x08003edc

08003340 <nRf905SetConfig>:
 * @brief Simple function for write a vector nRFconfig in a device
 *
 * @return RetValue 				A status error
 */
HAL_StatusTypeDef nRf905SetConfig(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
//	write_package[0] = ERASE;
//	write_package[1] = mem_addr;
//	write_package[2] = (data >> 8) & 0xFF;
//	write_package[3] = (data & 0xFF);

	return(HAL_OK);
 8003344:	2300      	movs	r3, #0
}
 8003346:	0018      	movs	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <nRf905SetTxAddr>:
 *
 * @param  nRf905Address			A 32 bit address
 * @return RetValue 				A status error
 */
HAL_StatusTypeDef nRf905SetTxAddr(uint32_t nRf905Address)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	u32t nRf905Slice;

	nRf905Slice.u32v = nRf905Address;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	60fb      	str	r3, [r7, #12]
	Nrf905SetMode(eSbMode);
 8003358:	2002      	movs	r0, #2
 800335a:	f7ff ff41 	bl	80031e0 <Nrf905SetMode>
	Nrf905ResetCs();
 800335e:	2390      	movs	r3, #144	; 0x90
 8003360:	05db      	lsls	r3, r3, #23
 8003362:	2200      	movs	r2, #0
 8003364:	2110      	movs	r1, #16
 8003366:	0018      	movs	r0, r3
 8003368:	f7fd fb06 	bl	8000978 <HAL_GPIO_WritePin>
	if(nRf905WriteSpi((uint8_t*)eWtaRegister, 1) != HAL_OK)
 800336c:	2101      	movs	r1, #1
 800336e:	2022      	movs	r0, #34	; 0x22
 8003370:	f7ff fede 	bl	8003130 <nRf905WriteSpi>
 8003374:	1e03      	subs	r3, r0, #0
 8003376:	d001      	beq.n	800337c <nRf905SetTxAddr+0x30>
	{
		return(HAL_ERROR);
 8003378:	2301      	movs	r3, #1
 800337a:	e011      	b.n	80033a0 <nRf905SetTxAddr+0x54>
	}
	if(nRf905WriteSpi(nRf905Slice.u8v, 4) != HAL_OK)
 800337c:	230c      	movs	r3, #12
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	2104      	movs	r1, #4
 8003382:	0018      	movs	r0, r3
 8003384:	f7ff fed4 	bl	8003130 <nRf905WriteSpi>
 8003388:	1e03      	subs	r3, r0, #0
 800338a:	d001      	beq.n	8003390 <nRf905SetTxAddr+0x44>
	{
		return(HAL_ERROR);
 800338c:	2301      	movs	r3, #1
 800338e:	e007      	b.n	80033a0 <nRf905SetTxAddr+0x54>
	}
	Nrf905SetCs();
 8003390:	2390      	movs	r3, #144	; 0x90
 8003392:	05db      	lsls	r3, r3, #23
 8003394:	2201      	movs	r2, #1
 8003396:	2110      	movs	r1, #16
 8003398:	0018      	movs	r0, r3
 800339a:	f7fd faed 	bl	8000978 <HAL_GPIO_WritePin>
	return(HAL_OK);
 800339e:	2300      	movs	r3, #0
}
 80033a0:	0018      	movs	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b004      	add	sp, #16
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <nRf905GetTxAddr>:
 *
 * @param  nRf905Address			A 32 bit address
 * @return RetValue 				A status error
 */
HAL_StatusTypeDef nRf905GetTxAddr(uint32_t* nRf905Address)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	u32t nRf905Slice;

	Nrf905SetMode(eSbMode);
 80033b0:	2002      	movs	r0, #2
 80033b2:	f7ff ff15 	bl	80031e0 <Nrf905SetMode>
	Nrf905ResetCs();
 80033b6:	2390      	movs	r3, #144	; 0x90
 80033b8:	05db      	lsls	r3, r3, #23
 80033ba:	2200      	movs	r2, #0
 80033bc:	2110      	movs	r1, #16
 80033be:	0018      	movs	r0, r3
 80033c0:	f7fd fada 	bl	8000978 <HAL_GPIO_WritePin>
	if(nRf905WriteSpi((uint8_t*)eRtaRegister, 1) != HAL_OK)
 80033c4:	2101      	movs	r1, #1
 80033c6:	2023      	movs	r0, #35	; 0x23
 80033c8:	f7ff feb2 	bl	8003130 <nRf905WriteSpi>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d001      	beq.n	80033d4 <nRf905GetTxAddr+0x2c>
	{
		return(HAL_ERROR);
 80033d0:	2301      	movs	r3, #1
 80033d2:	e014      	b.n	80033fe <nRf905GetTxAddr+0x56>
	}
	if(nRf905ReadSpi(nRf905Slice.u8v, 4) != HAL_OK)
 80033d4:	230c      	movs	r3, #12
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	2104      	movs	r1, #4
 80033da:	0018      	movs	r0, r3
 80033dc:	f7ff fed4 	bl	8003188 <nRf905ReadSpi>
 80033e0:	1e03      	subs	r3, r0, #0
 80033e2:	d001      	beq.n	80033e8 <nRf905GetTxAddr+0x40>
	{
		return(HAL_ERROR);
 80033e4:	2301      	movs	r3, #1
 80033e6:	e00a      	b.n	80033fe <nRf905GetTxAddr+0x56>
	}
	Nrf905SetCs();
 80033e8:	2390      	movs	r3, #144	; 0x90
 80033ea:	05db      	lsls	r3, r3, #23
 80033ec:	2201      	movs	r2, #1
 80033ee:	2110      	movs	r1, #16
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7fd fac1 	bl	8000978 <HAL_GPIO_WritePin>
	*nRf905Address = nRf905Slice.u32v;
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	601a      	str	r2, [r3, #0]
	return(HAL_OK);
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	0018      	movs	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	b004      	add	sp, #16
 8003404:	bd80      	pop	{r7, pc}

08003406 <nRf905SetRxAddr>:
 *
 * @param  nRf905Address			A 32 bit address
 * @return RetValue 				A status error
 */
HAL_StatusTypeDef nRf905SetRxAddr(uint32_t nRf905Address)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
	u32t nRf905Slice;

	nRf905Slice.u32v = nRf905Address;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	60fb      	str	r3, [r7, #12]
	Nrf905SetMode(eSbMode);
 8003412:	2002      	movs	r0, #2
 8003414:	f7ff fee4 	bl	80031e0 <Nrf905SetMode>
	Nrf905ResetCs();
 8003418:	2390      	movs	r3, #144	; 0x90
 800341a:	05db      	lsls	r3, r3, #23
 800341c:	2200      	movs	r2, #0
 800341e:	2110      	movs	r1, #16
 8003420:	0018      	movs	r0, r3
 8003422:	f7fd faa9 	bl	8000978 <HAL_GPIO_WritePin>
	if(nRf905WriteSpi((uint8_t*)eWcRegister5, 1) != HAL_OK)
 8003426:	2101      	movs	r1, #1
 8003428:	2005      	movs	r0, #5
 800342a:	f7ff fe81 	bl	8003130 <nRf905WriteSpi>
 800342e:	1e03      	subs	r3, r0, #0
 8003430:	d001      	beq.n	8003436 <nRf905SetRxAddr+0x30>
	{
		return(HAL_ERROR);
 8003432:	2301      	movs	r3, #1
 8003434:	e011      	b.n	800345a <nRf905SetRxAddr+0x54>
	}
	if(nRf905WriteSpi(nRf905Slice.u8v, 4) != HAL_OK)
 8003436:	230c      	movs	r3, #12
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	2104      	movs	r1, #4
 800343c:	0018      	movs	r0, r3
 800343e:	f7ff fe77 	bl	8003130 <nRf905WriteSpi>
 8003442:	1e03      	subs	r3, r0, #0
 8003444:	d001      	beq.n	800344a <nRf905SetRxAddr+0x44>
	{
		return(HAL_ERROR);
 8003446:	2301      	movs	r3, #1
 8003448:	e007      	b.n	800345a <nRf905SetRxAddr+0x54>
	}
	Nrf905SetCs();
 800344a:	2390      	movs	r3, #144	; 0x90
 800344c:	05db      	lsls	r3, r3, #23
 800344e:	2201      	movs	r2, #1
 8003450:	2110      	movs	r1, #16
 8003452:	0018      	movs	r0, r3
 8003454:	f7fd fa90 	bl	8000978 <HAL_GPIO_WritePin>
	return(HAL_OK);
 8003458:	2300      	movs	r3, #0
}
 800345a:	0018      	movs	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	b004      	add	sp, #16
 8003460:	bd80      	pop	{r7, pc}

08003462 <nRf905GetRxAddr>:
 *
 * @param  nRf905Address			A pointer to read of 32 bit address
 * @return RetValue 				A status error
 */
HAL_StatusTypeDef nRf905GetRxAddr(uint32_t* nRf905Address)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
	u32t nRf905Slice;

	Nrf905ResetCs();
 800346a:	2390      	movs	r3, #144	; 0x90
 800346c:	05db      	lsls	r3, r3, #23
 800346e:	2200      	movs	r2, #0
 8003470:	2110      	movs	r1, #16
 8003472:	0018      	movs	r0, r3
 8003474:	f7fd fa80 	bl	8000978 <HAL_GPIO_WritePin>
	if(nRf905WriteSpi((uint8_t*)eRcRegister5, 1) != HAL_OK)
 8003478:	2101      	movs	r1, #1
 800347a:	2015      	movs	r0, #21
 800347c:	f7ff fe58 	bl	8003130 <nRf905WriteSpi>
 8003480:	1e03      	subs	r3, r0, #0
 8003482:	d001      	beq.n	8003488 <nRf905GetRxAddr+0x26>
	{
		return(HAL_ERROR);
 8003484:	2301      	movs	r3, #1
 8003486:	e014      	b.n	80034b2 <nRf905GetRxAddr+0x50>
	}
	if(nRf905ReadSpi(nRf905Slice.u8v, 4) != HAL_OK)
 8003488:	230c      	movs	r3, #12
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	2104      	movs	r1, #4
 800348e:	0018      	movs	r0, r3
 8003490:	f7ff fe7a 	bl	8003188 <nRf905ReadSpi>
 8003494:	1e03      	subs	r3, r0, #0
 8003496:	d001      	beq.n	800349c <nRf905GetRxAddr+0x3a>
	{
		return(HAL_ERROR);
 8003498:	2301      	movs	r3, #1
 800349a:	e00a      	b.n	80034b2 <nRf905GetRxAddr+0x50>
	}
	Nrf905SetCs();
 800349c:	2390      	movs	r3, #144	; 0x90
 800349e:	05db      	lsls	r3, r3, #23
 80034a0:	2201      	movs	r2, #1
 80034a2:	2110      	movs	r1, #16
 80034a4:	0018      	movs	r0, r3
 80034a6:	f7fd fa67 	bl	8000978 <HAL_GPIO_WritePin>
	*nRf905Address = nRf905Slice.u32v;
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	601a      	str	r2, [r3, #0]
	return(HAL_OK);
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	0018      	movs	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b004      	add	sp, #16
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <nrf905SetTxBufferLenght>:
 *
 * @param  nRf905Address			A pointer to read of 32 bit address
 * @return RetValue 				A status error
 */
HAL_StatusTypeDef nrf905SetTxBufferLenght(uint8_t nrF905Lenght)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	0002      	movs	r2, r0
 80034c4:	1dfb      	adds	r3, r7, #7
 80034c6:	701a      	strb	r2, [r3, #0]
	Nrf905SetMode(eSbMode);
 80034c8:	2002      	movs	r0, #2
 80034ca:	f7ff fe89 	bl	80031e0 <Nrf905SetMode>
	Nrf905ResetCs();
 80034ce:	2390      	movs	r3, #144	; 0x90
 80034d0:	05db      	lsls	r3, r3, #23
 80034d2:	2200      	movs	r2, #0
 80034d4:	2110      	movs	r1, #16
 80034d6:	0018      	movs	r0, r3
 80034d8:	f7fd fa4e 	bl	8000978 <HAL_GPIO_WritePin>
	if(nRf905WriteSpi((uint8_t*)eWcRegister4, 1) != HAL_OK)
 80034dc:	2101      	movs	r1, #1
 80034de:	2004      	movs	r0, #4
 80034e0:	f7ff fe26 	bl	8003130 <nRf905WriteSpi>
 80034e4:	1e03      	subs	r3, r0, #0
 80034e6:	d001      	beq.n	80034ec <nrf905SetTxBufferLenght+0x30>
	{
		return(HAL_ERROR);
 80034e8:	2301      	movs	r3, #1
 80034ea:	e022      	b.n	8003532 <nrf905SetTxBufferLenght+0x76>
	}
	if(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_READY)
 80034ec:	4b13      	ldr	r3, [pc, #76]	; (800353c <nrf905SetTxBufferLenght+0x80>)
 80034ee:	0018      	movs	r0, r3
 80034f0:	f7fe ffee 	bl	80024d0 <HAL_SPI_GetState>
 80034f4:	0003      	movs	r3, r0
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d113      	bne.n	8003522 <nrf905SetTxBufferLenght+0x66>
	{
		if(HAL_SPI_Transmit(&hspi1, nrF905Lenght, 1, 10) != HAL_OK)
 80034fa:	1dfb      	adds	r3, r7, #7
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	0019      	movs	r1, r3
 8003500:	480e      	ldr	r0, [pc, #56]	; (800353c <nrf905SetTxBufferLenght+0x80>)
 8003502:	230a      	movs	r3, #10
 8003504:	2201      	movs	r2, #1
 8003506:	f7fe fab5 	bl	8001a74 <HAL_SPI_Transmit>
 800350a:	1e03      	subs	r3, r0, #0
 800350c:	d001      	beq.n	8003512 <nrf905SetTxBufferLenght+0x56>
		{
			return(HAL_ERROR);
 800350e:	2301      	movs	r3, #1
 8003510:	e00f      	b.n	8003532 <nrf905SetTxBufferLenght+0x76>
		}
		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <nrf905SetTxBufferLenght+0x80>)
 8003516:	0018      	movs	r0, r3
 8003518:	f7fe ffda 	bl	80024d0 <HAL_SPI_GetState>
 800351c:	0003      	movs	r3, r0
 800351e:	2b01      	cmp	r3, #1
 8003520:	d1f8      	bne.n	8003514 <nrf905SetTxBufferLenght+0x58>
	}
//	if(nRf905WriteSpi((uint8_t*)nrF905Lenght, 1) != HAL_OK)
//	{
//		return(HAL_ERROR);
//	}
	Nrf905SetCs();
 8003522:	2390      	movs	r3, #144	; 0x90
 8003524:	05db      	lsls	r3, r3, #23
 8003526:	2201      	movs	r2, #1
 8003528:	2110      	movs	r1, #16
 800352a:	0018      	movs	r0, r3
 800352c:	f7fd fa24 	bl	8000978 <HAL_GPIO_WritePin>
	return(HAL_OK);
 8003530:	2300      	movs	r3, #0
}
 8003532:	0018      	movs	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	b002      	add	sp, #8
 8003538:	bd80      	pop	{r7, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	20000148 	.word	0x20000148

08003540 <nRf905GetTxBufferLenght>:
 *
 * @param  nRf905Address			A pointer to read of 32 bit address
 * @return RetValue 				A status error
 */
HAL_StatusTypeDef nRf905GetTxBufferLenght(uint8_t* nRf905Lenght)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
	uint8_t nRf905Aux = 0;
 8003548:	230f      	movs	r3, #15
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]

	Nrf905SetMode(eSbMode);
 8003550:	2002      	movs	r0, #2
 8003552:	f7ff fe45 	bl	80031e0 <Nrf905SetMode>
	Nrf905ResetCs();
 8003556:	2390      	movs	r3, #144	; 0x90
 8003558:	05db      	lsls	r3, r3, #23
 800355a:	2200      	movs	r2, #0
 800355c:	2110      	movs	r1, #16
 800355e:	0018      	movs	r0, r3
 8003560:	f7fd fa0a 	bl	8000978 <HAL_GPIO_WritePin>
	if(nRf905WriteSpi((uint8_t*)eRcRegister4, 1) != HAL_OK)
 8003564:	2101      	movs	r1, #1
 8003566:	2014      	movs	r0, #20
 8003568:	f7ff fde2 	bl	8003130 <nRf905WriteSpi>
 800356c:	1e03      	subs	r3, r0, #0
 800356e:	d001      	beq.n	8003574 <nRf905GetTxBufferLenght+0x34>
	{
		return(HAL_ERROR);
 8003570:	2301      	movs	r3, #1
 8003572:	e02f      	b.n	80035d4 <nRf905GetTxBufferLenght+0x94>
	}
	if(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_READY)
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <nRf905GetTxBufferLenght+0x9c>)
 8003576:	0018      	movs	r0, r3
 8003578:	f7fe ffaa 	bl	80024d0 <HAL_SPI_GetState>
 800357c:	0003      	movs	r3, r0
 800357e:	2b01      	cmp	r3, #1
 8003580:	d114      	bne.n	80035ac <nRf905GetTxBufferLenght+0x6c>
	{
		if(HAL_SPI_Receive(&hspi1, nRf905Aux, 1, 10) != HAL_OK)
 8003582:	230f      	movs	r3, #15
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	0019      	movs	r1, r3
 800358a:	4814      	ldr	r0, [pc, #80]	; (80035dc <nRf905GetTxBufferLenght+0x9c>)
 800358c:	230a      	movs	r3, #10
 800358e:	2201      	movs	r2, #1
 8003590:	f7fe fc04 	bl	8001d9c <HAL_SPI_Receive>
 8003594:	1e03      	subs	r3, r0, #0
 8003596:	d001      	beq.n	800359c <nRf905GetTxBufferLenght+0x5c>
		{
			return(HAL_ERROR);
 8003598:	2301      	movs	r3, #1
 800359a:	e01b      	b.n	80035d4 <nRf905GetTxBufferLenght+0x94>
		}
		while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <nRf905GetTxBufferLenght+0x9c>)
 80035a0:	0018      	movs	r0, r3
 80035a2:	f7fe ff95 	bl	80024d0 <HAL_SPI_GetState>
 80035a6:	0003      	movs	r3, r0
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d1f8      	bne.n	800359e <nRf905GetTxBufferLenght+0x5e>
	}
//	if(nRf905ReadSpi(nRf905Aux, 1) != HAL_OK)
//	{
//		return(HAL_ERROR);
//	}
	Nrf905SetCs();
 80035ac:	2390      	movs	r3, #144	; 0x90
 80035ae:	05db      	lsls	r3, r3, #23
 80035b0:	2201      	movs	r2, #1
 80035b2:	2110      	movs	r1, #16
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7fd f9df 	bl	8000978 <HAL_GPIO_WritePin>
	*nRf905Lenght = nRf905Aux;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	220f      	movs	r2, #15
 80035be:	18ba      	adds	r2, r7, r2
 80035c0:	7812      	ldrb	r2, [r2, #0]
 80035c2:	701a      	strb	r2, [r3, #0]
	*nRf905Lenght &= 0x3F;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	223f      	movs	r2, #63	; 0x3f
 80035ca:	4013      	ands	r3, r2
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	701a      	strb	r2, [r3, #0]
	return(HAL_OK);
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	0018      	movs	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b004      	add	sp, #16
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000148 	.word	0x20000148

080035e0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b08b      	sub	sp, #44	; 0x2c
 80035e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e6:	2414      	movs	r4, #20
 80035e8:	193b      	adds	r3, r7, r4
 80035ea:	0018      	movs	r0, r3
 80035ec:	2314      	movs	r3, #20
 80035ee:	001a      	movs	r2, r3
 80035f0:	2100      	movs	r1, #0
 80035f2:	f000 fbbf 	bl	8003d74 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035f6:	4b75      	ldr	r3, [pc, #468]	; (80037cc <MX_GPIO_Init+0x1ec>)
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	4b74      	ldr	r3, [pc, #464]	; (80037cc <MX_GPIO_Init+0x1ec>)
 80035fc:	2180      	movs	r1, #128	; 0x80
 80035fe:	0309      	lsls	r1, r1, #12
 8003600:	430a      	orrs	r2, r1
 8003602:	615a      	str	r2, [r3, #20]
 8003604:	4b71      	ldr	r3, [pc, #452]	; (80037cc <MX_GPIO_Init+0x1ec>)
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	031b      	lsls	r3, r3, #12
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003612:	4b6e      	ldr	r3, [pc, #440]	; (80037cc <MX_GPIO_Init+0x1ec>)
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	4b6d      	ldr	r3, [pc, #436]	; (80037cc <MX_GPIO_Init+0x1ec>)
 8003618:	2180      	movs	r1, #128	; 0x80
 800361a:	03c9      	lsls	r1, r1, #15
 800361c:	430a      	orrs	r2, r1
 800361e:	615a      	str	r2, [r3, #20]
 8003620:	4b6a      	ldr	r3, [pc, #424]	; (80037cc <MX_GPIO_Init+0x1ec>)
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	03db      	lsls	r3, r3, #15
 8003628:	4013      	ands	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800362e:	4b67      	ldr	r3, [pc, #412]	; (80037cc <MX_GPIO_Init+0x1ec>)
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	4b66      	ldr	r3, [pc, #408]	; (80037cc <MX_GPIO_Init+0x1ec>)
 8003634:	2180      	movs	r1, #128	; 0x80
 8003636:	0289      	lsls	r1, r1, #10
 8003638:	430a      	orrs	r2, r1
 800363a:	615a      	str	r2, [r3, #20]
 800363c:	4b63      	ldr	r3, [pc, #396]	; (80037cc <MX_GPIO_Init+0x1ec>)
 800363e:	695a      	ldr	r2, [r3, #20]
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	029b      	lsls	r3, r3, #10
 8003644:	4013      	ands	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800364a:	4b60      	ldr	r3, [pc, #384]	; (80037cc <MX_GPIO_Init+0x1ec>)
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	4b5f      	ldr	r3, [pc, #380]	; (80037cc <MX_GPIO_Init+0x1ec>)
 8003650:	2180      	movs	r1, #128	; 0x80
 8003652:	02c9      	lsls	r1, r1, #11
 8003654:	430a      	orrs	r2, r1
 8003656:	615a      	str	r2, [r3, #20]
 8003658:	4b5c      	ldr	r3, [pc, #368]	; (80037cc <MX_GPIO_Init+0x1ec>)
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	02db      	lsls	r3, r3, #11
 8003660:	4013      	ands	r3, r2
 8003662:	607b      	str	r3, [r7, #4]
 8003664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(McuPwr_GPIO_Port, McuPwr_Pin, GPIO_PIN_RESET);
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	019b      	lsls	r3, r3, #6
 800366a:	4859      	ldr	r0, [pc, #356]	; (80037d0 <MX_GPIO_Init+0x1f0>)
 800366c:	2200      	movs	r2, #0
 800366e:	0019      	movs	r1, r3
 8003670:	f7fd f982 	bl	8000978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nRF905CS_Pin|nRF905PU_Pin|nRF905TRxEN_Pin|nRF905TxEN_Pin 
 8003674:	4957      	ldr	r1, [pc, #348]	; (80037d4 <MX_GPIO_Init+0x1f4>)
 8003676:	2390      	movs	r3, #144	; 0x90
 8003678:	05db      	lsls	r3, r3, #23
 800367a:	2200      	movs	r2, #0
 800367c:	0018      	movs	r0, r3
 800367e:	f7fd f97b 	bl	8000978 <HAL_GPIO_WritePin>
                          |McuLed4_Pin|McuLed3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, McuLed2_Pin|McuLed1_Pin, GPIO_PIN_RESET);
 8003682:	4b55      	ldr	r3, [pc, #340]	; (80037d8 <MX_GPIO_Init+0x1f8>)
 8003684:	2200      	movs	r2, #0
 8003686:	21c0      	movs	r1, #192	; 0xc0
 8003688:	0018      	movs	r0, r3
 800368a:	f7fd f975 	bl	8000978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = McuPwr_Pin;
 800368e:	193b      	adds	r3, r7, r4
 8003690:	2280      	movs	r2, #128	; 0x80
 8003692:	0192      	lsls	r2, r2, #6
 8003694:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003696:	193b      	adds	r3, r7, r4
 8003698:	2201      	movs	r2, #1
 800369a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800369c:	193b      	adds	r3, r7, r4
 800369e:	2202      	movs	r2, #2
 80036a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a2:	193b      	adds	r3, r7, r4
 80036a4:	2200      	movs	r2, #0
 80036a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(McuPwr_GPIO_Port, &GPIO_InitStruct);
 80036a8:	193b      	adds	r3, r7, r4
 80036aa:	4a49      	ldr	r2, [pc, #292]	; (80037d0 <MX_GPIO_Init+0x1f0>)
 80036ac:	0019      	movs	r1, r3
 80036ae:	0010      	movs	r0, r2
 80036b0:	f7fc ff0c 	bl	80004cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80036b4:	0021      	movs	r1, r4
 80036b6:	187b      	adds	r3, r7, r1
 80036b8:	22c0      	movs	r2, #192	; 0xc0
 80036ba:	0212      	lsls	r2, r2, #8
 80036bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036be:	000c      	movs	r4, r1
 80036c0:	193b      	adds	r3, r7, r4
 80036c2:	2203      	movs	r2, #3
 80036c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	193b      	adds	r3, r7, r4
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036cc:	193b      	adds	r3, r7, r4
 80036ce:	4a40      	ldr	r2, [pc, #256]	; (80037d0 <MX_GPIO_Init+0x1f0>)
 80036d0:	0019      	movs	r1, r3
 80036d2:	0010      	movs	r0, r2
 80036d4:	f7fc fefa 	bl	80004cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036d8:	193b      	adds	r3, r7, r4
 80036da:	2203      	movs	r2, #3
 80036dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036de:	193b      	adds	r3, r7, r4
 80036e0:	2203      	movs	r2, #3
 80036e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e4:	193b      	adds	r3, r7, r4
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036ea:	193b      	adds	r3, r7, r4
 80036ec:	4a3a      	ldr	r2, [pc, #232]	; (80037d8 <MX_GPIO_Init+0x1f8>)
 80036ee:	0019      	movs	r1, r3
 80036f0:	0010      	movs	r0, r2
 80036f2:	f7fc feeb 	bl	80004cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036f6:	193b      	adds	r3, r7, r4
 80036f8:	2201      	movs	r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036fc:	193b      	adds	r3, r7, r4
 80036fe:	2203      	movs	r2, #3
 8003700:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	193b      	adds	r3, r7, r4
 8003704:	2200      	movs	r2, #0
 8003706:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003708:	193a      	adds	r2, r7, r4
 800370a:	2390      	movs	r3, #144	; 0x90
 800370c:	05db      	lsls	r3, r3, #23
 800370e:	0011      	movs	r1, r2
 8003710:	0018      	movs	r0, r3
 8003712:	f7fc fedb 	bl	80004cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = McuIn17_Pin|McuIn18_Pin;
 8003716:	193b      	adds	r3, r7, r4
 8003718:	4a30      	ldr	r2, [pc, #192]	; (80037dc <MX_GPIO_Init+0x1fc>)
 800371a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800371c:	193b      	adds	r3, r7, r4
 800371e:	2200      	movs	r2, #0
 8003720:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003722:	193b      	adds	r3, r7, r4
 8003724:	2201      	movs	r2, #1
 8003726:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003728:	193a      	adds	r2, r7, r4
 800372a:	2390      	movs	r3, #144	; 0x90
 800372c:	05db      	lsls	r3, r3, #23
 800372e:	0011      	movs	r1, r2
 8003730:	0018      	movs	r0, r3
 8003732:	f7fc fecb 	bl	80004cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = nRF905DR_Pin|nRF905CD_Pin;
 8003736:	193b      	adds	r3, r7, r4
 8003738:	220c      	movs	r2, #12
 800373a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800373c:	193b      	adds	r3, r7, r4
 800373e:	2200      	movs	r2, #0
 8003740:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003742:	193b      	adds	r3, r7, r4
 8003744:	2200      	movs	r2, #0
 8003746:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003748:	193a      	adds	r2, r7, r4
 800374a:	2390      	movs	r3, #144	; 0x90
 800374c:	05db      	lsls	r3, r3, #23
 800374e:	0011      	movs	r1, r2
 8003750:	0018      	movs	r0, r3
 8003752:	f7fc febb 	bl	80004cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = nRF905CS_Pin|nRF905PU_Pin|nRF905TRxEN_Pin|nRF905TxEN_Pin 
 8003756:	193b      	adds	r3, r7, r4
 8003758:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <MX_GPIO_Init+0x1f4>)
 800375a:	601a      	str	r2, [r3, #0]
                          |McuLed4_Pin|McuLed3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800375c:	193b      	adds	r3, r7, r4
 800375e:	2201      	movs	r2, #1
 8003760:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	193b      	adds	r3, r7, r4
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003768:	193b      	adds	r3, r7, r4
 800376a:	2200      	movs	r2, #0
 800376c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800376e:	193a      	adds	r2, r7, r4
 8003770:	2390      	movs	r3, #144	; 0x90
 8003772:	05db      	lsls	r3, r3, #23
 8003774:	0011      	movs	r1, r2
 8003776:	0018      	movs	r0, r3
 8003778:	f7fc fea8 	bl	80004cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = McuIn1_Pin|McuIn2_Pin|McuIn3_Pin|McuIn11_Pin 
 800377c:	0021      	movs	r1, r4
 800377e:	187b      	adds	r3, r7, r1
 8003780:	4a17      	ldr	r2, [pc, #92]	; (80037e0 <MX_GPIO_Init+0x200>)
 8003782:	601a      	str	r2, [r3, #0]
                          |McuIn12_Pin|McuIn13_Pin|McuIn14_Pin|McuIn15_Pin 
                          |McuIn16_Pin|McuIn4_Pin|McuIn5_Pin|McuIn6_Pin 
                          |McuIn7_Pin|McuIn8_Pin|McuIn9_Pin|McuIn10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003784:	187b      	adds	r3, r7, r1
 8003786:	2200      	movs	r2, #0
 8003788:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800378a:	187b      	adds	r3, r7, r1
 800378c:	2201      	movs	r2, #1
 800378e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003790:	000c      	movs	r4, r1
 8003792:	187b      	adds	r3, r7, r1
 8003794:	4a13      	ldr	r2, [pc, #76]	; (80037e4 <MX_GPIO_Init+0x204>)
 8003796:	0019      	movs	r1, r3
 8003798:	0010      	movs	r0, r2
 800379a:	f7fc fe97 	bl	80004cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = McuLed2_Pin|McuLed1_Pin;
 800379e:	0021      	movs	r1, r4
 80037a0:	187b      	adds	r3, r7, r1
 80037a2:	22c0      	movs	r2, #192	; 0xc0
 80037a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037a6:	187b      	adds	r3, r7, r1
 80037a8:	2201      	movs	r2, #1
 80037aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ac:	187b      	adds	r3, r7, r1
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b2:	187b      	adds	r3, r7, r1
 80037b4:	2200      	movs	r2, #0
 80037b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037b8:	187b      	adds	r3, r7, r1
 80037ba:	4a07      	ldr	r2, [pc, #28]	; (80037d8 <MX_GPIO_Init+0x1f8>)
 80037bc:	0019      	movs	r1, r3
 80037be:	0010      	movs	r0, r2
 80037c0:	f7fc fe84 	bl	80004cc <HAL_GPIO_Init>

}
 80037c4:	46c0      	nop			; (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b00b      	add	sp, #44	; 0x2c
 80037ca:	bd90      	pop	{r4, r7, pc}
 80037cc:	40021000 	.word	0x40021000
 80037d0:	48000800 	.word	0x48000800
 80037d4:	00001f10 	.word	0x00001f10
 80037d8:	48001400 	.word	0x48001400
 80037dc:	00008002 	.word	0x00008002
 80037e0:	0000ffff 	.word	0x0000ffff
 80037e4:	48000400 	.word	0x48000400

080037e8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint32_t test = 123;
 80037ee:	237b      	movs	r3, #123	; 0x7b
 80037f0:	607b      	str	r3, [r7, #4]
	uint8_t tst = 25;
 80037f2:	1cfb      	adds	r3, r7, #3
 80037f4:	2219      	movs	r2, #25
 80037f6:	701a      	strb	r2, [r3, #0]


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80037f8:	f7fc fd12 	bl	8000220 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80037fc:	f000 f860 	bl	80038c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003800:	f7ff feee 	bl	80035e0 <MX_GPIO_Init>
	MX_SPI1_Init();
 8003804:	f000 f908 	bl	8003a18 <MX_SPI1_Init>
	MX_TIM6_Init();
 8003808:	f000 fa1e 	bl	8003c48 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */

	if(nRf905SetConfig() != HAL_OK)
 800380c:	f7ff fd98 	bl	8003340 <nRf905SetConfig>
 8003810:	1e03      	subs	r3, r0, #0
 8003812:	d000      	beq.n	8003816 <main+0x2e>
	{
		while(1);
 8003814:	e7fe      	b.n	8003814 <main+0x2c>
//	{
//		while(1);
//	}

	// ok
	if(nRf905SetTxAddr(123896) != HAL_OK)
 8003816:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <main+0xc8>)
 8003818:	0018      	movs	r0, r3
 800381a:	f7ff fd97 	bl	800334c <nRf905SetTxAddr>
 800381e:	1e03      	subs	r3, r0, #0
 8003820:	d000      	beq.n	8003824 <main+0x3c>
	{
		while(1);
 8003822:	e7fe      	b.n	8003822 <main+0x3a>
	}
	//ok
	if(nRf905GetTxAddr(&test) != HAL_OK)
 8003824:	1d3b      	adds	r3, r7, #4
 8003826:	0018      	movs	r0, r3
 8003828:	f7ff fdbe 	bl	80033a8 <nRf905GetTxAddr>
 800382c:	1e03      	subs	r3, r0, #0
 800382e:	d000      	beq.n	8003832 <main+0x4a>
	{
		while(1);
 8003830:	e7fe      	b.n	8003830 <main+0x48>
	}
	// ok
	if(nRf905SetRxAddr(612321) != HAL_OK)
 8003832:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <main+0xcc>)
 8003834:	0018      	movs	r0, r3
 8003836:	f7ff fde6 	bl	8003406 <nRf905SetRxAddr>
 800383a:	1e03      	subs	r3, r0, #0
 800383c:	d000      	beq.n	8003840 <main+0x58>
	{
		while(1);
 800383e:	e7fe      	b.n	800383e <main+0x56>
	}
	//ok
	if(nRf905GetRxAddr(&test) != HAL_OK)
 8003840:	1d3b      	adds	r3, r7, #4
 8003842:	0018      	movs	r0, r3
 8003844:	f7ff fe0d 	bl	8003462 <nRf905GetRxAddr>
 8003848:	1e03      	subs	r3, r0, #0
 800384a:	d000      	beq.n	800384e <main+0x66>
	{
		while(1);
 800384c:	e7fe      	b.n	800384c <main+0x64>
	}

	//
	if(nrf905SetTxBufferLenght(15) != HAL_OK)
 800384e:	200f      	movs	r0, #15
 8003850:	f7ff fe34 	bl	80034bc <nrf905SetTxBufferLenght>
 8003854:	1e03      	subs	r3, r0, #0
 8003856:	d000      	beq.n	800385a <main+0x72>
	{
		while(1);
 8003858:	e7fe      	b.n	8003858 <main+0x70>
	}
	//
	if(nRf905GetTxBufferLenght(&tst) != HAL_OK)
 800385a:	1cfb      	adds	r3, r7, #3
 800385c:	0018      	movs	r0, r3
 800385e:	f7ff fe6f 	bl	8003540 <nRf905GetTxBufferLenght>
 8003862:	1e03      	subs	r3, r0, #0
 8003864:	d000      	beq.n	8003868 <main+0x80>
	{
		while(1);
 8003866:	e7fe      	b.n	8003866 <main+0x7e>
//	if(nRf905GetRxBufferLenght(&tst) != HAL_OK)
//	{
//		while(1);
//	}

	if(HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)
 8003868:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <main+0xd0>)
 800386a:	0018      	movs	r0, r3
 800386c:	f7ff f868 	bl	8002940 <HAL_TIM_Base_Start_IT>
 8003870:	1e03      	subs	r3, r0, #0
 8003872:	d000      	beq.n	8003876 <main+0x8e>
	{
		while(1);
 8003874:	e7fe      	b.n	8003874 <main+0x8c>
	}

	InputsInit ();
 8003876:	f7ff fad5 	bl	8002e24 <InputsInit>
//		if(nRf905SetTxAddr(13579) != HAL_OK)
//		{
//			while(1);
//		}

		if(InputsGetState (In01))
 800387a:	2000      	movs	r0, #0
 800387c:	f7ff fb7e 	bl	8002f7c <InputsGetState>
 8003880:	1e03      	subs	r3, r0, #0
 8003882:	d006      	beq.n	8003892 <main+0xaa>
		{
			HAL_GPIO_WritePin(McuLed1_GPIO_Port, McuLed1_Pin, GPIO_PIN_SET);
 8003884:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <main+0xd4>)
 8003886:	2201      	movs	r2, #1
 8003888:	2180      	movs	r1, #128	; 0x80
 800388a:	0018      	movs	r0, r3
 800388c:	f7fd f874 	bl	8000978 <HAL_GPIO_WritePin>
 8003890:	e005      	b.n	800389e <main+0xb6>
		}
		else
		{
			HAL_GPIO_WritePin(McuLed1_GPIO_Port, McuLed1_Pin, GPIO_PIN_RESET);
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <main+0xd4>)
 8003894:	2200      	movs	r2, #0
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	0018      	movs	r0, r3
 800389a:	f7fd f86d 	bl	8000978 <HAL_GPIO_WritePin>
		}

		HAL_GPIO_TogglePin(McuLed2_GPIO_Port, McuLed2_Pin);
 800389e:	4b07      	ldr	r3, [pc, #28]	; (80038bc <main+0xd4>)
 80038a0:	2140      	movs	r1, #64	; 0x40
 80038a2:	0018      	movs	r0, r3
 80038a4:	f7fd f8a8 	bl	80009f8 <HAL_GPIO_TogglePin>

		HAL_Delay(200);
 80038a8:	20c8      	movs	r0, #200	; 0xc8
 80038aa:	f7fc fcff 	bl	80002ac <HAL_Delay>
		if(InputsGetState (In01))
 80038ae:	e7e4      	b.n	800387a <main+0x92>
 80038b0:	0001e3f8 	.word	0x0001e3f8
 80038b4:	000957e1 	.word	0x000957e1
 80038b8:	200001ac 	.word	0x200001ac
 80038bc:	48001400 	.word	0x48001400

080038c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b091      	sub	sp, #68	; 0x44
 80038c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038c6:	2410      	movs	r4, #16
 80038c8:	193b      	adds	r3, r7, r4
 80038ca:	0018      	movs	r0, r3
 80038cc:	2330      	movs	r3, #48	; 0x30
 80038ce:	001a      	movs	r2, r3
 80038d0:	2100      	movs	r1, #0
 80038d2:	f000 fa4f 	bl	8003d74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038d6:	003b      	movs	r3, r7
 80038d8:	0018      	movs	r0, r3
 80038da:	2310      	movs	r3, #16
 80038dc:	001a      	movs	r2, r3
 80038de:	2100      	movs	r1, #0
 80038e0:	f000 fa48 	bl	8003d74 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038e4:	0021      	movs	r1, r4
 80038e6:	187b      	adds	r3, r7, r1
 80038e8:	2202      	movs	r2, #2
 80038ea:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038ec:	187b      	adds	r3, r7, r1
 80038ee:	2201      	movs	r2, #1
 80038f0:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038f2:	187b      	adds	r3, r7, r1
 80038f4:	2210      	movs	r2, #16
 80038f6:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80038f8:	187b      	adds	r3, r7, r1
 80038fa:	2200      	movs	r2, #0
 80038fc:	621a      	str	r2, [r3, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038fe:	187b      	adds	r3, r7, r1
 8003900:	0018      	movs	r0, r3
 8003902:	f7fd f89d 	bl	8000a40 <HAL_RCC_OscConfig>
 8003906:	1e03      	subs	r3, r0, #0
 8003908:	d001      	beq.n	800390e <SystemClock_Config+0x4e>
	{
		Error_Handler();
 800390a:	f000 f877 	bl	80039fc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800390e:	003b      	movs	r3, r7
 8003910:	2207      	movs	r2, #7
 8003912:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003914:	003b      	movs	r3, r7
 8003916:	2200      	movs	r2, #0
 8003918:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800391a:	003b      	movs	r3, r7
 800391c:	2200      	movs	r2, #0
 800391e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003920:	003b      	movs	r3, r7
 8003922:	2200      	movs	r2, #0
 8003924:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003926:	003b      	movs	r3, r7
 8003928:	2100      	movs	r1, #0
 800392a:	0018      	movs	r0, r3
 800392c:	f7fd fcf6 	bl	800131c <HAL_RCC_ClockConfig>
 8003930:	1e03      	subs	r3, r0, #0
 8003932:	d001      	beq.n	8003938 <SystemClock_Config+0x78>
	{
		Error_Handler();
 8003934:	f000 f862 	bl	80039fc <Error_Handler>
	}
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b011      	add	sp, #68	; 0x44
 800393e:	bd90      	pop	{r4, r7, pc}

08003940 <HAL_TIM_PeriodElapsedCallback>:
 * This interrupt run at 100Hz
 * Inputs capture
 * Power and sleep control
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	uint8_t cnt;
	static int16_t McuPwrCnt;
	if (htim->Instance == TIM6)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a28      	ldr	r2, [pc, #160]	; (80039f0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d14a      	bne.n	80039e8 <HAL_TIM_PeriodElapsedCallback+0xa8>
	{

		InputsPeriodic();
 8003952:	f7ff fb35 	bl	8002fc0 <InputsPeriodic>

		for(cnt = 0; cnt <= 10; cnt++)
 8003956:	230f      	movs	r3, #15
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	e011      	b.n	8003984 <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			if(InputsGetState (cnt))
 8003960:	230f      	movs	r3, #15
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	0018      	movs	r0, r3
 8003968:	f7ff fb08 	bl	8002f7c <InputsGetState>
 800396c:	1e03      	subs	r3, r0, #0
 800396e:	d003      	beq.n	8003978 <HAL_TIM_PeriodElapsedCallback+0x38>
			{
				McuPwrCnt = 500;
 8003970:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003972:	22fa      	movs	r2, #250	; 0xfa
 8003974:	0052      	lsls	r2, r2, #1
 8003976:	801a      	strh	r2, [r3, #0]
		for(cnt = 0; cnt <= 10; cnt++)
 8003978:	210f      	movs	r1, #15
 800397a:	187b      	adds	r3, r7, r1
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	187b      	adds	r3, r7, r1
 8003980:	3201      	adds	r2, #1
 8003982:	701a      	strb	r2, [r3, #0]
 8003984:	230f      	movs	r3, #15
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b0a      	cmp	r3, #10
 800398c:	d9e8      	bls.n	8003960 <HAL_TIM_PeriodElapsedCallback+0x20>
			}
		}

		if(McuPwrCnt > 0)
 800398e:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003990:	2200      	movs	r2, #0
 8003992:	5e9b      	ldrsh	r3, [r3, r2]
 8003994:	2b00      	cmp	r3, #0
 8003996:	dd18      	ble.n	80039ca <HAL_TIM_PeriodElapsedCallback+0x8a>
		{
			McuPwrCnt --;
 8003998:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800399a:	2200      	movs	r2, #0
 800399c:	5e9b      	ldrsh	r3, [r3, r2]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	b21a      	sxth	r2, r3
 80039a6:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80039a8:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(McuPwr_GPIO_Port, McuPwr_Pin, GPIO_PIN_SET);
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	019b      	lsls	r3, r3, #6
 80039ae:	4812      	ldr	r0, [pc, #72]	; (80039f8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	0019      	movs	r1, r3
 80039b4:	f7fc ffe0 	bl	8000978 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(McuLed4_GPIO_Port, McuLed4_Pin, GPIO_PIN_SET);
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	0119      	lsls	r1, r3, #4
 80039bc:	2390      	movs	r3, #144	; 0x90
 80039be:	05db      	lsls	r3, r3, #23
 80039c0:	2201      	movs	r2, #1
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7fc ffd8 	bl	8000978 <HAL_GPIO_WritePin>
		{
			HAL_GPIO_WritePin(McuPwr_GPIO_Port, McuPwr_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(McuLed4_GPIO_Port, McuLed4_Pin, GPIO_PIN_RESET);
		}
	}
}
 80039c8:	e00e      	b.n	80039e8 <HAL_TIM_PeriodElapsedCallback+0xa8>
			HAL_GPIO_WritePin(McuPwr_GPIO_Port, McuPwr_Pin, GPIO_PIN_RESET);
 80039ca:	2380      	movs	r3, #128	; 0x80
 80039cc:	019b      	lsls	r3, r3, #6
 80039ce:	480a      	ldr	r0, [pc, #40]	; (80039f8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	0019      	movs	r1, r3
 80039d4:	f7fc ffd0 	bl	8000978 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(McuLed4_GPIO_Port, McuLed4_Pin, GPIO_PIN_RESET);
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	0119      	lsls	r1, r3, #4
 80039dc:	2390      	movs	r3, #144	; 0x90
 80039de:	05db      	lsls	r3, r3, #23
 80039e0:	2200      	movs	r2, #0
 80039e2:	0018      	movs	r0, r3
 80039e4:	f7fc ffc8 	bl	8000978 <HAL_GPIO_WritePin>
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b004      	add	sp, #16
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40001000 	.word	0x40001000
 80039f4:	20000020 	.word	0x20000020
 80039f8:	48000800 	.word	0x48000800

080039fc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003a00:	46c0      	nop			; (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(char *file, uint32_t line)
{ 
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b002      	add	sp, #8
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <MX_SPI1_Init+0x74>)
 8003a1e:	4a1c      	ldr	r2, [pc, #112]	; (8003a90 <MX_SPI1_Init+0x78>)
 8003a20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a22:	4b1a      	ldr	r3, [pc, #104]	; (8003a8c <MX_SPI1_Init+0x74>)
 8003a24:	2282      	movs	r2, #130	; 0x82
 8003a26:	0052      	lsls	r2, r2, #1
 8003a28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a2a:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <MX_SPI1_Init+0x74>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a30:	4b16      	ldr	r3, [pc, #88]	; (8003a8c <MX_SPI1_Init+0x74>)
 8003a32:	22e0      	movs	r2, #224	; 0xe0
 8003a34:	00d2      	lsls	r2, r2, #3
 8003a36:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a38:	4b14      	ldr	r3, [pc, #80]	; (8003a8c <MX_SPI1_Init+0x74>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a3e:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <MX_SPI1_Init+0x74>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <MX_SPI1_Init+0x74>)
 8003a46:	2280      	movs	r2, #128	; 0x80
 8003a48:	0092      	lsls	r2, r2, #2
 8003a4a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <MX_SPI1_Init+0x74>)
 8003a4e:	2210      	movs	r2, #16
 8003a50:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a52:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <MX_SPI1_Init+0x74>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a58:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <MX_SPI1_Init+0x74>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <MX_SPI1_Init+0x74>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <MX_SPI1_Init+0x74>)
 8003a66:	2207      	movs	r2, #7
 8003a68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a6a:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <MX_SPI1_Init+0x74>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <MX_SPI1_Init+0x74>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <MX_SPI1_Init+0x74>)
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f7fd fe39 	bl	80016f0 <HAL_SPI_Init>
 8003a7e:	1e03      	subs	r3, r0, #0
 8003a80:	d001      	beq.n	8003a86 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003a82:	f7ff ffbb 	bl	80039fc <Error_Handler>
  }

}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20000148 	.word	0x20000148
 8003a90:	40013000 	.word	0x40013000

08003a94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08a      	sub	sp, #40	; 0x28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9c:	2314      	movs	r3, #20
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	2314      	movs	r3, #20
 8003aa4:	001a      	movs	r2, r3
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	f000 f964 	bl	8003d74 <memset>
  if(spiHandle->Instance==SPI1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a1c      	ldr	r2, [pc, #112]	; (8003b24 <HAL_SPI_MspInit+0x90>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d132      	bne.n	8003b1c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ab6:	4b1c      	ldr	r3, [pc, #112]	; (8003b28 <HAL_SPI_MspInit+0x94>)
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <HAL_SPI_MspInit+0x94>)
 8003abc:	2180      	movs	r1, #128	; 0x80
 8003abe:	0149      	lsls	r1, r1, #5
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	619a      	str	r2, [r3, #24]
 8003ac4:	4b18      	ldr	r3, [pc, #96]	; (8003b28 <HAL_SPI_MspInit+0x94>)
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	2380      	movs	r3, #128	; 0x80
 8003aca:	015b      	lsls	r3, r3, #5
 8003acc:	4013      	ands	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad2:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <HAL_SPI_MspInit+0x94>)
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <HAL_SPI_MspInit+0x94>)
 8003ad8:	2180      	movs	r1, #128	; 0x80
 8003ada:	0289      	lsls	r1, r1, #10
 8003adc:	430a      	orrs	r2, r1
 8003ade:	615a      	str	r2, [r3, #20]
 8003ae0:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <HAL_SPI_MspInit+0x94>)
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	029b      	lsls	r3, r3, #10
 8003ae8:	4013      	ands	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003aee:	2114      	movs	r1, #20
 8003af0:	187b      	adds	r3, r7, r1
 8003af2:	22e0      	movs	r2, #224	; 0xe0
 8003af4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af6:	187b      	adds	r3, r7, r1
 8003af8:	2202      	movs	r2, #2
 8003afa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	187b      	adds	r3, r7, r1
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	2203      	movs	r2, #3
 8003b06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0e:	187a      	adds	r2, r7, r1
 8003b10:	2390      	movs	r3, #144	; 0x90
 8003b12:	05db      	lsls	r3, r3, #23
 8003b14:	0011      	movs	r1, r2
 8003b16:	0018      	movs	r0, r3
 8003b18:	f7fc fcd8 	bl	80004cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b00a      	add	sp, #40	; 0x28
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40013000 	.word	0x40013000
 8003b28:	40021000 	.word	0x40021000

08003b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b32:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <HAL_MspInit+0x44>)
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <HAL_MspInit+0x44>)
 8003b38:	2101      	movs	r1, #1
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	619a      	str	r2, [r3, #24]
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <HAL_MspInit+0x44>)
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2201      	movs	r2, #1
 8003b44:	4013      	ands	r3, r2
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <HAL_MspInit+0x44>)
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <HAL_MspInit+0x44>)
 8003b50:	2180      	movs	r1, #128	; 0x80
 8003b52:	0549      	lsls	r1, r1, #21
 8003b54:	430a      	orrs	r2, r1
 8003b56:	61da      	str	r2, [r3, #28]
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <HAL_MspInit+0x44>)
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	055b      	lsls	r3, r3, #21
 8003b60:	4013      	ands	r3, r2
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	40021000 	.word	0x40021000

08003b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b82:	e7fe      	b.n	8003b82 <HardFault_Handler+0x4>

08003b84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b88:	46c0      	nop			; (mov r8, r8)
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b9c:	f7fc fb70 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ba0:	46c0      	nop			; (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bac:	4b03      	ldr	r3, [pc, #12]	; (8003bbc <TIM6_IRQHandler+0x14>)
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f7fe ff1a 	bl	80029e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003bb4:	46c0      	nop			; (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	200001ac 	.word	0x200001ac

08003bc0 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003bc4:	4b1a      	ldr	r3, [pc, #104]	; (8003c30 <SystemInit+0x70>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4b19      	ldr	r3, [pc, #100]	; (8003c30 <SystemInit+0x70>)
 8003bca:	2101      	movs	r1, #1
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003bd0:	4b17      	ldr	r3, [pc, #92]	; (8003c30 <SystemInit+0x70>)
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	4b16      	ldr	r3, [pc, #88]	; (8003c30 <SystemInit+0x70>)
 8003bd6:	4917      	ldr	r1, [pc, #92]	; (8003c34 <SystemInit+0x74>)
 8003bd8:	400a      	ands	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8003bdc:	4b14      	ldr	r3, [pc, #80]	; (8003c30 <SystemInit+0x70>)
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <SystemInit+0x70>)
 8003be2:	4915      	ldr	r1, [pc, #84]	; (8003c38 <SystemInit+0x78>)
 8003be4:	400a      	ands	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003be8:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <SystemInit+0x70>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <SystemInit+0x70>)
 8003bee:	4913      	ldr	r1, [pc, #76]	; (8003c3c <SystemInit+0x7c>)
 8003bf0:	400a      	ands	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003bf4:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <SystemInit+0x70>)
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	4b0d      	ldr	r3, [pc, #52]	; (8003c30 <SystemInit+0x70>)
 8003bfa:	4911      	ldr	r1, [pc, #68]	; (8003c40 <SystemInit+0x80>)
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <SystemInit+0x70>)
 8003c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c04:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <SystemInit+0x70>)
 8003c06:	210f      	movs	r1, #15
 8003c08:	438a      	bics	r2, r1
 8003c0a:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <SystemInit+0x70>)
 8003c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c10:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <SystemInit+0x70>)
 8003c12:	490c      	ldr	r1, [pc, #48]	; (8003c44 <SystemInit+0x84>)
 8003c14:	400a      	ands	r2, r1
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <SystemInit+0x70>)
 8003c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <SystemInit+0x70>)
 8003c1e:	2101      	movs	r1, #1
 8003c20:	438a      	bics	r2, r1
 8003c22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003c24:	4b02      	ldr	r3, [pc, #8]	; (8003c30 <SystemInit+0x70>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	609a      	str	r2, [r3, #8]

}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40021000 	.word	0x40021000
 8003c34:	08ffb80c 	.word	0x08ffb80c
 8003c38:	fef6ffff 	.word	0xfef6ffff
 8003c3c:	fffbffff 	.word	0xfffbffff
 8003c40:	ffc0ffff 	.word	0xffc0ffff
 8003c44:	fffffeec 	.word	0xfffffeec

08003c48 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0

  htim6.Instance = TIM6;
 8003c4c:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <MX_TIM6_Init+0x3c>)
 8003c4e:	4a0e      	ldr	r2, [pc, #56]	; (8003c88 <MX_TIM6_Init+0x40>)
 8003c50:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000;
 8003c52:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <MX_TIM6_Init+0x3c>)
 8003c54:	22fa      	movs	r2, #250	; 0xfa
 8003c56:	0152      	lsls	r2, r2, #5
 8003c58:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c5a:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <MX_TIM6_Init+0x3c>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8003c60:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <MX_TIM6_Init+0x3c>)
 8003c62:	220a      	movs	r2, #10
 8003c64:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <MX_TIM6_Init+0x3c>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <MX_TIM6_Init+0x3c>)
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f7fe fdc6 	bl	8002800 <HAL_TIM_Base_Init>
 8003c74:	1e03      	subs	r3, r0, #0
 8003c76:	d001      	beq.n	8003c7c <MX_TIM6_Init+0x34>
  {
    Error_Handler();
 8003c78:	f7ff fec0 	bl	80039fc <Error_Handler>
  }

}
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	200001ac 	.word	0x200001ac
 8003c88:	40001000 	.word	0x40001000

08003c8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <HAL_TIM_Base_MspInit+0x44>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d113      	bne.n	8003cc6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <HAL_TIM_Base_MspInit+0x48>)
 8003ca0:	69da      	ldr	r2, [r3, #28]
 8003ca2:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <HAL_TIM_Base_MspInit+0x48>)
 8003ca4:	2110      	movs	r1, #16
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	61da      	str	r2, [r3, #28]
 8003caa:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <HAL_TIM_Base_MspInit+0x48>)
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	2210      	movs	r2, #16
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2100      	movs	r1, #0
 8003cba:	2011      	movs	r0, #17
 8003cbc:	f7fc fbbc 	bl	8000438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003cc0:	2011      	movs	r0, #17
 8003cc2:	f7fc fbd9 	bl	8000478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b004      	add	sp, #16
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	40001000 	.word	0x40001000
 8003cd4:	40021000 	.word	0x40021000

08003cd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003cd8:	480d      	ldr	r0, [pc, #52]	; (8003d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003cda:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cdc:	480d      	ldr	r0, [pc, #52]	; (8003d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8003cde:	490e      	ldr	r1, [pc, #56]	; (8003d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ce0:	4a0e      	ldr	r2, [pc, #56]	; (8003d1c <LoopForever+0xe>)
  movs r3, #0
 8003ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ce4:	e002      	b.n	8003cec <LoopCopyDataInit>

08003ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cea:	3304      	adds	r3, #4

08003cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cf0:	d3f9      	bcc.n	8003ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cf2:	4a0b      	ldr	r2, [pc, #44]	; (8003d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cf4:	4c0b      	ldr	r4, [pc, #44]	; (8003d24 <LoopForever+0x16>)
  movs r3, #0
 8003cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cf8:	e001      	b.n	8003cfe <LoopFillZerobss>

08003cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cfc:	3204      	adds	r2, #4

08003cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d00:	d3fb      	bcc.n	8003cfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003d02:	f7ff ff5d 	bl	8003bc0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003d06:	f000 f811 	bl	8003d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d0a:	f7ff fd6d 	bl	80037e8 <main>

08003d0e <LoopForever>:

LoopForever:
    b LoopForever
 8003d0e:	e7fe      	b.n	8003d0e <LoopForever>
  ldr   r0, =_estack
 8003d10:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d18:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8003d1c:	08003f08 	.word	0x08003f08
  ldr r2, =_sbss
 8003d20:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8003d24:	200001ec 	.word	0x200001ec

08003d28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d28:	e7fe      	b.n	8003d28 <ADC1_IRQHandler>
	...

08003d2c <__libc_init_array>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	2600      	movs	r6, #0
 8003d30:	4d0c      	ldr	r5, [pc, #48]	; (8003d64 <__libc_init_array+0x38>)
 8003d32:	4c0d      	ldr	r4, [pc, #52]	; (8003d68 <__libc_init_array+0x3c>)
 8003d34:	1b64      	subs	r4, r4, r5
 8003d36:	10a4      	asrs	r4, r4, #2
 8003d38:	42a6      	cmp	r6, r4
 8003d3a:	d109      	bne.n	8003d50 <__libc_init_array+0x24>
 8003d3c:	2600      	movs	r6, #0
 8003d3e:	f000 f821 	bl	8003d84 <_init>
 8003d42:	4d0a      	ldr	r5, [pc, #40]	; (8003d6c <__libc_init_array+0x40>)
 8003d44:	4c0a      	ldr	r4, [pc, #40]	; (8003d70 <__libc_init_array+0x44>)
 8003d46:	1b64      	subs	r4, r4, r5
 8003d48:	10a4      	asrs	r4, r4, #2
 8003d4a:	42a6      	cmp	r6, r4
 8003d4c:	d105      	bne.n	8003d5a <__libc_init_array+0x2e>
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	00b3      	lsls	r3, r6, #2
 8003d52:	58eb      	ldr	r3, [r5, r3]
 8003d54:	4798      	blx	r3
 8003d56:	3601      	adds	r6, #1
 8003d58:	e7ee      	b.n	8003d38 <__libc_init_array+0xc>
 8003d5a:	00b3      	lsls	r3, r6, #2
 8003d5c:	58eb      	ldr	r3, [r5, r3]
 8003d5e:	4798      	blx	r3
 8003d60:	3601      	adds	r6, #1
 8003d62:	e7f2      	b.n	8003d4a <__libc_init_array+0x1e>
 8003d64:	08003f00 	.word	0x08003f00
 8003d68:	08003f00 	.word	0x08003f00
 8003d6c:	08003f00 	.word	0x08003f00
 8003d70:	08003f04 	.word	0x08003f04

08003d74 <memset>:
 8003d74:	0003      	movs	r3, r0
 8003d76:	1812      	adds	r2, r2, r0
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <memset+0xa>
 8003d7c:	4770      	bx	lr
 8003d7e:	7019      	strb	r1, [r3, #0]
 8003d80:	3301      	adds	r3, #1
 8003d82:	e7f9      	b.n	8003d78 <memset+0x4>

08003d84 <_init>:
 8003d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8a:	bc08      	pop	{r3}
 8003d8c:	469e      	mov	lr, r3
 8003d8e:	4770      	bx	lr

08003d90 <_fini>:
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d96:	bc08      	pop	{r3}
 8003d98:	469e      	mov	lr, r3
 8003d9a:	4770      	bx	lr
