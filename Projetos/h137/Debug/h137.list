
h137.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006280  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800633c  0800633c  0001633c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006388  08006388  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08006388  08006388  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006388  08006388  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006388  08006388  00016388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800638c  0800638c  0001638c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000068  080063f8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  080063f8  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025a1e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000047b2  00000000  00000000  00045aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001550  00000000  00000000  0004a260  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001348  00000000  00000000  0004b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e9f7  00000000  00000000  0004caf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017cdf  00000000  00000000  0006b4ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c6bd  00000000  00000000  000831ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f88b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004be4  00000000  00000000  0011f908  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006324 	.word	0x08006324

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08006324 	.word	0x08006324

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_lmul>:
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	46ce      	mov	lr, r9
 8000220:	4647      	mov	r7, r8
 8000222:	0415      	lsls	r5, r2, #16
 8000224:	0c2d      	lsrs	r5, r5, #16
 8000226:	002e      	movs	r6, r5
 8000228:	b580      	push	{r7, lr}
 800022a:	0407      	lsls	r7, r0, #16
 800022c:	0c14      	lsrs	r4, r2, #16
 800022e:	0c3f      	lsrs	r7, r7, #16
 8000230:	4699      	mov	r9, r3
 8000232:	0c03      	lsrs	r3, r0, #16
 8000234:	437e      	muls	r6, r7
 8000236:	435d      	muls	r5, r3
 8000238:	4367      	muls	r7, r4
 800023a:	4363      	muls	r3, r4
 800023c:	197f      	adds	r7, r7, r5
 800023e:	0c34      	lsrs	r4, r6, #16
 8000240:	19e4      	adds	r4, r4, r7
 8000242:	469c      	mov	ip, r3
 8000244:	42a5      	cmp	r5, r4
 8000246:	d903      	bls.n	8000250 <__aeabi_lmul+0x34>
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	025b      	lsls	r3, r3, #9
 800024c:	4698      	mov	r8, r3
 800024e:	44c4      	add	ip, r8
 8000250:	464b      	mov	r3, r9
 8000252:	4343      	muls	r3, r0
 8000254:	4351      	muls	r1, r2
 8000256:	0c25      	lsrs	r5, r4, #16
 8000258:	0436      	lsls	r6, r6, #16
 800025a:	4465      	add	r5, ip
 800025c:	0c36      	lsrs	r6, r6, #16
 800025e:	0424      	lsls	r4, r4, #16
 8000260:	19a4      	adds	r4, r4, r6
 8000262:	195b      	adds	r3, r3, r5
 8000264:	1859      	adds	r1, r3, r1
 8000266:	0020      	movs	r0, r4
 8000268:	bc0c      	pop	{r2, r3}
 800026a:	4690      	mov	r8, r2
 800026c:	4699      	mov	r9, r3
 800026e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000270 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	4b07      	ldr	r3, [pc, #28]	; (8000294 <HAL_Init+0x24>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <HAL_Init+0x24>)
 800027a:	2110      	movs	r1, #16
 800027c:	430a      	orrs	r2, r1
 800027e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000280:	2000      	movs	r0, #0
 8000282:	f005 fab9 	bl	80057f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000286:	f005 fa93 	bl	80057b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800028a:	2300      	movs	r3, #0
}
 800028c:	0018      	movs	r0, r3
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	40022000 	.word	0x40022000

08000298 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  uwTick++;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <HAL_IncTick+0x14>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	1c5a      	adds	r2, r3, #1
 80002a2:	4b02      	ldr	r3, [pc, #8]	; (80002ac <HAL_IncTick+0x14>)
 80002a4:	601a      	str	r2, [r3, #0]
}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000090 	.word	0x20000090

080002b0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  return uwTick;
 80002b4:	4b02      	ldr	r3, [pc, #8]	; (80002c0 <HAL_GetTick+0x10>)
 80002b6:	681b      	ldr	r3, [r3, #0]
}
 80002b8:	0018      	movs	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	20000090 	.word	0x20000090

080002c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002cc:	f7ff fff0 	bl	80002b0 <HAL_GetTick>
 80002d0:	0003      	movs	r3, r0
 80002d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	3301      	adds	r3, #1
 80002dc:	d002      	beq.n	80002e4 <HAL_Delay+0x20>
  {
     wait++;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	3301      	adds	r3, #1
 80002e2:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002e4:	46c0      	nop			; (mov r8, r8)
 80002e6:	f7ff ffe3 	bl	80002b0 <HAL_GetTick>
 80002ea:	0002      	movs	r2, r0
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	1ad3      	subs	r3, r2, r3
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d8f7      	bhi.n	80002e6 <HAL_Delay+0x22>
  {
  }
}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	46bd      	mov	sp, r7
 80002fa:	b004      	add	sp, #16
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000308:	230f      	movs	r3, #15
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000310:	2300      	movs	r3, #0
 8000312:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d101      	bne.n	800031e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800031a:	2301      	movs	r3, #1
 800031c:	e124      	b.n	8000568 <HAL_ADC_Init+0x268>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000322:	2b00      	cmp	r3, #0
 8000324:	d10a      	bne.n	800033c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2200      	movs	r2, #0
 800032a:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2240      	movs	r2, #64	; 0x40
 8000330:	2100      	movs	r1, #0
 8000332:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	0018      	movs	r0, r3
 8000338:	f004 fc60 	bl	8004bfc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000340:	2210      	movs	r2, #16
 8000342:	4013      	ands	r3, r2
 8000344:	d000      	beq.n	8000348 <HAL_ADC_Init+0x48>
 8000346:	e102      	b.n	800054e <HAL_ADC_Init+0x24e>
 8000348:	230f      	movs	r3, #15
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d000      	beq.n	8000354 <HAL_ADC_Init+0x54>
 8000352:	e0fc      	b.n	800054e <HAL_ADC_Init+0x24e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	2204      	movs	r2, #4
 800035c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800035e:	d000      	beq.n	8000362 <HAL_ADC_Init+0x62>
 8000360:	e0f5      	b.n	800054e <HAL_ADC_Init+0x24e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000366:	4a82      	ldr	r2, [pc, #520]	; (8000570 <HAL_ADC_Init+0x270>)
 8000368:	4013      	ands	r3, r2
 800036a:	2202      	movs	r2, #2
 800036c:	431a      	orrs	r2, r3
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	2203      	movs	r2, #3
 800037a:	4013      	ands	r3, r2
 800037c:	2b01      	cmp	r3, #1
 800037e:	d112      	bne.n	80003a6 <HAL_ADC_Init+0xa6>
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2201      	movs	r2, #1
 8000388:	4013      	ands	r3, r2
 800038a:	2b01      	cmp	r3, #1
 800038c:	d009      	beq.n	80003a2 <HAL_ADC_Init+0xa2>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	68da      	ldr	r2, [r3, #12]
 8000394:	2380      	movs	r3, #128	; 0x80
 8000396:	021b      	lsls	r3, r3, #8
 8000398:	401a      	ands	r2, r3
 800039a:	2380      	movs	r3, #128	; 0x80
 800039c:	021b      	lsls	r3, r3, #8
 800039e:	429a      	cmp	r2, r3
 80003a0:	d101      	bne.n	80003a6 <HAL_ADC_Init+0xa6>
 80003a2:	2301      	movs	r3, #1
 80003a4:	e000      	b.n	80003a8 <HAL_ADC_Init+0xa8>
 80003a6:	2300      	movs	r3, #0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d116      	bne.n	80003da <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	68db      	ldr	r3, [r3, #12]
 80003b2:	2218      	movs	r2, #24
 80003b4:	4393      	bics	r3, r2
 80003b6:	0019      	movs	r1, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	689a      	ldr	r2, [r3, #8]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	430a      	orrs	r2, r1
 80003c2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	691b      	ldr	r3, [r3, #16]
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	0899      	lsrs	r1, r3, #2
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	685a      	ldr	r2, [r3, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	430a      	orrs	r2, r1
 80003d8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	68da      	ldr	r2, [r3, #12]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4963      	ldr	r1, [pc, #396]	; (8000574 <HAL_ADC_Init+0x274>)
 80003e6:	400a      	ands	r2, r1
 80003e8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	69db      	ldr	r3, [r3, #28]
 80003f4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003f6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	6a1b      	ldr	r3, [r3, #32]
 80003fc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80003fe:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000404:	2b01      	cmp	r3, #1
 8000406:	d002      	beq.n	800040e <HAL_ADC_Init+0x10e>
 8000408:	2380      	movs	r3, #128	; 0x80
 800040a:	015b      	lsls	r3, r3, #5
 800040c:	e000      	b.n	8000410 <HAL_ADC_Init+0x110>
 800040e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000410:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000416:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	691b      	ldr	r3, [r3, #16]
 800041c:	2b02      	cmp	r3, #2
 800041e:	d101      	bne.n	8000424 <HAL_ADC_Init+0x124>
 8000420:	2304      	movs	r3, #4
 8000422:	e000      	b.n	8000426 <HAL_ADC_Init+0x126>
 8000424:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 8000426:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800042e:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000430:	68ba      	ldr	r2, [r7, #8]
 8000432:	4313      	orrs	r3, r2
 8000434:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800043a:	2b01      	cmp	r3, #1
 800043c:	d115      	bne.n	800046a <HAL_ADC_Init+0x16a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6a1b      	ldr	r3, [r3, #32]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d105      	bne.n	8000452 <HAL_ADC_Init+0x152>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	2280      	movs	r2, #128	; 0x80
 800044a:	0252      	lsls	r2, r2, #9
 800044c:	4313      	orrs	r3, r2
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	e00b      	b.n	800046a <HAL_ADC_Init+0x16a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000456:	2220      	movs	r2, #32
 8000458:	431a      	orrs	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000462:	2201      	movs	r2, #1
 8000464:	431a      	orrs	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800046e:	23c2      	movs	r3, #194	; 0xc2
 8000470:	33ff      	adds	r3, #255	; 0xff
 8000472:	429a      	cmp	r2, r3
 8000474:	d007      	beq.n	8000486 <HAL_ADC_Init+0x186>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800047e:	4313      	orrs	r3, r2
 8000480:	68ba      	ldr	r2, [r7, #8]
 8000482:	4313      	orrs	r3, r2
 8000484:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	68d9      	ldr	r1, [r3, #12]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	68ba      	ldr	r2, [r7, #8]
 8000492:	430a      	orrs	r2, r1
 8000494:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800049a:	2380      	movs	r3, #128	; 0x80
 800049c:	055b      	lsls	r3, r3, #21
 800049e:	429a      	cmp	r2, r3
 80004a0:	d01b      	beq.n	80004da <HAL_ADC_Init+0x1da>
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d017      	beq.n	80004da <HAL_ADC_Init+0x1da>
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d013      	beq.n	80004da <HAL_ADC_Init+0x1da>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004b6:	2b03      	cmp	r3, #3
 80004b8:	d00f      	beq.n	80004da <HAL_ADC_Init+0x1da>
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004be:	2b04      	cmp	r3, #4
 80004c0:	d00b      	beq.n	80004da <HAL_ADC_Init+0x1da>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004c6:	2b05      	cmp	r3, #5
 80004c8:	d007      	beq.n	80004da <HAL_ADC_Init+0x1da>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004ce:	2b06      	cmp	r3, #6
 80004d0:	d003      	beq.n	80004da <HAL_ADC_Init+0x1da>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004d6:	2b07      	cmp	r3, #7
 80004d8:	d112      	bne.n	8000500 <HAL_ADC_Init+0x200>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	695a      	ldr	r2, [r3, #20]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2107      	movs	r1, #7
 80004e6:	438a      	bics	r2, r1
 80004e8:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	6959      	ldr	r1, [r3, #20]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004f4:	2207      	movs	r2, #7
 80004f6:	401a      	ands	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	430a      	orrs	r2, r1
 80004fe:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	4a1c      	ldr	r2, [pc, #112]	; (8000578 <HAL_ADC_Init+0x278>)
 8000508:	4013      	ands	r3, r2
 800050a:	68ba      	ldr	r2, [r7, #8]
 800050c:	429a      	cmp	r2, r3
 800050e:	d10b      	bne.n	8000528 <HAL_ADC_Init+0x228>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2200      	movs	r2, #0
 8000514:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800051a:	2203      	movs	r2, #3
 800051c:	4393      	bics	r3, r2
 800051e:	2201      	movs	r2, #1
 8000520:	431a      	orrs	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000526:	e01c      	b.n	8000562 <HAL_ADC_Init+0x262>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800052c:	2212      	movs	r2, #18
 800052e:	4393      	bics	r3, r2
 8000530:	2210      	movs	r2, #16
 8000532:	431a      	orrs	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800053c:	2201      	movs	r2, #1
 800053e:	431a      	orrs	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8000544:	230f      	movs	r3, #15
 8000546:	18fb      	adds	r3, r7, r3
 8000548:	2201      	movs	r2, #1
 800054a:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800054c:	e009      	b.n	8000562 <HAL_ADC_Init+0x262>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000552:	2210      	movs	r2, #16
 8000554:	431a      	orrs	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 800055a:	230f      	movs	r3, #15
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000562:	230f      	movs	r3, #15
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	781b      	ldrb	r3, [r3, #0]
}
 8000568:	0018      	movs	r0, r3
 800056a:	46bd      	mov	sp, r7
 800056c:	b004      	add	sp, #16
 800056e:	bd80      	pop	{r7, pc}
 8000570:	fffffefd 	.word	0xfffffefd
 8000574:	fffe0219 	.word	0xfffe0219
 8000578:	833fffe7 	.word	0x833fffe7

0800057c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000586:	230f      	movs	r3, #15
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000596:	2380      	movs	r3, #128	; 0x80
 8000598:	055b      	lsls	r3, r3, #21
 800059a:	429a      	cmp	r2, r3
 800059c:	d011      	beq.n	80005c2 <HAL_ADC_ConfigChannel+0x46>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d00d      	beq.n	80005c2 <HAL_ADC_ConfigChannel+0x46>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d009      	beq.n	80005c2 <HAL_ADC_ConfigChannel+0x46>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005b2:	2b03      	cmp	r3, #3
 80005b4:	d005      	beq.n	80005c2 <HAL_ADC_ConfigChannel+0x46>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ba:	2b04      	cmp	r3, #4
 80005bc:	d001      	beq.n	80005c2 <HAL_ADC_ConfigChannel+0x46>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2240      	movs	r2, #64	; 0x40
 80005c6:	5c9b      	ldrb	r3, [r3, r2]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d101      	bne.n	80005d0 <HAL_ADC_ConfigChannel+0x54>
 80005cc:	2302      	movs	r3, #2
 80005ce:	e0d0      	b.n	8000772 <HAL_ADC_ConfigChannel+0x1f6>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2240      	movs	r2, #64	; 0x40
 80005d4:	2101      	movs	r1, #1
 80005d6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	2204      	movs	r2, #4
 80005e0:	4013      	ands	r3, r2
 80005e2:	d000      	beq.n	80005e6 <HAL_ADC_ConfigChannel+0x6a>
 80005e4:	e0b4      	b.n	8000750 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	4a64      	ldr	r2, [pc, #400]	; (800077c <HAL_ADC_ConfigChannel+0x200>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d100      	bne.n	80005f2 <HAL_ADC_ConfigChannel+0x76>
 80005f0:	e082      	b.n	80006f8 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2201      	movs	r2, #1
 80005fe:	409a      	lsls	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	430a      	orrs	r2, r1
 8000606:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	055b      	lsls	r3, r3, #21
 8000610:	429a      	cmp	r2, r3
 8000612:	d037      	beq.n	8000684 <HAL_ADC_ConfigChannel+0x108>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000618:	2b01      	cmp	r3, #1
 800061a:	d033      	beq.n	8000684 <HAL_ADC_ConfigChannel+0x108>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000620:	2b02      	cmp	r3, #2
 8000622:	d02f      	beq.n	8000684 <HAL_ADC_ConfigChannel+0x108>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000628:	2b03      	cmp	r3, #3
 800062a:	d02b      	beq.n	8000684 <HAL_ADC_ConfigChannel+0x108>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000630:	2b04      	cmp	r3, #4
 8000632:	d027      	beq.n	8000684 <HAL_ADC_ConfigChannel+0x108>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000638:	2b05      	cmp	r3, #5
 800063a:	d023      	beq.n	8000684 <HAL_ADC_ConfigChannel+0x108>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000640:	2b06      	cmp	r3, #6
 8000642:	d01f      	beq.n	8000684 <HAL_ADC_ConfigChannel+0x108>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000648:	2b07      	cmp	r3, #7
 800064a:	d01b      	beq.n	8000684 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	689a      	ldr	r2, [r3, #8]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	2107      	movs	r1, #7
 8000658:	400b      	ands	r3, r1
 800065a:	429a      	cmp	r2, r3
 800065c:	d012      	beq.n	8000684 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	695a      	ldr	r2, [r3, #20]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2107      	movs	r1, #7
 800066a:	438a      	bics	r2, r1
 800066c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	6959      	ldr	r1, [r3, #20]
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	2207      	movs	r2, #7
 800067a:	401a      	ands	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	430a      	orrs	r2, r1
 8000682:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b10      	cmp	r3, #16
 800068a:	d007      	beq.n	800069c <HAL_ADC_ConfigChannel+0x120>
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b11      	cmp	r3, #17
 8000692:	d003      	beq.n	800069c <HAL_ADC_ConfigChannel+0x120>
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b12      	cmp	r3, #18
 800069a:	d163      	bne.n	8000764 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800069c:	4b38      	ldr	r3, [pc, #224]	; (8000780 <HAL_ADC_ConfigChannel+0x204>)
 800069e:	6819      	ldr	r1, [r3, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b10      	cmp	r3, #16
 80006a6:	d009      	beq.n	80006bc <HAL_ADC_ConfigChannel+0x140>
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b11      	cmp	r3, #17
 80006ae:	d102      	bne.n	80006b6 <HAL_ADC_ConfigChannel+0x13a>
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	03db      	lsls	r3, r3, #15
 80006b4:	e004      	b.n	80006c0 <HAL_ADC_ConfigChannel+0x144>
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	045b      	lsls	r3, r3, #17
 80006ba:	e001      	b.n	80006c0 <HAL_ADC_ConfigChannel+0x144>
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	041b      	lsls	r3, r3, #16
 80006c0:	4a2f      	ldr	r2, [pc, #188]	; (8000780 <HAL_ADC_ConfigChannel+0x204>)
 80006c2:	430b      	orrs	r3, r1
 80006c4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b10      	cmp	r3, #16
 80006cc:	d14a      	bne.n	8000764 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <HAL_ADC_ConfigChannel+0x208>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	492d      	ldr	r1, [pc, #180]	; (8000788 <HAL_ADC_ConfigChannel+0x20c>)
 80006d4:	0018      	movs	r0, r3
 80006d6:	f7ff fd15 	bl	8000104 <__udivsi3>
 80006da:	0003      	movs	r3, r0
 80006dc:	001a      	movs	r2, r3
 80006de:	0013      	movs	r3, r2
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	189b      	adds	r3, r3, r2
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80006e8:	e002      	b.n	80006f0 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	3b01      	subs	r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1f9      	bne.n	80006ea <HAL_ADC_ConfigChannel+0x16e>
 80006f6:	e035      	b.n	8000764 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2101      	movs	r1, #1
 8000704:	4099      	lsls	r1, r3
 8000706:	000b      	movs	r3, r1
 8000708:	43d9      	mvns	r1, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	400a      	ands	r2, r1
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b10      	cmp	r3, #16
 8000718:	d007      	beq.n	800072a <HAL_ADC_ConfigChannel+0x1ae>
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b11      	cmp	r3, #17
 8000720:	d003      	beq.n	800072a <HAL_ADC_ConfigChannel+0x1ae>
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b12      	cmp	r3, #18
 8000728:	d11c      	bne.n	8000764 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_ADC_ConfigChannel+0x204>)
 800072c:	6819      	ldr	r1, [r3, #0]
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b10      	cmp	r3, #16
 8000734:	d007      	beq.n	8000746 <HAL_ADC_ConfigChannel+0x1ca>
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b11      	cmp	r3, #17
 800073c:	d101      	bne.n	8000742 <HAL_ADC_ConfigChannel+0x1c6>
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <HAL_ADC_ConfigChannel+0x210>)
 8000740:	e002      	b.n	8000748 <HAL_ADC_ConfigChannel+0x1cc>
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <HAL_ADC_ConfigChannel+0x214>)
 8000744:	e000      	b.n	8000748 <HAL_ADC_ConfigChannel+0x1cc>
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <HAL_ADC_ConfigChannel+0x218>)
 8000748:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <HAL_ADC_ConfigChannel+0x204>)
 800074a:	400b      	ands	r3, r1
 800074c:	6013      	str	r3, [r2, #0]
 800074e:	e009      	b.n	8000764 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000754:	2220      	movs	r2, #32
 8000756:	431a      	orrs	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 800075c:	230f      	movs	r3, #15
 800075e:	18fb      	adds	r3, r7, r3
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2240      	movs	r2, #64	; 0x40
 8000768:	2100      	movs	r1, #0
 800076a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800076c:	230f      	movs	r3, #15
 800076e:	18fb      	adds	r3, r7, r3
 8000770:	781b      	ldrb	r3, [r3, #0]
}
 8000772:	0018      	movs	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	b004      	add	sp, #16
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	00001001 	.word	0x00001001
 8000780:	40012708 	.word	0x40012708
 8000784:	20000000 	.word	0x20000000
 8000788:	000f4240 	.word	0x000f4240
 800078c:	ffbfffff 	.word	0xffbfffff
 8000790:	feffffff 	.word	0xfeffffff
 8000794:	ff7fffff 	.word	0xff7fffff

08000798 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d101      	bne.n	80007aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e0f0      	b.n	800098c <HAL_CAN_Init+0x1f4>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2220      	movs	r2, #32
 80007ae:	5c9b      	ldrb	r3, [r3, r2]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d103      	bne.n	80007be <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	0018      	movs	r0, r3
 80007ba:	f004 fafb 	bl	8004db4 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2102      	movs	r1, #2
 80007ca:	438a      	bics	r2, r1
 80007cc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007ce:	f7ff fd6f 	bl	80002b0 <HAL_GetTick>
 80007d2:	0003      	movs	r3, r0
 80007d4:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007d6:	e013      	b.n	8000800 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007d8:	f7ff fd6a 	bl	80002b0 <HAL_GetTick>
 80007dc:	0002      	movs	r2, r0
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	2b0a      	cmp	r3, #10
 80007e4:	d90c      	bls.n	8000800 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	0292      	lsls	r2, r2, #10
 80007ee:	431a      	orrs	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2220      	movs	r2, #32
 80007f8:	2105      	movs	r1, #5
 80007fa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80007fc:	2301      	movs	r3, #1
 80007fe:	e0c5      	b.n	800098c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	2202      	movs	r2, #2
 8000808:	4013      	ands	r3, r2
 800080a:	d1e5      	bne.n	80007d8 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2101      	movs	r1, #1
 8000818:	430a      	orrs	r2, r1
 800081a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800081c:	f7ff fd48 	bl	80002b0 <HAL_GetTick>
 8000820:	0003      	movs	r3, r0
 8000822:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000824:	e013      	b.n	800084e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000826:	f7ff fd43 	bl	80002b0 <HAL_GetTick>
 800082a:	0002      	movs	r2, r0
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	2b0a      	cmp	r3, #10
 8000832:	d90c      	bls.n	800084e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	0292      	lsls	r2, r2, #10
 800083c:	431a      	orrs	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2220      	movs	r2, #32
 8000846:	2105      	movs	r1, #5
 8000848:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	e09e      	b.n	800098c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2201      	movs	r2, #1
 8000856:	4013      	ands	r3, r2
 8000858:	d0e5      	beq.n	8000826 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	7e1b      	ldrb	r3, [r3, #24]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d108      	bne.n	8000874 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	430a      	orrs	r2, r1
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	e007      	b.n	8000884 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2180      	movs	r1, #128	; 0x80
 8000880:	438a      	bics	r2, r1
 8000882:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7e5b      	ldrb	r3, [r3, #25]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d108      	bne.n	800089e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2140      	movs	r1, #64	; 0x40
 8000898:	430a      	orrs	r2, r1
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	e007      	b.n	80008ae <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2140      	movs	r1, #64	; 0x40
 80008aa:	438a      	bics	r2, r1
 80008ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	7e9b      	ldrb	r3, [r3, #26]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d108      	bne.n	80008c8 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2120      	movs	r1, #32
 80008c2:	430a      	orrs	r2, r1
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	e007      	b.n	80008d8 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2120      	movs	r1, #32
 80008d4:	438a      	bics	r2, r1
 80008d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	7edb      	ldrb	r3, [r3, #27]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d108      	bne.n	80008f2 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2110      	movs	r1, #16
 80008ec:	438a      	bics	r2, r1
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	e007      	b.n	8000902 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2110      	movs	r1, #16
 80008fe:	430a      	orrs	r2, r1
 8000900:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	7f1b      	ldrb	r3, [r3, #28]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d108      	bne.n	800091c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2108      	movs	r1, #8
 8000916:	430a      	orrs	r2, r1
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	e007      	b.n	800092c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2108      	movs	r1, #8
 8000928:	438a      	bics	r2, r1
 800092a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7f5b      	ldrb	r3, [r3, #29]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d108      	bne.n	8000946 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2104      	movs	r1, #4
 8000940:	430a      	orrs	r2, r1
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	e007      	b.n	8000956 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2104      	movs	r1, #4
 8000952:	438a      	bics	r2, r1
 8000954:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	431a      	orrs	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	691b      	ldr	r3, [r3, #16]
 8000964:	431a      	orrs	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	431a      	orrs	r2, r3
 800096c:	0011      	movs	r1, r2
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	1e5a      	subs	r2, r3, #1
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	430a      	orrs	r2, r1
 800097a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2220      	movs	r2, #32
 8000986:	2101      	movs	r1, #1
 8000988:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800098a:	2300      	movs	r3, #0
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	b004      	add	sp, #16
 8000992:	bd80      	pop	{r7, pc}

08000994 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	0002      	movs	r2, r0
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	001a      	movs	r2, r3
 80009a6:	231f      	movs	r3, #31
 80009a8:	401a      	ands	r2, r3
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <NVIC_EnableIRQ+0x28>)
 80009ac:	2101      	movs	r1, #1
 80009ae:	4091      	lsls	r1, r2
 80009b0:	000a      	movs	r2, r1
 80009b2:	601a      	str	r2, [r3, #0]
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b002      	add	sp, #8
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	e000e100 	.word	0xe000e100

080009c0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	0002      	movs	r2, r0
 80009c8:	6039      	str	r1, [r7, #0]
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b7f      	cmp	r3, #127	; 0x7f
 80009d4:	d932      	bls.n	8000a3c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d6:	4a2f      	ldr	r2, [pc, #188]	; (8000a94 <NVIC_SetPriority+0xd4>)
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	0019      	movs	r1, r3
 80009de:	230f      	movs	r3, #15
 80009e0:	400b      	ands	r3, r1
 80009e2:	3b08      	subs	r3, #8
 80009e4:	089b      	lsrs	r3, r3, #2
 80009e6:	3306      	adds	r3, #6
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	18d3      	adds	r3, r2, r3
 80009ec:	3304      	adds	r3, #4
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	1dfa      	adds	r2, r7, #7
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	0011      	movs	r1, r2
 80009f6:	2203      	movs	r2, #3
 80009f8:	400a      	ands	r2, r1
 80009fa:	00d2      	lsls	r2, r2, #3
 80009fc:	21ff      	movs	r1, #255	; 0xff
 80009fe:	4091      	lsls	r1, r2
 8000a00:	000a      	movs	r2, r1
 8000a02:	43d2      	mvns	r2, r2
 8000a04:	401a      	ands	r2, r3
 8000a06:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	019b      	lsls	r3, r3, #6
 8000a0c:	22ff      	movs	r2, #255	; 0xff
 8000a0e:	401a      	ands	r2, r3
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	0018      	movs	r0, r3
 8000a16:	2303      	movs	r3, #3
 8000a18:	4003      	ands	r3, r0
 8000a1a:	00db      	lsls	r3, r3, #3
 8000a1c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a1e:	481d      	ldr	r0, [pc, #116]	; (8000a94 <NVIC_SetPriority+0xd4>)
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	001c      	movs	r4, r3
 8000a26:	230f      	movs	r3, #15
 8000a28:	4023      	ands	r3, r4
 8000a2a:	3b08      	subs	r3, #8
 8000a2c:	089b      	lsrs	r3, r3, #2
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	3306      	adds	r3, #6
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	18c3      	adds	r3, r0, r3
 8000a36:	3304      	adds	r3, #4
 8000a38:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a3a:	e027      	b.n	8000a8c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a3c:	4a16      	ldr	r2, [pc, #88]	; (8000a98 <NVIC_SetPriority+0xd8>)
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b25b      	sxtb	r3, r3
 8000a44:	089b      	lsrs	r3, r3, #2
 8000a46:	33c0      	adds	r3, #192	; 0xc0
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	589b      	ldr	r3, [r3, r2]
 8000a4c:	1dfa      	adds	r2, r7, #7
 8000a4e:	7812      	ldrb	r2, [r2, #0]
 8000a50:	0011      	movs	r1, r2
 8000a52:	2203      	movs	r2, #3
 8000a54:	400a      	ands	r2, r1
 8000a56:	00d2      	lsls	r2, r2, #3
 8000a58:	21ff      	movs	r1, #255	; 0xff
 8000a5a:	4091      	lsls	r1, r2
 8000a5c:	000a      	movs	r2, r1
 8000a5e:	43d2      	mvns	r2, r2
 8000a60:	401a      	ands	r2, r3
 8000a62:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	019b      	lsls	r3, r3, #6
 8000a68:	22ff      	movs	r2, #255	; 0xff
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	0018      	movs	r0, r3
 8000a72:	2303      	movs	r3, #3
 8000a74:	4003      	ands	r3, r0
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a7a:	4807      	ldr	r0, [pc, #28]	; (8000a98 <NVIC_SetPriority+0xd8>)
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b25b      	sxtb	r3, r3
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	430a      	orrs	r2, r1
 8000a86:	33c0      	adds	r3, #192	; 0xc0
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	501a      	str	r2, [r3, r0]
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b003      	add	sp, #12
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	e000ed00 	.word	0xe000ed00
 8000a98:	e000e100 	.word	0xe000e100

08000a9c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	1c02      	adds	r2, r0, #0
 8000aac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b25b      	sxtb	r3, r3
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f7ff ff81 	bl	80009c0 <NVIC_SetPriority>
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b004      	add	sp, #16
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	0002      	movs	r2, r0
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f7ff ff5b 	bl	8000994 <NVIC_EnableIRQ>
}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d101      	bne.n	8000afe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e042      	b.n	8000b84 <HAL_DMA_Init+0x9c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2221      	movs	r2, #33	; 0x21
 8000b02:	2102      	movs	r1, #2
 8000b04:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <HAL_DMA_Init+0xa4>)
 8000b12:	4013      	ands	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	69db      	ldr	r3, [r3, #28]
 8000b3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f000 f8c0 	bl	8000cd4 <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2221      	movs	r2, #33	; 0x21
 8000b76:	2101      	movs	r1, #1
 8000b78:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2220      	movs	r2, #32
 8000b7e:	2100      	movs	r1, #0
 8000b80:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
}  
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b004      	add	sp, #16
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	ffffc00f 	.word	0xffffc00f

08000b90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	2204      	movs	r2, #4
 8000bae:	409a      	lsls	r2, r3
 8000bb0:	0013      	movs	r3, r2
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	d024      	beq.n	8000c02 <HAL_DMA_IRQHandler+0x72>
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	2204      	movs	r2, #4
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	d020      	beq.n	8000c02 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2220      	movs	r2, #32
 8000bc8:	4013      	ands	r3, r2
 8000bca:	d107      	bne.n	8000bdc <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	438a      	bics	r2, r1
 8000bda:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000be4:	2104      	movs	r1, #4
 8000be6:	4091      	lsls	r1, r2
 8000be8:	000a      	movs	r2, r1
 8000bea:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d100      	bne.n	8000bf6 <HAL_DMA_IRQHandler+0x66>
 8000bf4:	e06a      	b.n	8000ccc <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	0010      	movs	r0, r2
 8000bfe:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c00:	e064      	b.n	8000ccc <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	2202      	movs	r2, #2
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	0013      	movs	r3, r2
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	d02b      	beq.n	8000c6a <HAL_DMA_IRQHandler+0xda>
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	2202      	movs	r2, #2
 8000c16:	4013      	ands	r3, r2
 8000c18:	d027      	beq.n	8000c6a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2220      	movs	r2, #32
 8000c22:	4013      	ands	r3, r2
 8000c24:	d10b      	bne.n	8000c3e <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	210a      	movs	r1, #10
 8000c32:	438a      	bics	r2, r1
 8000c34:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2221      	movs	r2, #33	; 0x21
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c46:	2102      	movs	r1, #2
 8000c48:	4091      	lsls	r1, r2
 8000c4a:	000a      	movs	r2, r1
 8000c4c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2220      	movs	r2, #32
 8000c52:	2100      	movs	r1, #0
 8000c54:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d036      	beq.n	8000ccc <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	0010      	movs	r0, r2
 8000c66:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000c68:	e030      	b.n	8000ccc <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	2208      	movs	r2, #8
 8000c70:	409a      	lsls	r2, r3
 8000c72:	0013      	movs	r3, r2
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	4013      	ands	r3, r2
 8000c78:	d028      	beq.n	8000ccc <HAL_DMA_IRQHandler+0x13c>
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	2208      	movs	r2, #8
 8000c7e:	4013      	ands	r3, r2
 8000c80:	d024      	beq.n	8000ccc <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	210e      	movs	r1, #14
 8000c8e:	438a      	bics	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	000a      	movs	r2, r1
 8000ca0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2221      	movs	r2, #33	; 0x21
 8000cac:	2101      	movs	r1, #1
 8000cae:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d005      	beq.n	8000ccc <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	0010      	movs	r0, r2
 8000cc8:	4798      	blx	r3
    }
   }
}  
 8000cca:	e7ff      	b.n	8000ccc <HAL_DMA_IRQHandler+0x13c>
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b004      	add	sp, #16
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <DMA_CalcBaseAndBitshift+0x60>)
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d810      	bhi.n	8000d0a <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <DMA_CalcBaseAndBitshift+0x64>)
 8000cee:	4694      	mov	ip, r2
 8000cf0:	4463      	add	r3, ip
 8000cf2:	2114      	movs	r1, #20
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff fa05 	bl	8000104 <__udivsi3>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	009a      	lsls	r2, r3, #2
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <DMA_CalcBaseAndBitshift+0x68>)
 8000d06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000d08:	e00f      	b.n	8000d2a <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <DMA_CalcBaseAndBitshift+0x6c>)
 8000d10:	4694      	mov	ip, r2
 8000d12:	4463      	add	r3, ip
 8000d14:	2114      	movs	r1, #20
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff f9f4 	bl	8000104 <__udivsi3>
 8000d1c:	0003      	movs	r3, r0
 8000d1e:	009a      	lsls	r2, r3, #2
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <DMA_CalcBaseAndBitshift+0x70>)
 8000d28:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	40020407 	.word	0x40020407
 8000d38:	bffdfff8 	.word	0xbffdfff8
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	bffdfbf8 	.word	0xbffdfbf8
 8000d44:	40020400 	.word	0x40020400

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d5e:	e155      	b.n	800100c <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2101      	movs	r1, #1
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	000a      	movs	r2, r1
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d100      	bne.n	8000d78 <HAL_GPIO_Init+0x30>
 8000d76:	e146      	b.n	8001006 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x40>
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b12      	cmp	r3, #18
 8000d86:	d123      	bne.n	8000dd0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	08da      	lsrs	r2, r3, #3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3208      	adds	r2, #8
 8000d90:	0092      	lsls	r2, r2, #2
 8000d92:	58d3      	ldr	r3, [r2, r3]
 8000d94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	2207      	movs	r2, #7
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	220f      	movs	r2, #15
 8000da0:	409a      	lsls	r2, r3
 8000da2:	0013      	movs	r3, r2
 8000da4:	43da      	mvns	r2, r3
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	691a      	ldr	r2, [r3, #16]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	2107      	movs	r1, #7
 8000db4:	400b      	ands	r3, r1
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	409a      	lsls	r2, r3
 8000dba:	0013      	movs	r3, r2
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	08da      	lsrs	r2, r3, #3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3208      	adds	r2, #8
 8000dca:	0092      	lsls	r2, r2, #2
 8000dcc:	6939      	ldr	r1, [r7, #16]
 8000dce:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	409a      	lsls	r2, r3
 8000dde:	0013      	movs	r3, r2
 8000de0:	43da      	mvns	r2, r3
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2203      	movs	r2, #3
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	409a      	lsls	r2, r3
 8000df6:	0013      	movs	r3, r2
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d00b      	beq.n	8000e24 <HAL_GPIO_Init+0xdc>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d007      	beq.n	8000e24 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e18:	2b11      	cmp	r3, #17
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b12      	cmp	r3, #18
 8000e22:	d130      	bne.n	8000e86 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	409a      	lsls	r2, r3
 8000e32:	0013      	movs	r3, r2
 8000e34:	43da      	mvns	r2, r3
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	409a      	lsls	r2, r3
 8000e46:	0013      	movs	r3, r2
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	43da      	mvns	r2, r3
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	2201      	movs	r2, #1
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	43da      	mvns	r2, r3
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	055b      	lsls	r3, r3, #21
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d100      	bne.n	8000ec4 <HAL_GPIO_Init+0x17c>
 8000ec2:	e0a0      	b.n	8001006 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec4:	4b57      	ldr	r3, [pc, #348]	; (8001024 <HAL_GPIO_Init+0x2dc>)
 8000ec6:	699a      	ldr	r2, [r3, #24]
 8000ec8:	4b56      	ldr	r3, [pc, #344]	; (8001024 <HAL_GPIO_Init+0x2dc>)
 8000eca:	2101      	movs	r1, #1
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	619a      	str	r2, [r3, #24]
 8000ed0:	4b54      	ldr	r3, [pc, #336]	; (8001024 <HAL_GPIO_Init+0x2dc>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000edc:	4a52      	ldr	r2, [pc, #328]	; (8001028 <HAL_GPIO_Init+0x2e0>)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	589b      	ldr	r3, [r3, r2]
 8000ee8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	2203      	movs	r2, #3
 8000eee:	4013      	ands	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	220f      	movs	r2, #15
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	0013      	movs	r3, r2
 8000ef8:	43da      	mvns	r2, r3
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	2390      	movs	r3, #144	; 0x90
 8000f04:	05db      	lsls	r3, r3, #23
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0x1f6>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a47      	ldr	r2, [pc, #284]	; (800102c <HAL_GPIO_Init+0x2e4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x1f2>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a46      	ldr	r2, [pc, #280]	; (8001030 <HAL_GPIO_Init+0x2e8>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x1ee>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a45      	ldr	r2, [pc, #276]	; (8001034 <HAL_GPIO_Init+0x2ec>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x1ea>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a44      	ldr	r2, [pc, #272]	; (8001038 <HAL_GPIO_Init+0x2f0>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x1e6>
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	e008      	b.n	8000f40 <HAL_GPIO_Init+0x1f8>
 8000f2e:	2305      	movs	r3, #5
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x1f8>
 8000f32:	2303      	movs	r3, #3
 8000f34:	e004      	b.n	8000f40 <HAL_GPIO_Init+0x1f8>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_Init+0x1f8>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <HAL_GPIO_Init+0x1f8>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	2103      	movs	r1, #3
 8000f44:	400a      	ands	r2, r1
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	4093      	lsls	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f50:	4935      	ldr	r1, [pc, #212]	; (8001028 <HAL_GPIO_Init+0x2e0>)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f5e:	4b37      	ldr	r3, [pc, #220]	; (800103c <HAL_GPIO_Init+0x2f4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	43da      	mvns	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	2380      	movs	r3, #128	; 0x80
 8000f74:	025b      	lsls	r3, r3, #9
 8000f76:	4013      	ands	r3, r2
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f82:	4b2e      	ldr	r3, [pc, #184]	; (800103c <HAL_GPIO_Init+0x2f4>)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f88:	4b2c      	ldr	r3, [pc, #176]	; (800103c <HAL_GPIO_Init+0x2f4>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43da      	mvns	r2, r3
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	029b      	lsls	r3, r3, #10
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_GPIO_Init+0x2f4>)
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <HAL_GPIO_Init+0x2f4>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	035b      	lsls	r3, r3, #13
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_GPIO_Init+0x2f4>)
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_GPIO_Init+0x2f4>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43da      	mvns	r2, r3
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	039b      	lsls	r3, r3, #14
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_GPIO_Init+0x2f4>)
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3301      	adds	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	40da      	lsrs	r2, r3
 8001014:	1e13      	subs	r3, r2, #0
 8001016:	d000      	beq.n	800101a <HAL_GPIO_Init+0x2d2>
 8001018:	e6a2      	b.n	8000d60 <HAL_GPIO_Init+0x18>
  } 
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b006      	add	sp, #24
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	40021000 	.word	0x40021000
 8001028:	40010000 	.word	0x40010000
 800102c:	48000400 	.word	0x48000400
 8001030:	48000800 	.word	0x48000800
 8001034:	48000c00 	.word	0x48000c00
 8001038:	48001000 	.word	0x48001000
 800103c:	40010400 	.word	0x40010400

08001040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	000a      	movs	r2, r1
 800104a:	1cbb      	adds	r3, r7, #2
 800104c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	1cba      	adds	r2, r7, #2
 8001054:	8812      	ldrh	r2, [r2, #0]
 8001056:	4013      	ands	r3, r2
 8001058:	d004      	beq.n	8001064 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800105a:	230f      	movs	r3, #15
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	e003      	b.n	800106c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001064:	230f      	movs	r3, #15
 8001066:	18fb      	adds	r3, r7, r3
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800106c:	230f      	movs	r3, #15
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	781b      	ldrb	r3, [r3, #0]
  }
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b004      	add	sp, #16
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	0008      	movs	r0, r1
 8001084:	0011      	movs	r1, r2
 8001086:	1cbb      	adds	r3, r7, #2
 8001088:	1c02      	adds	r2, r0, #0
 800108a:	801a      	strh	r2, [r3, #0]
 800108c:	1c7b      	adds	r3, r7, #1
 800108e:	1c0a      	adds	r2, r1, #0
 8001090:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001092:	1c7b      	adds	r3, r7, #1
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d004      	beq.n	80010a4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800109a:	1cbb      	adds	r3, r7, #2
 800109c:	881a      	ldrh	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010a2:	e003      	b.n	80010ac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010a4:	1cbb      	adds	r3, r7, #2
 80010a6:	881a      	ldrh	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	000a      	movs	r2, r1
 80010be:	1cbb      	adds	r3, r7, #2
 80010c0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	1cbb      	adds	r3, r7, #2
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	405a      	eors	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	615a      	str	r2, [r3, #20]
}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b002      	add	sp, #8
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e082      	b.n	80011f0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2241      	movs	r2, #65	; 0x41
 80010ee:	5c9b      	ldrb	r3, [r3, r2]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d107      	bne.n	8001106 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2240      	movs	r2, #64	; 0x40
 80010fa:	2100      	movs	r1, #0
 80010fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	0018      	movs	r0, r3
 8001102:	f004 f87f 	bl	8005204 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2241      	movs	r2, #65	; 0x41
 800110a:	2124      	movs	r1, #36	; 0x24
 800110c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2101      	movs	r1, #1
 800111a:	438a      	bics	r2, r1
 800111c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4934      	ldr	r1, [pc, #208]	; (80011f8 <HAL_I2C_Init+0x120>)
 8001128:	400a      	ands	r2, r1
 800112a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4931      	ldr	r1, [pc, #196]	; (80011fc <HAL_I2C_Init+0x124>)
 8001138:	400a      	ands	r2, r1
 800113a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d108      	bne.n	8001156 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	0209      	lsls	r1, r1, #8
 8001150:	430a      	orrs	r2, r1
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	e007      	b.n	8001166 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2184      	movs	r1, #132	; 0x84
 8001160:	0209      	lsls	r1, r1, #8
 8001162:	430a      	orrs	r2, r1
 8001164:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d104      	bne.n	8001178 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	491f      	ldr	r1, [pc, #124]	; (8001200 <HAL_I2C_Init+0x128>)
 8001184:	430a      	orrs	r2, r1
 8001186:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	491a      	ldr	r1, [pc, #104]	; (80011fc <HAL_I2C_Init+0x124>)
 8001194:	400a      	ands	r2, r1
 8001196:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	431a      	orrs	r2, r3
 80011a2:	0011      	movs	r1, r2
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	021a      	lsls	r2, r3, #8
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69d9      	ldr	r1, [r3, #28]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a1a      	ldr	r2, [r3, #32]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	430a      	orrs	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2101      	movs	r1, #1
 80011ce:	430a      	orrs	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2241      	movs	r2, #65	; 0x41
 80011dc:	2120      	movs	r1, #32
 80011de:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2242      	movs	r2, #66	; 0x42
 80011ea:	2100      	movs	r1, #0
 80011ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	f0ffffff 	.word	0xf0ffffff
 80011fc:	ffff7fff 	.word	0xffff7fff
 8001200:	02008000 	.word	0x02008000

08001204 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2241      	movs	r2, #65	; 0x41
 8001212:	5c9b      	ldrb	r3, [r3, r2]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b20      	cmp	r3, #32
 8001218:	d138      	bne.n	800128c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2240      	movs	r2, #64	; 0x40
 800121e:	5c9b      	ldrb	r3, [r3, r2]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d101      	bne.n	8001228 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001224:	2302      	movs	r3, #2
 8001226:	e032      	b.n	800128e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2240      	movs	r2, #64	; 0x40
 800122c:	2101      	movs	r1, #1
 800122e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2241      	movs	r2, #65	; 0x41
 8001234:	2124      	movs	r1, #36	; 0x24
 8001236:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2101      	movs	r1, #1
 8001244:	438a      	bics	r2, r1
 8001246:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4911      	ldr	r1, [pc, #68]	; (8001298 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001254:	400a      	ands	r2, r1
 8001256:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6819      	ldr	r1, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2101      	movs	r1, #1
 8001274:	430a      	orrs	r2, r1
 8001276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2241      	movs	r2, #65	; 0x41
 800127c:	2120      	movs	r1, #32
 800127e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2240      	movs	r2, #64	; 0x40
 8001284:	2100      	movs	r1, #0
 8001286:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	e000      	b.n	800128e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800128c:	2302      	movs	r3, #2
  }
}
 800128e:	0018      	movs	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	b002      	add	sp, #8
 8001294:	bd80      	pop	{r7, pc}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	ffffefff 	.word	0xffffefff

0800129c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2241      	movs	r2, #65	; 0x41
 80012ae:	5c9b      	ldrb	r3, [r3, r2]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b20      	cmp	r3, #32
 80012b4:	d139      	bne.n	800132a <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2240      	movs	r2, #64	; 0x40
 80012ba:	5c9b      	ldrb	r3, [r3, r2]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 80012c0:	2302      	movs	r3, #2
 80012c2:	e033      	b.n	800132c <HAL_I2CEx_ConfigDigitalFilter+0x90>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2240      	movs	r2, #64	; 0x40
 80012c8:	2101      	movs	r1, #1
 80012ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2241      	movs	r2, #65	; 0x41
 80012d0:	2124      	movs	r1, #36	; 0x24
 80012d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2101      	movs	r1, #1
 80012e0:	438a      	bics	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4a11      	ldr	r2, [pc, #68]	; (8001334 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2101      	movs	r1, #1
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2241      	movs	r2, #65	; 0x41
 800131a:	2120      	movs	r1, #32
 800131c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2240      	movs	r2, #64	; 0x40
 8001322:	2100      	movs	r1, #0
 8001324:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e000      	b.n	800132c <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 800132a:	2302      	movs	r3, #2
  }
}
 800132c:	0018      	movs	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	b004      	add	sp, #16
 8001332:	bd80      	pop	{r7, pc}
 8001334:	fffff0ff 	.word	0xfffff0ff

08001338 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <HAL_PWR_EnableBkUpAccess+0x18>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001342:	2180      	movs	r1, #128	; 0x80
 8001344:	0049      	lsls	r1, r1, #1
 8001346:	430a      	orrs	r2, r1
 8001348:	601a      	str	r2, [r3, #0]
}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40007000 	.word	0x40007000

08001354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2201      	movs	r2, #1
 8001366:	4013      	ands	r3, r2
 8001368:	d100      	bne.n	800136c <HAL_RCC_OscConfig+0x18>
 800136a:	e08d      	b.n	8001488 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800136c:	4bc5      	ldr	r3, [pc, #788]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	220c      	movs	r2, #12
 8001372:	4013      	ands	r3, r2
 8001374:	2b04      	cmp	r3, #4
 8001376:	d00e      	beq.n	8001396 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001378:	4bc2      	ldr	r3, [pc, #776]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	220c      	movs	r2, #12
 800137e:	4013      	ands	r3, r2
 8001380:	2b08      	cmp	r3, #8
 8001382:	d116      	bne.n	80013b2 <HAL_RCC_OscConfig+0x5e>
 8001384:	4bbf      	ldr	r3, [pc, #764]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	23c0      	movs	r3, #192	; 0xc0
 800138a:	025b      	lsls	r3, r3, #9
 800138c:	401a      	ands	r2, r3
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	025b      	lsls	r3, r3, #9
 8001392:	429a      	cmp	r2, r3
 8001394:	d10d      	bne.n	80013b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001396:	4bbb      	ldr	r3, [pc, #748]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	029b      	lsls	r3, r3, #10
 800139e:	4013      	ands	r3, r2
 80013a0:	d100      	bne.n	80013a4 <HAL_RCC_OscConfig+0x50>
 80013a2:	e070      	b.n	8001486 <HAL_RCC_OscConfig+0x132>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d000      	beq.n	80013ae <HAL_RCC_OscConfig+0x5a>
 80013ac:	e06b      	b.n	8001486 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e329      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d107      	bne.n	80013ca <HAL_RCC_OscConfig+0x76>
 80013ba:	4bb2      	ldr	r3, [pc, #712]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4bb1      	ldr	r3, [pc, #708]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	0249      	lsls	r1, r1, #9
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e02f      	b.n	800142a <HAL_RCC_OscConfig+0xd6>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10c      	bne.n	80013ec <HAL_RCC_OscConfig+0x98>
 80013d2:	4bac      	ldr	r3, [pc, #688]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4bab      	ldr	r3, [pc, #684]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80013d8:	49ab      	ldr	r1, [pc, #684]	; (8001688 <HAL_RCC_OscConfig+0x334>)
 80013da:	400a      	ands	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	4ba9      	ldr	r3, [pc, #676]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4ba8      	ldr	r3, [pc, #672]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80013e4:	49a9      	ldr	r1, [pc, #676]	; (800168c <HAL_RCC_OscConfig+0x338>)
 80013e6:	400a      	ands	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e01e      	b.n	800142a <HAL_RCC_OscConfig+0xd6>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b05      	cmp	r3, #5
 80013f2:	d10e      	bne.n	8001412 <HAL_RCC_OscConfig+0xbe>
 80013f4:	4ba3      	ldr	r3, [pc, #652]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4ba2      	ldr	r3, [pc, #648]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80013fa:	2180      	movs	r1, #128	; 0x80
 80013fc:	02c9      	lsls	r1, r1, #11
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	4ba0      	ldr	r3, [pc, #640]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b9f      	ldr	r3, [pc, #636]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	0249      	lsls	r1, r1, #9
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e00b      	b.n	800142a <HAL_RCC_OscConfig+0xd6>
 8001412:	4b9c      	ldr	r3, [pc, #624]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b9b      	ldr	r3, [pc, #620]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001418:	499b      	ldr	r1, [pc, #620]	; (8001688 <HAL_RCC_OscConfig+0x334>)
 800141a:	400a      	ands	r2, r1
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	4b99      	ldr	r3, [pc, #612]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b98      	ldr	r3, [pc, #608]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001424:	4999      	ldr	r1, [pc, #612]	; (800168c <HAL_RCC_OscConfig+0x338>)
 8001426:	400a      	ands	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d014      	beq.n	800145c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7fe ff3d 	bl	80002b0 <HAL_GetTick>
 8001436:	0003      	movs	r3, r0
 8001438:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800143c:	f7fe ff38 	bl	80002b0 <HAL_GetTick>
 8001440:	0002      	movs	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e2db      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	4b8d      	ldr	r3, [pc, #564]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	029b      	lsls	r3, r3, #10
 8001456:	4013      	ands	r3, r2
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0xe8>
 800145a:	e015      	b.n	8001488 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7fe ff28 	bl	80002b0 <HAL_GetTick>
 8001460:	0003      	movs	r3, r0
 8001462:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001466:	f7fe ff23 	bl	80002b0 <HAL_GetTick>
 800146a:	0002      	movs	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b64      	cmp	r3, #100	; 0x64
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e2c6      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001478:	4b82      	ldr	r3, [pc, #520]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	029b      	lsls	r3, r3, #10
 8001480:	4013      	ands	r3, r2
 8001482:	d1f0      	bne.n	8001466 <HAL_RCC_OscConfig+0x112>
 8001484:	e000      	b.n	8001488 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001486:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2202      	movs	r2, #2
 800148e:	4013      	ands	r3, r2
 8001490:	d100      	bne.n	8001494 <HAL_RCC_OscConfig+0x140>
 8001492:	e06c      	b.n	800156e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001494:	4b7b      	ldr	r3, [pc, #492]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	220c      	movs	r2, #12
 800149a:	4013      	ands	r3, r2
 800149c:	d00e      	beq.n	80014bc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800149e:	4b79      	ldr	r3, [pc, #484]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	220c      	movs	r2, #12
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d11f      	bne.n	80014ea <HAL_RCC_OscConfig+0x196>
 80014aa:	4b76      	ldr	r3, [pc, #472]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	23c0      	movs	r3, #192	; 0xc0
 80014b0:	025b      	lsls	r3, r3, #9
 80014b2:	401a      	ands	r2, r3
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d116      	bne.n	80014ea <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014bc:	4b71      	ldr	r3, [pc, #452]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2202      	movs	r2, #2
 80014c2:	4013      	ands	r3, r2
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x17e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e299      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b6c      	ldr	r3, [pc, #432]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	22f8      	movs	r2, #248	; 0xf8
 80014d8:	4393      	bics	r3, r2
 80014da:	0019      	movs	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	00da      	lsls	r2, r3, #3
 80014e2:	4b68      	ldr	r3, [pc, #416]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e8:	e041      	b.n	800156e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d024      	beq.n	800153c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f2:	4b64      	ldr	r3, [pc, #400]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4b63      	ldr	r3, [pc, #396]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80014f8:	2101      	movs	r1, #1
 80014fa:	430a      	orrs	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7fe fed7 	bl	80002b0 <HAL_GetTick>
 8001502:	0003      	movs	r3, r0
 8001504:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001508:	f7fe fed2 	bl	80002b0 <HAL_GetTick>
 800150c:	0002      	movs	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e275      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151a:	4b5a      	ldr	r3, [pc, #360]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2202      	movs	r2, #2
 8001520:	4013      	ands	r3, r2
 8001522:	d0f1      	beq.n	8001508 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001524:	4b57      	ldr	r3, [pc, #348]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	22f8      	movs	r2, #248	; 0xf8
 800152a:	4393      	bics	r3, r2
 800152c:	0019      	movs	r1, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	00da      	lsls	r2, r3, #3
 8001534:	4b53      	ldr	r3, [pc, #332]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001536:	430a      	orrs	r2, r1
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e018      	b.n	800156e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153c:	4b51      	ldr	r3, [pc, #324]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b50      	ldr	r3, [pc, #320]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001542:	2101      	movs	r1, #1
 8001544:	438a      	bics	r2, r1
 8001546:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7fe feb2 	bl	80002b0 <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001552:	f7fe fead 	bl	80002b0 <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e250      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001564:	4b47      	ldr	r3, [pc, #284]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2202      	movs	r2, #2
 800156a:	4013      	ands	r3, r2
 800156c:	d1f1      	bne.n	8001552 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2208      	movs	r2, #8
 8001574:	4013      	ands	r3, r2
 8001576:	d036      	beq.n	80015e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d019      	beq.n	80015b4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001580:	4b40      	ldr	r3, [pc, #256]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001584:	4b3f      	ldr	r3, [pc, #252]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001586:	2101      	movs	r1, #1
 8001588:	430a      	orrs	r2, r1
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7fe fe90 	bl	80002b0 <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001596:	f7fe fe8b 	bl	80002b0 <HAL_GetTick>
 800159a:	0002      	movs	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e22e      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a8:	4b36      	ldr	r3, [pc, #216]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	2202      	movs	r2, #2
 80015ae:	4013      	ands	r3, r2
 80015b0:	d0f1      	beq.n	8001596 <HAL_RCC_OscConfig+0x242>
 80015b2:	e018      	b.n	80015e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b4:	4b33      	ldr	r3, [pc, #204]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80015b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015b8:	4b32      	ldr	r3, [pc, #200]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80015ba:	2101      	movs	r1, #1
 80015bc:	438a      	bics	r2, r1
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c0:	f7fe fe76 	bl	80002b0 <HAL_GetTick>
 80015c4:	0003      	movs	r3, r0
 80015c6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ca:	f7fe fe71 	bl	80002b0 <HAL_GetTick>
 80015ce:	0002      	movs	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e214      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015dc:	4b29      	ldr	r3, [pc, #164]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	2202      	movs	r2, #2
 80015e2:	4013      	ands	r3, r2
 80015e4:	d1f1      	bne.n	80015ca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2204      	movs	r2, #4
 80015ec:	4013      	ands	r3, r2
 80015ee:	d100      	bne.n	80015f2 <HAL_RCC_OscConfig+0x29e>
 80015f0:	e0b6      	b.n	8001760 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f2:	2317      	movs	r3, #23
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 80015fc:	69da      	ldr	r2, [r3, #28]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	055b      	lsls	r3, r3, #21
 8001602:	4013      	ands	r3, r2
 8001604:	d111      	bne.n	800162a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001608:	69da      	ldr	r2, [r3, #28]
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 800160c:	2180      	movs	r1, #128	; 0x80
 800160e:	0549      	lsls	r1, r1, #21
 8001610:	430a      	orrs	r2, r1
 8001612:	61da      	str	r2, [r3, #28]
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001616:	69da      	ldr	r2, [r3, #28]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	055b      	lsls	r3, r3, #21
 800161c:	4013      	ands	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001622:	2317      	movs	r3, #23
 8001624:	18fb      	adds	r3, r7, r3
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_RCC_OscConfig+0x33c>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4013      	ands	r3, r2
 8001634:	d11a      	bne.n	800166c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <HAL_RCC_OscConfig+0x33c>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_RCC_OscConfig+0x33c>)
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	0049      	lsls	r1, r1, #1
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001644:	f7fe fe34 	bl	80002b0 <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164e:	f7fe fe2f 	bl	80002b0 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b64      	cmp	r3, #100	; 0x64
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e1d2      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_RCC_OscConfig+0x33c>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4013      	ands	r3, r2
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d10f      	bne.n	8001694 <HAL_RCC_OscConfig+0x340>
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 8001676:	6a1a      	ldr	r2, [r3, #32]
 8001678:	4b02      	ldr	r3, [pc, #8]	; (8001684 <HAL_RCC_OscConfig+0x330>)
 800167a:	2101      	movs	r1, #1
 800167c:	430a      	orrs	r2, r1
 800167e:	621a      	str	r2, [r3, #32]
 8001680:	e036      	b.n	80016f0 <HAL_RCC_OscConfig+0x39c>
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	40021000 	.word	0x40021000
 8001688:	fffeffff 	.word	0xfffeffff
 800168c:	fffbffff 	.word	0xfffbffff
 8001690:	40007000 	.word	0x40007000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10c      	bne.n	80016b6 <HAL_RCC_OscConfig+0x362>
 800169c:	4bca      	ldr	r3, [pc, #808]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 800169e:	6a1a      	ldr	r2, [r3, #32]
 80016a0:	4bc9      	ldr	r3, [pc, #804]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80016a2:	2101      	movs	r1, #1
 80016a4:	438a      	bics	r2, r1
 80016a6:	621a      	str	r2, [r3, #32]
 80016a8:	4bc7      	ldr	r3, [pc, #796]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80016aa:	6a1a      	ldr	r2, [r3, #32]
 80016ac:	4bc6      	ldr	r3, [pc, #792]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80016ae:	2104      	movs	r1, #4
 80016b0:	438a      	bics	r2, r1
 80016b2:	621a      	str	r2, [r3, #32]
 80016b4:	e01c      	b.n	80016f0 <HAL_RCC_OscConfig+0x39c>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x384>
 80016be:	4bc2      	ldr	r3, [pc, #776]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80016c0:	6a1a      	ldr	r2, [r3, #32]
 80016c2:	4bc1      	ldr	r3, [pc, #772]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80016c4:	2104      	movs	r1, #4
 80016c6:	430a      	orrs	r2, r1
 80016c8:	621a      	str	r2, [r3, #32]
 80016ca:	4bbf      	ldr	r3, [pc, #764]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80016cc:	6a1a      	ldr	r2, [r3, #32]
 80016ce:	4bbe      	ldr	r3, [pc, #760]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80016d0:	2101      	movs	r1, #1
 80016d2:	430a      	orrs	r2, r1
 80016d4:	621a      	str	r2, [r3, #32]
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0x39c>
 80016d8:	4bbb      	ldr	r3, [pc, #748]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80016da:	6a1a      	ldr	r2, [r3, #32]
 80016dc:	4bba      	ldr	r3, [pc, #744]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80016de:	2101      	movs	r1, #1
 80016e0:	438a      	bics	r2, r1
 80016e2:	621a      	str	r2, [r3, #32]
 80016e4:	4bb8      	ldr	r3, [pc, #736]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80016e6:	6a1a      	ldr	r2, [r3, #32]
 80016e8:	4bb7      	ldr	r3, [pc, #732]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80016ea:	2104      	movs	r1, #4
 80016ec:	438a      	bics	r2, r1
 80016ee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d014      	beq.n	8001722 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f8:	f7fe fdda 	bl	80002b0 <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001700:	e009      	b.n	8001716 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f7fe fdd5 	bl	80002b0 <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	4aaf      	ldr	r2, [pc, #700]	; (80019cc <HAL_RCC_OscConfig+0x678>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e177      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001716:	4bac      	ldr	r3, [pc, #688]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	2202      	movs	r2, #2
 800171c:	4013      	ands	r3, r2
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x3ae>
 8001720:	e013      	b.n	800174a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7fe fdc5 	bl	80002b0 <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172a:	e009      	b.n	8001740 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7fe fdc0 	bl	80002b0 <HAL_GetTick>
 8001730:	0002      	movs	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	4aa5      	ldr	r2, [pc, #660]	; (80019cc <HAL_RCC_OscConfig+0x678>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e162      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001740:	4ba1      	ldr	r3, [pc, #644]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	2202      	movs	r2, #2
 8001746:	4013      	ands	r3, r2
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800174a:	2317      	movs	r3, #23
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d105      	bne.n	8001760 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001754:	4b9c      	ldr	r3, [pc, #624]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 8001756:	69da      	ldr	r2, [r3, #28]
 8001758:	4b9b      	ldr	r3, [pc, #620]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 800175a:	499d      	ldr	r1, [pc, #628]	; (80019d0 <HAL_RCC_OscConfig+0x67c>)
 800175c:	400a      	ands	r2, r1
 800175e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2210      	movs	r2, #16
 8001766:	4013      	ands	r3, r2
 8001768:	d063      	beq.n	8001832 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d12a      	bne.n	80017c8 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001772:	4b95      	ldr	r3, [pc, #596]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 8001774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001776:	4b94      	ldr	r3, [pc, #592]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 8001778:	2104      	movs	r1, #4
 800177a:	430a      	orrs	r2, r1
 800177c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800177e:	4b92      	ldr	r3, [pc, #584]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 8001780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001782:	4b91      	ldr	r3, [pc, #580]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 8001784:	2101      	movs	r1, #1
 8001786:	430a      	orrs	r2, r1
 8001788:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178a:	f7fe fd91 	bl	80002b0 <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001794:	f7fe fd8c 	bl	80002b0 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e12f      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017a6:	4b88      	ldr	r3, [pc, #544]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80017a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017aa:	2202      	movs	r2, #2
 80017ac:	4013      	ands	r3, r2
 80017ae:	d0f1      	beq.n	8001794 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017b0:	4b85      	ldr	r3, [pc, #532]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80017b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b4:	22f8      	movs	r2, #248	; 0xf8
 80017b6:	4393      	bics	r3, r2
 80017b8:	0019      	movs	r1, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	00da      	lsls	r2, r3, #3
 80017c0:	4b81      	ldr	r3, [pc, #516]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80017c2:	430a      	orrs	r2, r1
 80017c4:	635a      	str	r2, [r3, #52]	; 0x34
 80017c6:	e034      	b.n	8001832 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	3305      	adds	r3, #5
 80017ce:	d111      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80017d0:	4b7d      	ldr	r3, [pc, #500]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80017d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d4:	4b7c      	ldr	r3, [pc, #496]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80017d6:	2104      	movs	r1, #4
 80017d8:	438a      	bics	r2, r1
 80017da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017dc:	4b7a      	ldr	r3, [pc, #488]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80017de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e0:	22f8      	movs	r2, #248	; 0xf8
 80017e2:	4393      	bics	r3, r2
 80017e4:	0019      	movs	r1, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	00da      	lsls	r2, r3, #3
 80017ec:	4b76      	ldr	r3, [pc, #472]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80017ee:	430a      	orrs	r2, r1
 80017f0:	635a      	str	r2, [r3, #52]	; 0x34
 80017f2:	e01e      	b.n	8001832 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017f4:	4b74      	ldr	r3, [pc, #464]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80017f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f8:	4b73      	ldr	r3, [pc, #460]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80017fa:	2104      	movs	r1, #4
 80017fc:	430a      	orrs	r2, r1
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001800:	4b71      	ldr	r3, [pc, #452]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 8001802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001804:	4b70      	ldr	r3, [pc, #448]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 8001806:	2101      	movs	r1, #1
 8001808:	438a      	bics	r2, r1
 800180a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180c:	f7fe fd50 	bl	80002b0 <HAL_GetTick>
 8001810:	0003      	movs	r3, r0
 8001812:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001816:	f7fe fd4b 	bl	80002b0 <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e0ee      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001828:	4b67      	ldr	r3, [pc, #412]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 800182a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182c:	2202      	movs	r2, #2
 800182e:	4013      	ands	r3, r2
 8001830:	d1f1      	bne.n	8001816 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2220      	movs	r2, #32
 8001838:	4013      	ands	r3, r2
 800183a:	d05c      	beq.n	80018f6 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800183c:	4b62      	ldr	r3, [pc, #392]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	220c      	movs	r2, #12
 8001842:	4013      	ands	r3, r2
 8001844:	2b0c      	cmp	r3, #12
 8001846:	d00e      	beq.n	8001866 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001848:	4b5f      	ldr	r3, [pc, #380]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	220c      	movs	r2, #12
 800184e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001850:	2b08      	cmp	r3, #8
 8001852:	d114      	bne.n	800187e <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001854:	4b5c      	ldr	r3, [pc, #368]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	23c0      	movs	r3, #192	; 0xc0
 800185a:	025b      	lsls	r3, r3, #9
 800185c:	401a      	ands	r2, r3
 800185e:	23c0      	movs	r3, #192	; 0xc0
 8001860:	025b      	lsls	r3, r3, #9
 8001862:	429a      	cmp	r2, r3
 8001864:	d10b      	bne.n	800187e <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001866:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 8001868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	025b      	lsls	r3, r3, #9
 800186e:	4013      	ands	r3, r2
 8001870:	d040      	beq.n	80018f4 <HAL_RCC_OscConfig+0x5a0>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d03c      	beq.n	80018f4 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e0c3      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d01b      	beq.n	80018be <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001886:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 8001888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800188a:	4b4f      	ldr	r3, [pc, #316]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	0249      	lsls	r1, r1, #9
 8001890:	430a      	orrs	r2, r1
 8001892:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7fe fd0c 	bl	80002b0 <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800189e:	f7fe fd07 	bl	80002b0 <HAL_GetTick>
 80018a2:	0002      	movs	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e0aa      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80018b0:	4b45      	ldr	r3, [pc, #276]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80018b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	025b      	lsls	r3, r3, #9
 80018b8:	4013      	ands	r3, r2
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x54a>
 80018bc:	e01b      	b.n	80018f6 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80018be:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80018c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018c2:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80018c4:	4943      	ldr	r1, [pc, #268]	; (80019d4 <HAL_RCC_OscConfig+0x680>)
 80018c6:	400a      	ands	r2, r1
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7fe fcf1 	bl	80002b0 <HAL_GetTick>
 80018ce:	0003      	movs	r3, r0
 80018d0:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018d4:	f7fe fcec 	bl	80002b0 <HAL_GetTick>
 80018d8:	0002      	movs	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e08f      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80018e6:	4b38      	ldr	r3, [pc, #224]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80018e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	025b      	lsls	r3, r3, #9
 80018ee:	4013      	ands	r3, r2
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x580>
 80018f2:	e000      	b.n	80018f6 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80018f4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d100      	bne.n	8001900 <HAL_RCC_OscConfig+0x5ac>
 80018fe:	e081      	b.n	8001a04 <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001900:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	220c      	movs	r2, #12
 8001906:	4013      	ands	r3, r2
 8001908:	2b08      	cmp	r3, #8
 800190a:	d100      	bne.n	800190e <HAL_RCC_OscConfig+0x5ba>
 800190c:	e078      	b.n	8001a00 <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	2b02      	cmp	r3, #2
 8001914:	d14c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001916:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 800191c:	492e      	ldr	r1, [pc, #184]	; (80019d8 <HAL_RCC_OscConfig+0x684>)
 800191e:	400a      	ands	r2, r1
 8001920:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7fe fcc5 	bl	80002b0 <HAL_GetTick>
 8001926:	0003      	movs	r3, r0
 8001928:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192c:	f7fe fcc0 	bl	80002b0 <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e063      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193e:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	049b      	lsls	r3, r3, #18
 8001946:	4013      	ands	r3, r2
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194a:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	220f      	movs	r2, #15
 8001950:	4393      	bics	r3, r2
 8001952:	0019      	movs	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 800195a:	430a      	orrs	r2, r1
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4a1e      	ldr	r2, [pc, #120]	; (80019dc <HAL_RCC_OscConfig+0x688>)
 8001964:	4013      	ands	r3, r2
 8001966:	0019      	movs	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	431a      	orrs	r2, r3
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 8001974:	430a      	orrs	r2, r1
 8001976:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 800197e:	2180      	movs	r1, #128	; 0x80
 8001980:	0449      	lsls	r1, r1, #17
 8001982:	430a      	orrs	r2, r1
 8001984:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7fe fc93 	bl	80002b0 <HAL_GetTick>
 800198a:	0003      	movs	r3, r0
 800198c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001990:	f7fe fc8e 	bl	80002b0 <HAL_GetTick>
 8001994:	0002      	movs	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e031      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	049b      	lsls	r3, r3, #18
 80019aa:	4013      	ands	r3, r2
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x63c>
 80019ae:	e029      	b.n	8001a04 <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <HAL_RCC_OscConfig+0x674>)
 80019b6:	4908      	ldr	r1, [pc, #32]	; (80019d8 <HAL_RCC_OscConfig+0x684>)
 80019b8:	400a      	ands	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7fe fc78 	bl	80002b0 <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c4:	e015      	b.n	80019f2 <HAL_RCC_OscConfig+0x69e>
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	40021000 	.word	0x40021000
 80019cc:	00001388 	.word	0x00001388
 80019d0:	efffffff 	.word	0xefffffff
 80019d4:	fffeffff 	.word	0xfffeffff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e0:	f7fe fc66 	bl	80002b0 <HAL_GetTick>
 80019e4:	0002      	movs	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e009      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <HAL_RCC_OscConfig+0x6bc>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	049b      	lsls	r3, r3, #18
 80019fa:	4013      	ands	r3, r2
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x68c>
 80019fe:	e001      	b.n	8001a04 <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b006      	add	sp, #24
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	40021000 	.word	0x40021000

08001a14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a22:	4b7b      	ldr	r3, [pc, #492]	; (8001c10 <HAL_RCC_ClockConfig+0x1fc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2201      	movs	r2, #1
 8001a28:	4013      	ands	r3, r2
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d911      	bls.n	8001a54 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a30:	4b77      	ldr	r3, [pc, #476]	; (8001c10 <HAL_RCC_ClockConfig+0x1fc>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2201      	movs	r2, #1
 8001a36:	4393      	bics	r3, r2
 8001a38:	0019      	movs	r1, r3
 8001a3a:	4b75      	ldr	r3, [pc, #468]	; (8001c10 <HAL_RCC_ClockConfig+0x1fc>)
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a42:	4b73      	ldr	r3, [pc, #460]	; (8001c10 <HAL_RCC_ClockConfig+0x1fc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	4013      	ands	r3, r2
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0d8      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d009      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a5e:	4b6d      	ldr	r3, [pc, #436]	; (8001c14 <HAL_RCC_ClockConfig+0x200>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	22f0      	movs	r2, #240	; 0xf0
 8001a64:	4393      	bics	r3, r2
 8001a66:	0019      	movs	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	4b69      	ldr	r3, [pc, #420]	; (8001c14 <HAL_RCC_ClockConfig+0x200>)
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2201      	movs	r2, #1
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d100      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x6a>
 8001a7c:	e089      	b.n	8001b92 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4b63      	ldr	r3, [pc, #396]	; (8001c14 <HAL_RCC_ClockConfig+0x200>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	029b      	lsls	r3, r3, #10
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d120      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e0b7      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9e:	4b5d      	ldr	r3, [pc, #372]	; (8001c14 <HAL_RCC_ClockConfig+0x200>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	049b      	lsls	r3, r3, #18
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d114      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0ab      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ab6:	4b57      	ldr	r3, [pc, #348]	; (8001c14 <HAL_RCC_ClockConfig+0x200>)
 8001ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	025b      	lsls	r3, r3, #9
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d108      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e09f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac6:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <HAL_RCC_ClockConfig+0x200>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2202      	movs	r2, #2
 8001acc:	4013      	ands	r3, r2
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e098      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad4:	4b4f      	ldr	r3, [pc, #316]	; (8001c14 <HAL_RCC_ClockConfig+0x200>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2203      	movs	r2, #3
 8001ada:	4393      	bics	r3, r2
 8001adc:	0019      	movs	r1, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	4b4c      	ldr	r3, [pc, #304]	; (8001c14 <HAL_RCC_ClockConfig+0x200>)
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae8:	f7fe fbe2 	bl	80002b0 <HAL_GetTick>
 8001aec:	0003      	movs	r3, r0
 8001aee:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d111      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af8:	e009      	b.n	8001b0e <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afa:	f7fe fbd9 	bl	80002b0 <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	4a44      	ldr	r2, [pc, #272]	; (8001c18 <HAL_RCC_ClockConfig+0x204>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e07b      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b0e:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <HAL_RCC_ClockConfig+0x200>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	220c      	movs	r2, #12
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d1ef      	bne.n	8001afa <HAL_RCC_ClockConfig+0xe6>
 8001b1a:	e03a      	b.n	8001b92 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d111      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b24:	e009      	b.n	8001b3a <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b26:	f7fe fbc3 	bl	80002b0 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	4a39      	ldr	r2, [pc, #228]	; (8001c18 <HAL_RCC_ClockConfig+0x204>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e065      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b3a:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <HAL_RCC_ClockConfig+0x200>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	220c      	movs	r2, #12
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d1ef      	bne.n	8001b26 <HAL_RCC_ClockConfig+0x112>
 8001b46:	e024      	b.n	8001b92 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d11b      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001b50:	e009      	b.n	8001b66 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b52:	f7fe fbad 	bl	80002b0 <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	4a2e      	ldr	r2, [pc, #184]	; (8001c18 <HAL_RCC_ClockConfig+0x204>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e04f      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001b66:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_RCC_ClockConfig+0x200>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	2b0c      	cmp	r3, #12
 8001b70:	d1ef      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x13e>
 8001b72:	e00e      	b.n	8001b92 <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b74:	f7fe fb9c 	bl	80002b0 <HAL_GetTick>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	4a26      	ldr	r2, [pc, #152]	; (8001c18 <HAL_RCC_ClockConfig+0x204>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e03e      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b88:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <HAL_RCC_ClockConfig+0x200>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	220c      	movs	r2, #12
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b92:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <HAL_RCC_ClockConfig+0x1fc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2201      	movs	r2, #1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d211      	bcs.n	8001bc4 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_ClockConfig+0x1fc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4393      	bics	r3, r2
 8001ba8:	0019      	movs	r1, r3
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_RCC_ClockConfig+0x1fc>)
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_RCC_ClockConfig+0x1fc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e020      	b.n	8001c06 <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2204      	movs	r2, #4
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d009      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_RCC_ClockConfig+0x200>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <HAL_RCC_ClockConfig+0x208>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_RCC_ClockConfig+0x200>)
 8001bde:	430a      	orrs	r2, r1
 8001be0:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001be2:	f000 f821 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001be6:	0001      	movs	r1, r0
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_RCC_ClockConfig+0x200>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	220f      	movs	r2, #15
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <HAL_RCC_ClockConfig+0x20c>)
 8001bf4:	5cd3      	ldrb	r3, [r2, r3]
 8001bf6:	000a      	movs	r2, r1
 8001bf8:	40da      	lsrs	r2, r3
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_RCC_ClockConfig+0x210>)
 8001bfc:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f003 fdfa 	bl	80057f8 <HAL_InitTick>
  
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	0018      	movs	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b004      	add	sp, #16
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	40022000 	.word	0x40022000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	00001388 	.word	0x00001388
 8001c1c:	fffff8ff 	.word	0xfffff8ff
 8001c20:	08006370 	.word	0x08006370
 8001c24:	20000000 	.word	0x20000000

08001c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b08f      	sub	sp, #60	; 0x3c
 8001c2c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c2e:	2314      	movs	r3, #20
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	4a37      	ldr	r2, [pc, #220]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001c34:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c36:	c313      	stmia	r3!, {r0, r1, r4}
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	4a35      	ldr	r2, [pc, #212]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xec>)
 8001c40:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c42:	c313      	stmia	r3!, {r0, r1, r4}
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c50:	2300      	movs	r3, #0
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c64:	220c      	movs	r2, #12
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d006      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x52>
 8001c6c:	2b0c      	cmp	r3, #12
 8001c6e:	d043      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xd0>
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d144      	bne.n	8001cfe <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c74:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c78:	e044      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7c:	0c9b      	lsrs	r3, r3, #18
 8001c7e:	220f      	movs	r2, #15
 8001c80:	4013      	ands	r3, r2
 8001c82:	2214      	movs	r2, #20
 8001c84:	18ba      	adds	r2, r7, r2
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c8a:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8e:	220f      	movs	r2, #15
 8001c90:	4013      	ands	r3, r2
 8001c92:	1d3a      	adds	r2, r7, #4
 8001c94:	5cd3      	ldrb	r3, [r2, r3]
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c9a:	23c0      	movs	r3, #192	; 0xc0
 8001c9c:	025b      	lsls	r3, r3, #9
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	025b      	lsls	r3, r3, #9
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d109      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001caa:	481c      	ldr	r0, [pc, #112]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001cac:	f7fe fa2a 	bl	8000104 <__udivsi3>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	001a      	movs	r2, r3
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	4353      	muls	r3, r2
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cba:	e01a      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cbe:	23c0      	movs	r3, #192	; 0xc0
 8001cc0:	025b      	lsls	r3, r3, #9
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	23c0      	movs	r3, #192	; 0xc0
 8001cc6:	025b      	lsls	r3, r3, #9
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d109      	bne.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8001ccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cce:	4814      	ldr	r0, [pc, #80]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cd0:	f7fe fa18 	bl	8000104 <__udivsi3>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	001a      	movs	r2, r3
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	4353      	muls	r3, r2
 8001cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ce2:	480e      	ldr	r0, [pc, #56]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ce4:	f7fe fa0e 	bl	8000104 <__udivsi3>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	001a      	movs	r2, r3
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	4353      	muls	r3, r2
 8001cf0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8001cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cf6:	e005      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cfa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cfc:	e002      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d02:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d06:	0018      	movs	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b00f      	add	sp, #60	; 0x3c
 8001d0c:	bd90      	pop	{r4, r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	0800633c 	.word	0x0800633c
 8001d14:	0800634c 	.word	0x0800634c
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	007a1200 	.word	0x007a1200
 8001d20:	02dc6c00 	.word	0x02dc6c00

08001d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d28:	4b02      	ldr	r3, [pc, #8]	; (8001d34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	20000000 	.word	0x20000000

08001d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d3c:	f7ff fff2 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d40:	0001      	movs	r1, r0
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	2207      	movs	r2, #7
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d4e:	5cd3      	ldrb	r3, [r2, r3]
 8001d50:	40d9      	lsrs	r1, r3
 8001d52:	000b      	movs	r3, r1
}    
 8001d54:	0018      	movs	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	08006380 	.word	0x08006380

08001d64 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2207      	movs	r2, #7
 8001d72:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <HAL_RCC_GetClockConfig+0x4c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2203      	movs	r2, #3
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_GetClockConfig+0x4c>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	22f0      	movs	r2, #240	; 0xf0
 8001d86:	401a      	ands	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_RCC_GetClockConfig+0x4c>)
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	23e0      	movs	r3, #224	; 0xe0
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	401a      	ands	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_RCC_GetClockConfig+0x50>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	401a      	ands	r2, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	601a      	str	r2, [r3, #0]
}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b002      	add	sp, #8
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40022000 	.word	0x40022000

08001db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	025b      	lsls	r3, r3, #9
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d100      	bne.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001dd4:	e08f      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001dd6:	2317      	movs	r3, #23
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dde:	4b6f      	ldr	r3, [pc, #444]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	055b      	lsls	r3, r3, #21
 8001de6:	4013      	ands	r3, r2
 8001de8:	d111      	bne.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	4b6c      	ldr	r3, [pc, #432]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001dec:	69da      	ldr	r2, [r3, #28]
 8001dee:	4b6b      	ldr	r3, [pc, #428]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001df0:	2180      	movs	r1, #128	; 0x80
 8001df2:	0549      	lsls	r1, r1, #21
 8001df4:	430a      	orrs	r2, r1
 8001df6:	61da      	str	r2, [r3, #28]
 8001df8:	4b68      	ldr	r3, [pc, #416]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001dfa:	69da      	ldr	r2, [r3, #28]
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	055b      	lsls	r3, r3, #21
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e06:	2317      	movs	r3, #23
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0e:	4b64      	ldr	r3, [pc, #400]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4013      	ands	r3, r2
 8001e18:	d11a      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e1a:	4b61      	ldr	r3, [pc, #388]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4b60      	ldr	r3, [pc, #384]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001e20:	2180      	movs	r1, #128	; 0x80
 8001e22:	0049      	lsls	r1, r1, #1
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e28:	f7fe fa42 	bl	80002b0 <HAL_GetTick>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	e008      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e32:	f7fe fa3d 	bl	80002b0 <HAL_GetTick>
 8001e36:	0002      	movs	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b64      	cmp	r3, #100	; 0x64
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e0a6      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	4b56      	ldr	r3, [pc, #344]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e50:	4b52      	ldr	r3, [pc, #328]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e52:	6a1a      	ldr	r2, [r3, #32]
 8001e54:	23c0      	movs	r3, #192	; 0xc0
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d034      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	23c0      	movs	r3, #192	; 0xc0
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d02c      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e72:	4b4a      	ldr	r3, [pc, #296]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4a4b      	ldr	r2, [pc, #300]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e7c:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e7e:	6a1a      	ldr	r2, [r3, #32]
 8001e80:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e82:	2180      	movs	r1, #128	; 0x80
 8001e84:	0249      	lsls	r1, r1, #9
 8001e86:	430a      	orrs	r2, r1
 8001e88:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e8a:	4b44      	ldr	r3, [pc, #272]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e8c:	6a1a      	ldr	r2, [r3, #32]
 8001e8e:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e90:	4945      	ldr	r1, [pc, #276]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001e92:	400a      	ands	r2, r1
 8001e94:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e96:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d013      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7fe fa04 	bl	80002b0 <HAL_GetTick>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eac:	e009      	b.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7fe f9ff 	bl	80002b0 <HAL_GetTick>
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	4a3c      	ldr	r2, [pc, #240]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e067      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec2:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ecc:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a34      	ldr	r2, [pc, #208]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	4b30      	ldr	r3, [pc, #192]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001edc:	430a      	orrs	r2, r1
 8001ede:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ee0:	2317      	movs	r3, #23
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d105      	bne.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eea:	4b2c      	ldr	r3, [pc, #176]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001eec:	69da      	ldr	r2, [r3, #28]
 8001eee:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ef0:	492f      	ldr	r1, [pc, #188]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2201      	movs	r2, #1
 8001efc:	4013      	ands	r3, r2
 8001efe:	d009      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f00:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	2203      	movs	r2, #3
 8001f06:	4393      	bics	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f10:	430a      	orrs	r2, r1
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d009      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a24      	ldr	r2, [pc, #144]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	02db      	lsls	r3, r3, #11
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d009      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a1d      	ldr	r2, [pc, #116]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2220      	movs	r2, #32
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d009      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	2210      	movs	r2, #16
 8001f62:	4393      	bics	r3, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d009      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	2240      	movs	r2, #64	; 0x40
 8001f82:	4393      	bics	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b006      	add	sp, #24
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	fffffcff 	.word	0xfffffcff
 8001fa8:	fffeffff 	.word	0xfffeffff
 8001fac:	00001388 	.word	0x00001388
 8001fb0:	efffffff 	.word	0xefffffff
 8001fb4:	fffcffff 	.word	0xfffcffff
 8001fb8:	fff3ffff 	.word	0xfff3ffff

08001fbc <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e081      	b.n	80020d2 <HAL_RTC_Init+0x116>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7f5b      	ldrb	r3, [r3, #29]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d106      	bne.n	8001fe6 <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f003 fac7 	bl	8005574 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	22ca      	movs	r2, #202	; 0xca
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2253      	movs	r2, #83	; 0x53
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	0018      	movs	r0, r3
 8002000:	f000 f899 	bl	8002136 <RTC_EnterInitMode>
 8002004:	1e03      	subs	r3, r0, #0
 8002006:	d008      	beq.n	800201a <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	22ff      	movs	r2, #255	; 0xff
 800200e:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2204      	movs	r2, #4
 8002014:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e05b      	b.n	80020d2 <HAL_RTC_Init+0x116>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	492d      	ldr	r1, [pc, #180]	; (80020dc <HAL_RTC_Init+0x120>)
 8002026:	400a      	ands	r2, r1
 8002028:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6899      	ldr	r1, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	68d2      	ldr	r2, [r2, #12]
 8002050:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6919      	ldr	r1, [r3, #16]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	041a      	lsls	r2, r3, #16
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2180      	movs	r1, #128	; 0x80
 8002072:	438a      	bics	r2, r1
 8002074:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2220      	movs	r2, #32
 800207e:	4013      	ands	r3, r2
 8002080:	d10e      	bne.n	80020a0 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	0018      	movs	r0, r3
 8002086:	f000 f82d 	bl	80020e4 <HAL_RTC_WaitForSynchro>
 800208a:	1e03      	subs	r3, r0, #0
 800208c:	d008      	beq.n	80020a0 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	22ff      	movs	r2, #255	; 0xff
 8002094:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2204      	movs	r2, #4
 800209a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e018      	b.n	80020d2 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	490d      	ldr	r1, [pc, #52]	; (80020e0 <HAL_RTC_Init+0x124>)
 80020ac:	400a      	ands	r2, r1
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	22ff      	movs	r2, #255	; 0xff
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 80020d0:	2300      	movs	r3, #0
  }
}
 80020d2:	0018      	movs	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b002      	add	sp, #8
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	ff8fffbf 	.word	0xff8fffbf
 80020e0:	fffbffff 	.word	0xfffbffff

080020e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	21a0      	movs	r1, #160	; 0xa0
 80020fc:	438a      	bics	r2, r1
 80020fe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002100:	f7fe f8d6 	bl	80002b0 <HAL_GetTick>
 8002104:	0003      	movs	r3, r0
 8002106:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002108:	e00a      	b.n	8002120 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 800210a:	f7fe f8d1 	bl	80002b0 <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1ad2      	subs	r2, r2, r3
 8002114:	23fa      	movs	r3, #250	; 0xfa
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	429a      	cmp	r2, r3
 800211a:	d901      	bls.n	8002120 <HAL_RTC_WaitForSynchro+0x3c>
    {       
      return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e006      	b.n	800212e <HAL_RTC_WaitForSynchro+0x4a>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2220      	movs	r2, #32
 8002128:	4013      	ands	r3, r2
 800212a:	d0ee      	beq.n	800210a <HAL_RTC_WaitForSynchro+0x26>
    } 
  }

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	b004      	add	sp, #16
 8002134:	bd80      	pop	{r7, pc}

08002136 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2240      	movs	r2, #64	; 0x40
 800214a:	4013      	ands	r3, r2
 800214c:	d11a      	bne.n	8002184 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2201      	movs	r2, #1
 8002154:	4252      	negs	r2, r2
 8002156:	60da      	str	r2, [r3, #12]
    
    tickstart = HAL_GetTick();
 8002158:	f7fe f8aa 	bl	80002b0 <HAL_GetTick>
 800215c:	0003      	movs	r3, r0
 800215e:	60fb      	str	r3, [r7, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002160:	e00a      	b.n	8002178 <RTC_EnterInitMode+0x42>
    {
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002162:	f7fe f8a5 	bl	80002b0 <HAL_GetTick>
 8002166:	0002      	movs	r2, r0
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	1ad2      	subs	r2, r2, r3
 800216c:	23fa      	movs	r3, #250	; 0xfa
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	429a      	cmp	r2, r3
 8002172:	d901      	bls.n	8002178 <RTC_EnterInitMode+0x42>
      {       
        return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e006      	b.n	8002186 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2240      	movs	r2, #64	; 0x40
 8002180:	4013      	ands	r3, r2
 8002182:	d0ee      	beq.n	8002162 <RTC_EnterInitMode+0x2c>
      } 
    }
  }
  
  return HAL_OK;  
 8002184:	2300      	movs	r3, #0
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b004      	add	sp, #16
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e08a      	b.n	80022b8 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	225d      	movs	r2, #93	; 0x5d
 80021ac:	5c9b      	ldrb	r3, [r3, r2]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d107      	bne.n	80021c4 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	225c      	movs	r2, #92	; 0x5c
 80021b8:	2100      	movs	r1, #0
 80021ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	0018      	movs	r0, r3
 80021c0:	f003 fa6c 	bl	800569c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	225d      	movs	r2, #93	; 0x5d
 80021c8:	2102      	movs	r1, #2
 80021ca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2140      	movs	r1, #64	; 0x40
 80021d8:	438a      	bics	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	23e0      	movs	r3, #224	; 0xe0
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d902      	bls.n	80021ee <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e002      	b.n	80021f4 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	015b      	lsls	r3, r3, #5
 80021f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	23f0      	movs	r3, #240	; 0xf0
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d008      	beq.n	8002212 <HAL_SPI_Init+0x82>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	23e0      	movs	r3, #224	; 0xe0
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	429a      	cmp	r2, r3
 800220a:	d002      	beq.n	8002212 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10c      	bne.n	8002234 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	23e0      	movs	r3, #224	; 0xe0
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	429a      	cmp	r2, r3
 8002224:	d903      	bls.n	800222e <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2202      	movs	r2, #2
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
 800222c:	e002      	b.n	8002234 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6999      	ldr	r1, [r3, #24]
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	400b      	ands	r3, r1
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	431a      	orrs	r2, r3
 8002262:	0011      	movs	r1, r2
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	0c1b      	lsrs	r3, r3, #16
 8002276:	2204      	movs	r2, #4
 8002278:	401a      	ands	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	431a      	orrs	r2, r3
 800228c:	0011      	movs	r1, r2
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	430a      	orrs	r2, r1
 8002296:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69da      	ldr	r2, [r3, #28]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4907      	ldr	r1, [pc, #28]	; (80022c0 <HAL_SPI_Init+0x130>)
 80022a4:	400a      	ands	r2, r1
 80022a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	225d      	movs	r2, #93	; 0x5d
 80022b2:	2101      	movs	r1, #1
 80022b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	0018      	movs	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b004      	add	sp, #16
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	fffff7ff 	.word	0xfffff7ff

080022c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	1dbb      	adds	r3, r7, #6
 80022d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022d8:	231f      	movs	r3, #31
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	225c      	movs	r2, #92	; 0x5c
 80022e4:	5c9b      	ldrb	r3, [r3, r2]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_SPI_Transmit+0x2a>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e14f      	b.n	800258e <HAL_SPI_Transmit+0x2ca>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	225c      	movs	r2, #92	; 0x5c
 80022f2:	2101      	movs	r1, #1
 80022f4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022f6:	f7fd ffdb 	bl	80002b0 <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	225d      	movs	r2, #93	; 0x5d
 8002302:	5c9b      	ldrb	r3, [r3, r2]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d004      	beq.n	8002314 <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 800230a:	231f      	movs	r3, #31
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	2202      	movs	r2, #2
 8002310:	701a      	strb	r2, [r3, #0]
    goto error;
 8002312:	e131      	b.n	8002578 <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_SPI_Transmit+0x5e>
 800231a:	1dbb      	adds	r3, r7, #6
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d104      	bne.n	800232c <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 8002322:	231f      	movs	r3, #31
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
    goto error;
 800232a:	e125      	b.n	8002578 <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	225d      	movs	r2, #93	; 0x5d
 8002330:	2103      	movs	r1, #3
 8002332:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1dba      	adds	r2, r7, #6
 8002344:	8812      	ldrh	r2, [r2, #0]
 8002346:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1dba      	adds	r2, r7, #6
 800234c:	8812      	ldrh	r2, [r2, #0]
 800234e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2244      	movs	r2, #68	; 0x44
 800235a:	2100      	movs	r1, #0
 800235c:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2246      	movs	r2, #70	; 0x46
 8002362:	2100      	movs	r1, #0
 8002364:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	021b      	lsls	r3, r3, #8
 800237a:	429a      	cmp	r2, r3
 800237c:	d108      	bne.n	8002390 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	01c9      	lsls	r1, r1, #7
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2240      	movs	r2, #64	; 0x40
 8002398:	4013      	ands	r3, r2
 800239a:	2b40      	cmp	r3, #64	; 0x40
 800239c:	d007      	beq.n	80023ae <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2140      	movs	r1, #64	; 0x40
 80023aa:	430a      	orrs	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	23e0      	movs	r3, #224	; 0xe0
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d948      	bls.n	800244c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d004      	beq.n	80023cc <HAL_SPI_Transmit+0x108>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d139      	bne.n	8002440 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	881a      	ldrh	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	3302      	adds	r3, #2
 80023da:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023ea:	e029      	b.n	8002440 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2202      	movs	r2, #2
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d10f      	bne.n	800241a <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	881a      	ldrh	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	3302      	adds	r3, #2
 8002408:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002418:	e012      	b.n	8002440 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_SPI_Transmit+0x172>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	d00c      	beq.n	8002440 <HAL_SPI_Transmit+0x17c>
 8002426:	f7fd ff43 	bl	80002b0 <HAL_GetTick>
 800242a:	0002      	movs	r2, r0
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d804      	bhi.n	8002440 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002436:	231f      	movs	r3, #31
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	2203      	movs	r2, #3
 800243c:	701a      	strb	r2, [r3, #0]
          goto error;
 800243e:	e09b      	b.n	8002578 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1d0      	bne.n	80023ec <HAL_SPI_Transmit+0x128>
 800244a:	e071      	b.n	8002530 <HAL_SPI_Transmit+0x26c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d004      	beq.n	800245e <HAL_SPI_Transmit+0x19a>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d163      	bne.n	8002526 <HAL_SPI_Transmit+0x262>
    {
      if (hspi->TxXferCount > 1U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d90f      	bls.n	8002488 <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	881a      	ldrh	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	3302      	adds	r3, #2
 8002476:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b02      	subs	r3, #2
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002486:	e04e      	b.n	8002526 <HAL_SPI_Transmit+0x262>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	60ba      	str	r2, [r7, #8]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	320c      	adds	r2, #12
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80024a6:	e03e      	b.n	8002526 <HAL_SPI_Transmit+0x262>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2202      	movs	r2, #2
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d124      	bne.n	8002500 <HAL_SPI_Transmit+0x23c>
      {
        if (hspi->TxXferCount > 1U)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d90f      	bls.n	80024e0 <HAL_SPI_Transmit+0x21c>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	881a      	ldrh	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	3302      	adds	r3, #2
 80024ce:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b02      	subs	r3, #2
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024de:	e022      	b.n	8002526 <HAL_SPI_Transmit+0x262>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	60ba      	str	r2, [r7, #8]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	320c      	adds	r2, #12
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024fe:	e012      	b.n	8002526 <HAL_SPI_Transmit+0x262>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_SPI_Transmit+0x258>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	3301      	adds	r3, #1
 800250a:	d00c      	beq.n	8002526 <HAL_SPI_Transmit+0x262>
 800250c:	f7fd fed0 	bl	80002b0 <HAL_GetTick>
 8002510:	0002      	movs	r2, r0
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d804      	bhi.n	8002526 <HAL_SPI_Transmit+0x262>
        {
          errorcode = HAL_TIMEOUT;
 800251c:	231f      	movs	r3, #31
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	2203      	movs	r2, #3
 8002522:	701a      	strb	r2, [r3, #0]
          goto error;
 8002524:	e028      	b.n	8002578 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1bb      	bne.n	80024a8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	6839      	ldr	r1, [r7, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	0018      	movs	r0, r3
 8002538:	f000 fcc8 	bl	8002ecc <SPI_EndRxTxTransaction>
 800253c:	1e03      	subs	r3, r0, #0
 800253e:	d002      	beq.n	8002546 <HAL_SPI_Transmit+0x282>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10a      	bne.n	8002564 <HAL_SPI_Transmit+0x2a0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <HAL_SPI_Transmit+0x2b2>
  {
    errorcode = HAL_ERROR;
 800256c:	231f      	movs	r3, #31
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	e000      	b.n	8002578 <HAL_SPI_Transmit+0x2b4>
  }

error:
 8002576:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	225d      	movs	r2, #93	; 0x5d
 800257c:	2101      	movs	r1, #1
 800257e:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	225c      	movs	r2, #92	; 0x5c
 8002584:	2100      	movs	r1, #0
 8002586:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002588:	231f      	movs	r3, #31
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	781b      	ldrb	r3, [r3, #0]
}
 800258e:	0018      	movs	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	b008      	add	sp, #32
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af02      	add	r7, sp, #8
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	1dbb      	adds	r3, r7, #6
 80025a6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025ac:	2317      	movs	r3, #23
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	2382      	movs	r3, #130	; 0x82
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	429a      	cmp	r2, r3
 80025be:	d113      	bne.n	80025e8 <HAL_SPI_Receive+0x50>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10f      	bne.n	80025e8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	225d      	movs	r2, #93	; 0x5d
 80025cc:	2104      	movs	r1, #4
 80025ce:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80025d0:	1dbb      	adds	r3, r7, #6
 80025d2:	881c      	ldrh	r4, [r3, #0]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	0023      	movs	r3, r4
 80025e0:	f000 f918 	bl	8002814 <HAL_SPI_TransmitReceive>
 80025e4:	0003      	movs	r3, r0
 80025e6:	e10c      	b.n	8002802 <HAL_SPI_Receive+0x26a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	225c      	movs	r2, #92	; 0x5c
 80025ec:	5c9b      	ldrb	r3, [r3, r2]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_SPI_Receive+0x5e>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e105      	b.n	8002802 <HAL_SPI_Receive+0x26a>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	225c      	movs	r2, #92	; 0x5c
 80025fa:	2101      	movs	r1, #1
 80025fc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025fe:	f7fd fe57 	bl	80002b0 <HAL_GetTick>
 8002602:	0003      	movs	r3, r0
 8002604:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	225d      	movs	r2, #93	; 0x5d
 800260a:	5c9b      	ldrb	r3, [r3, r2]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d004      	beq.n	800261c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8002612:	2317      	movs	r3, #23
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	2202      	movs	r2, #2
 8002618:	701a      	strb	r2, [r3, #0]
    goto error;
 800261a:	e0e7      	b.n	80027ec <HAL_SPI_Receive+0x254>
  }

  if ((pData == NULL) || (Size == 0U))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_SPI_Receive+0x92>
 8002622:	1dbb      	adds	r3, r7, #6
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d104      	bne.n	8002634 <HAL_SPI_Receive+0x9c>
  {
    errorcode = HAL_ERROR;
 800262a:	2317      	movs	r3, #23
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
    goto error;
 8002632:	e0db      	b.n	80027ec <HAL_SPI_Receive+0x254>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	225d      	movs	r2, #93	; 0x5d
 8002638:	2104      	movs	r1, #4
 800263a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1dba      	adds	r2, r7, #6
 800264c:	2144      	movs	r1, #68	; 0x44
 800264e:	8812      	ldrh	r2, [r2, #0]
 8002650:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1dba      	adds	r2, r7, #6
 8002656:	2146      	movs	r1, #70	; 0x46
 8002658:	8812      	ldrh	r2, [r2, #0]
 800265a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx FiFo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	23e0      	movs	r3, #224	; 0xe0
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	429a      	cmp	r2, r3
 8002684:	d908      	bls.n	8002698 <HAL_SPI_Receive+0x100>
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	495e      	ldr	r1, [pc, #376]	; (800280c <HAL_SPI_Receive+0x274>)
 8002692:	400a      	ands	r2, r1
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	e008      	b.n	80026aa <HAL_SPI_Receive+0x112>
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	0149      	lsls	r1, r1, #5
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d107      	bne.n	80026c6 <HAL_SPI_Receive+0x12e>
  {
    SPI_1LINE_RX(hspi);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4953      	ldr	r1, [pc, #332]	; (8002810 <HAL_SPI_Receive+0x278>)
 80026c2:	400a      	ands	r2, r1
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2240      	movs	r2, #64	; 0x40
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b40      	cmp	r3, #64	; 0x40
 80026d2:	d007      	beq.n	80026e4 <HAL_SPI_Receive+0x14c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2140      	movs	r1, #64	; 0x40
 80026e0:	430a      	orrs	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	23e0      	movs	r3, #224	; 0xe0
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d862      	bhi.n	80027b6 <HAL_SPI_Receive+0x21e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80026f0:	e02d      	b.n	800274e <HAL_SPI_Receive+0x1b6>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2201      	movs	r2, #1
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d113      	bne.n	8002728 <HAL_SPI_Receive+0x190>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	330c      	adds	r3, #12
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3301      	adds	r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2246      	movs	r2, #70	; 0x46
 8002718:	5a9b      	ldrh	r3, [r3, r2]
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b299      	uxth	r1, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2246      	movs	r2, #70	; 0x46
 8002724:	5299      	strh	r1, [r3, r2]
 8002726:	e012      	b.n	800274e <HAL_SPI_Receive+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_SPI_Receive+0x1ac>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	3301      	adds	r3, #1
 8002732:	d00c      	beq.n	800274e <HAL_SPI_Receive+0x1b6>
 8002734:	f7fd fdbc 	bl	80002b0 <HAL_GetTick>
 8002738:	0002      	movs	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d804      	bhi.n	800274e <HAL_SPI_Receive+0x1b6>
        {
          errorcode = HAL_TIMEOUT;
 8002744:	2317      	movs	r3, #23
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	2203      	movs	r2, #3
 800274a:	701a      	strb	r2, [r3, #0]
          goto error;
 800274c:	e04e      	b.n	80027ec <HAL_SPI_Receive+0x254>
    while (hspi->RxXferCount > 0U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2246      	movs	r2, #70	; 0x46
 8002752:	5a9b      	ldrh	r3, [r3, r2]
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1cb      	bne.n	80026f2 <HAL_SPI_Receive+0x15a>
 800275a:	e032      	b.n	80027c2 <HAL_SPI_Receive+0x22a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2201      	movs	r2, #1
 8002764:	4013      	ands	r3, r2
 8002766:	2b01      	cmp	r3, #1
 8002768:	d112      	bne.n	8002790 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	b29a      	uxth	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	3302      	adds	r3, #2
 800277a:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2246      	movs	r2, #70	; 0x46
 8002780:	5a9b      	ldrh	r3, [r3, r2]
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b299      	uxth	r1, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2246      	movs	r2, #70	; 0x46
 800278c:	5299      	strh	r1, [r3, r2]
 800278e:	e012      	b.n	80027b6 <HAL_SPI_Receive+0x21e>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <HAL_SPI_Receive+0x214>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	3301      	adds	r3, #1
 800279a:	d00c      	beq.n	80027b6 <HAL_SPI_Receive+0x21e>
 800279c:	f7fd fd88 	bl	80002b0 <HAL_GetTick>
 80027a0:	0002      	movs	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d804      	bhi.n	80027b6 <HAL_SPI_Receive+0x21e>
        {
          errorcode = HAL_TIMEOUT;
 80027ac:	2317      	movs	r3, #23
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	2203      	movs	r2, #3
 80027b2:	701a      	strb	r2, [r3, #0]
          goto error;
 80027b4:	e01a      	b.n	80027ec <HAL_SPI_Receive+0x254>
    while (hspi->RxXferCount > 0U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2246      	movs	r2, #70	; 0x46
 80027ba:	5a9b      	ldrh	r3, [r3, r2]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1cc      	bne.n	800275c <HAL_SPI_Receive+0x1c4>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	6839      	ldr	r1, [r7, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	0018      	movs	r0, r3
 80027ca:	f000 fb21 	bl	8002e10 <SPI_EndRxTransaction>
 80027ce:	1e03      	subs	r3, r0, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_SPI_Receive+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2220      	movs	r2, #32
 80027d6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <HAL_SPI_Receive+0x252>
  {
    errorcode = HAL_ERROR;
 80027e0:	2317      	movs	r3, #23
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	e000      	b.n	80027ec <HAL_SPI_Receive+0x254>
  }

error :
 80027ea:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	225d      	movs	r2, #93	; 0x5d
 80027f0:	2101      	movs	r1, #1
 80027f2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	225c      	movs	r2, #92	; 0x5c
 80027f8:	2100      	movs	r1, #0
 80027fa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80027fc:	2317      	movs	r3, #23
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	781b      	ldrb	r3, [r3, #0]
}
 8002802:	0018      	movs	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	b007      	add	sp, #28
 8002808:	bd90      	pop	{r4, r7, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	ffffefff 	.word	0xffffefff
 8002810:	ffffbfff 	.word	0xffffbfff

08002814 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	001a      	movs	r2, r3
 8002822:	1cbb      	adds	r3, r7, #2
 8002824:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8002832:	2301      	movs	r3, #1
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002836:	2323      	movs	r3, #35	; 0x23
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	225c      	movs	r2, #92	; 0x5c
 8002842:	5c9b      	ldrb	r3, [r3, r2]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_SPI_TransmitReceive+0x38>
 8002848:	2302      	movs	r3, #2
 800284a:	e1f2      	b.n	8002c32 <HAL_SPI_TransmitReceive+0x41e>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	225c      	movs	r2, #92	; 0x5c
 8002850:	2101      	movs	r1, #1
 8002852:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002854:	f7fd fd2c 	bl	80002b0 <HAL_GetTick>
 8002858:	0003      	movs	r3, r0
 800285a:	617b      	str	r3, [r7, #20]

  tmp  = hspi->State;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	225d      	movs	r2, #93	; 0x5d
 8002860:	5c9b      	ldrb	r3, [r3, r2]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d010      	beq.n	8002894 <HAL_SPI_TransmitReceive+0x80>
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	2382      	movs	r3, #130	; 0x82
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	429a      	cmp	r2, r3
 800287a:	d106      	bne.n	800288a <HAL_SPI_TransmitReceive+0x76>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <HAL_SPI_TransmitReceive+0x76>
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b04      	cmp	r3, #4
 8002888:	d004      	beq.n	8002894 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 800288a:	2323      	movs	r3, #35	; 0x23
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	2202      	movs	r2, #2
 8002890:	701a      	strb	r2, [r3, #0]
    goto error;
 8002892:	e1c3      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <HAL_SPI_TransmitReceive+0x94>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_SPI_TransmitReceive+0x94>
 80028a0:	1cbb      	adds	r3, r7, #2
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d104      	bne.n	80028b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    errorcode = HAL_ERROR;
 80028a8:	2323      	movs	r3, #35	; 0x23
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80028b0:	e1b4      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	225d      	movs	r2, #93	; 0x5d
 80028b6:	5c9b      	ldrb	r3, [r3, r2]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d003      	beq.n	80028c6 <HAL_SPI_TransmitReceive+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	225d      	movs	r2, #93	; 0x5d
 80028c2:	2105      	movs	r1, #5
 80028c4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1cba      	adds	r2, r7, #2
 80028d6:	2146      	movs	r1, #70	; 0x46
 80028d8:	8812      	ldrh	r2, [r2, #0]
 80028da:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1cba      	adds	r2, r7, #2
 80028e0:	2144      	movs	r1, #68	; 0x44
 80028e2:	8812      	ldrh	r2, [r2, #0]
 80028e4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1cba      	adds	r2, r7, #2
 80028f0:	8812      	ldrh	r2, [r2, #0]
 80028f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	1cba      	adds	r2, r7, #2
 80028f8:	8812      	ldrh	r2, [r2, #0]
 80028fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	23e0      	movs	r3, #224	; 0xe0
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	429a      	cmp	r2, r3
 8002912:	d805      	bhi.n	8002920 <HAL_SPI_TransmitReceive+0x10c>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2246      	movs	r2, #70	; 0x46
 8002918:	5a9b      	ldrh	r3, [r3, r2]
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d908      	bls.n	8002932 <HAL_SPI_TransmitReceive+0x11e>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	49c4      	ldr	r1, [pc, #784]	; (8002c3c <HAL_SPI_TransmitReceive+0x428>)
 800292c:	400a      	ands	r2, r1
 800292e:	605a      	str	r2, [r3, #4]
 8002930:	e008      	b.n	8002944 <HAL_SPI_TransmitReceive+0x130>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2180      	movs	r1, #128	; 0x80
 800293e:	0149      	lsls	r1, r1, #5
 8002940:	430a      	orrs	r2, r1
 8002942:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2240      	movs	r2, #64	; 0x40
 800294c:	4013      	ands	r3, r2
 800294e:	2b40      	cmp	r3, #64	; 0x40
 8002950:	d007      	beq.n	8002962 <HAL_SPI_TransmitReceive+0x14e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2140      	movs	r1, #64	; 0x40
 800295e:	430a      	orrs	r2, r1
 8002960:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	23e0      	movs	r3, #224	; 0xe0
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	429a      	cmp	r2, r3
 800296c:	d800      	bhi.n	8002970 <HAL_SPI_TransmitReceive+0x15c>
 800296e:	e075      	b.n	8002a5c <HAL_SPI_TransmitReceive+0x248>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d004      	beq.n	8002982 <HAL_SPI_TransmitReceive+0x16e>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d160      	bne.n	8002a44 <HAL_SPI_TransmitReceive+0x230>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	881a      	ldrh	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	3302      	adds	r3, #2
 8002990:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029a0:	e050      	b.n	8002a44 <HAL_SPI_TransmitReceive+0x230>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01c      	beq.n	80029e2 <HAL_SPI_TransmitReceive+0x1ce>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d017      	beq.n	80029e2 <HAL_SPI_TransmitReceive+0x1ce>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2202      	movs	r2, #2
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d110      	bne.n	80029e2 <HAL_SPI_TransmitReceive+0x1ce>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	881a      	ldrh	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	3302      	adds	r3, #2
 80029ce:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2246      	movs	r2, #70	; 0x46
 80029e6:	5a9b      	ldrh	r3, [r3, r2]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01a      	beq.n	8002a24 <HAL_SPI_TransmitReceive+0x210>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2201      	movs	r2, #1
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d113      	bne.n	8002a24 <HAL_SPI_TransmitReceive+0x210>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3302      	adds	r3, #2
 8002a0c:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2246      	movs	r2, #70	; 0x46
 8002a12:	5a9b      	ldrh	r3, [r3, r2]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b299      	uxth	r1, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2246      	movs	r2, #70	; 0x46
 8002a1e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a20:	2301      	movs	r3, #1
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	3301      	adds	r3, #1
 8002a28:	d00c      	beq.n	8002a44 <HAL_SPI_TransmitReceive+0x230>
 8002a2a:	f7fd fc41 	bl	80002b0 <HAL_GetTick>
 8002a2e:	0002      	movs	r2, r0
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d804      	bhi.n	8002a44 <HAL_SPI_TransmitReceive+0x230>
      {
        errorcode = HAL_TIMEOUT;
 8002a3a:	2323      	movs	r3, #35	; 0x23
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	2203      	movs	r2, #3
 8002a40:	701a      	strb	r2, [r3, #0]
        goto error;
 8002a42:	e0eb      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1a9      	bne.n	80029a2 <HAL_SPI_TransmitReceive+0x18e>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2246      	movs	r2, #70	; 0x46
 8002a52:	5a9b      	ldrh	r3, [r3, r2]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1a3      	bne.n	80029a2 <HAL_SPI_TransmitReceive+0x18e>
 8002a5a:	e0ca      	b.n	8002bf2 <HAL_SPI_TransmitReceive+0x3de>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_SPI_TransmitReceive+0x25c>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d000      	beq.n	8002a70 <HAL_SPI_TransmitReceive+0x25c>
 8002a6e:	e0b3      	b.n	8002bd8 <HAL_SPI_TransmitReceive+0x3c4>
    {
      if (hspi->TxXferCount > 1U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d90f      	bls.n	8002a9a <HAL_SPI_TransmitReceive+0x286>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	881a      	ldrh	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	3302      	adds	r3, #2
 8002a88:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b02      	subs	r3, #2
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a98:	e09e      	b.n	8002bd8 <HAL_SPI_TransmitReceive+0x3c4>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	60ba      	str	r2, [r7, #8]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	320c      	adds	r2, #12
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ab8:	e08e      	b.n	8002bd8 <HAL_SPI_TransmitReceive+0x3c4>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d031      	beq.n	8002b24 <HAL_SPI_TransmitReceive+0x310>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d02c      	beq.n	8002b24 <HAL_SPI_TransmitReceive+0x310>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d125      	bne.n	8002b24 <HAL_SPI_TransmitReceive+0x310>
      {
        if (hspi->TxXferCount > 1U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d90f      	bls.n	8002b02 <HAL_SPI_TransmitReceive+0x2ee>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	881a      	ldrh	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	3302      	adds	r3, #2
 8002af0:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b02      	subs	r3, #2
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b00:	e00e      	b.n	8002b20 <HAL_SPI_TransmitReceive+0x30c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	60ba      	str	r2, [r7, #8]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	320c      	adds	r2, #12
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2246      	movs	r2, #70	; 0x46
 8002b28:	5a9b      	ldrh	r3, [r3, r2]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d043      	beq.n	8002bb8 <HAL_SPI_TransmitReceive+0x3a4>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2201      	movs	r2, #1
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d13c      	bne.n	8002bb8 <HAL_SPI_TransmitReceive+0x3a4>
      {
        if (hspi->RxXferCount > 1U)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2246      	movs	r2, #70	; 0x46
 8002b42:	5a9b      	ldrh	r3, [r3, r2]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d921      	bls.n	8002b8e <HAL_SPI_TransmitReceive+0x37a>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3302      	adds	r3, #2
 8002b5a:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2246      	movs	r2, #70	; 0x46
 8002b60:	5a9b      	ldrh	r3, [r3, r2]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b02      	subs	r3, #2
 8002b66:	b299      	uxth	r1, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2246      	movs	r2, #70	; 0x46
 8002b6c:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2246      	movs	r2, #70	; 0x46
 8002b72:	5a9b      	ldrh	r3, [r3, r2]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d81c      	bhi.n	8002bb4 <HAL_SPI_TransmitReceive+0x3a0>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2180      	movs	r1, #128	; 0x80
 8002b86:	0149      	lsls	r1, r1, #5
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	e012      	b.n	8002bb4 <HAL_SPI_TransmitReceive+0x3a0>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	330c      	adds	r3, #12
 8002b94:	001a      	movs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	1c59      	adds	r1, r3, #1
 8002b9a:	6079      	str	r1, [r7, #4]
 8002b9c:	7812      	ldrb	r2, [r2, #0]
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2246      	movs	r2, #70	; 0x46
 8002ba6:	5a9b      	ldrh	r3, [r3, r2]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b299      	uxth	r1, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2246      	movs	r2, #70	; 0x46
 8002bb2:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	3301      	adds	r3, #1
 8002bbc:	d00c      	beq.n	8002bd8 <HAL_SPI_TransmitReceive+0x3c4>
 8002bbe:	f7fd fb77 	bl	80002b0 <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d804      	bhi.n	8002bd8 <HAL_SPI_TransmitReceive+0x3c4>
      {
        errorcode = HAL_TIMEOUT;
 8002bce:	2323      	movs	r3, #35	; 0x23
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	701a      	strb	r2, [r3, #0]
        goto error;
 8002bd6:	e021      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d000      	beq.n	8002be4 <HAL_SPI_TransmitReceive+0x3d0>
 8002be2:	e76a      	b.n	8002aba <HAL_SPI_TransmitReceive+0x2a6>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2246      	movs	r2, #70	; 0x46
 8002be8:	5a9b      	ldrh	r3, [r3, r2]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d000      	beq.n	8002bf2 <HAL_SPI_TransmitReceive+0x3de>
 8002bf0:	e763      	b.n	8002aba <HAL_SPI_TransmitReceive+0x2a6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f000 f967 	bl	8002ecc <SPI_EndRxTxTransaction>
 8002bfe:	1e03      	subs	r3, r0, #0
 8002c00:	d002      	beq.n	8002c08 <HAL_SPI_TransmitReceive+0x3f4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d004      	beq.n	8002c1a <HAL_SPI_TransmitReceive+0x406>
  {
    errorcode = HAL_ERROR;
 8002c10:	2323      	movs	r3, #35	; 0x23
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e000      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x408>
  }

error :
 8002c1a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	225d      	movs	r2, #93	; 0x5d
 8002c20:	2101      	movs	r1, #1
 8002c22:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	225c      	movs	r2, #92	; 0x5c
 8002c28:	2100      	movs	r1, #0
 8002c2a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002c2c:	2323      	movs	r3, #35	; 0x23
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	781b      	ldrb	r3, [r3, #0]
}
 8002c32:	0018      	movs	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b00a      	add	sp, #40	; 0x28
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	46c0      	nop			; (mov r8, r8)
 8002c3c:	ffffefff 	.word	0xffffefff

08002c40 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c4e:	e050      	b.n	8002cf2 <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	d04d      	beq.n	8002cf2 <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <SPI_WaitFlagStateUntilTimeout+0x2c>
 8002c5c:	f7fd fb28 	bl	80002b0 <HAL_GetTick>
 8002c60:	0002      	movs	r2, r0
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d842      	bhi.n	8002cf2 <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	21e0      	movs	r1, #224	; 0xe0
 8002c78:	438a      	bics	r2, r1
 8002c7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	2382      	movs	r3, #130	; 0x82
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d113      	bne.n	8002cb0 <SPI_WaitFlagStateUntilTimeout+0x70>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d005      	beq.n	8002ca0 <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d107      	bne.n	8002cb0 <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2140      	movs	r1, #64	; 0x40
 8002cac:	438a      	bics	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	019b      	lsls	r3, r3, #6
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d110      	bne.n	8002cde <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4914      	ldr	r1, [pc, #80]	; (8002d18 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8002cc8:	400a      	ands	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2180      	movs	r1, #128	; 0x80
 8002cd8:	0189      	lsls	r1, r1, #6
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	225d      	movs	r2, #93	; 0x5d
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	225c      	movs	r2, #92	; 0x5c
 8002cea:	2100      	movs	r1, #0
 8002cec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e00e      	b.n	8002d10 <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d101      	bne.n	8002d06 <SPI_WaitFlagStateUntilTimeout+0xc6>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <SPI_WaitFlagStateUntilTimeout+0xc8>
 8002d06:	2300      	movs	r3, #0
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d1a0      	bne.n	8002c50 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	0018      	movs	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b004      	add	sp, #16
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	ffffdfff 	.word	0xffffdfff

08002d1c <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8002d2a:	e062      	b.n	8002df2 <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	23c0      	movs	r3, #192	; 0xc0
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d10c      	bne.n	8002d50 <SPI_WaitFifoStateUntilTimeout+0x34>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	330c      	adds	r3, #12
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	2117      	movs	r1, #23
 8002d48:	187b      	adds	r3, r7, r1
 8002d4a:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002d4c:	187b      	adds	r3, r7, r1
 8002d4e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	3301      	adds	r3, #1
 8002d54:	d04d      	beq.n	8002df2 <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d007      	beq.n	8002d6c <SPI_WaitFifoStateUntilTimeout+0x50>
 8002d5c:	f7fd faa8 	bl	80002b0 <HAL_GetTick>
 8002d60:	0002      	movs	r2, r0
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d842      	bhi.n	8002df2 <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	21e0      	movs	r1, #224	; 0xe0
 8002d78:	438a      	bics	r2, r1
 8002d7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	2382      	movs	r3, #130	; 0x82
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d113      	bne.n	8002db0 <SPI_WaitFifoStateUntilTimeout+0x94>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	2380      	movs	r3, #128	; 0x80
 8002d8e:	021b      	lsls	r3, r3, #8
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d005      	beq.n	8002da0 <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d107      	bne.n	8002db0 <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2140      	movs	r1, #64	; 0x40
 8002dac:	438a      	bics	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	019b      	lsls	r3, r3, #6
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d110      	bne.n	8002dde <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4911      	ldr	r1, [pc, #68]	; (8002e0c <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8002dc8:	400a      	ands	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2180      	movs	r1, #128	; 0x80
 8002dd8:	0189      	lsls	r1, r1, #6
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	225d      	movs	r2, #93	; 0x5d
 8002de2:	2101      	movs	r1, #1
 8002de4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	225c      	movs	r2, #92	; 0x5c
 8002dea:	2100      	movs	r1, #0
 8002dec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e008      	b.n	8002e04 <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d194      	bne.n	8002d2c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	0018      	movs	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b006      	add	sp, #24
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	ffffdfff 	.word	0xffffdfff

08002e10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	2382      	movs	r3, #130	; 0x82
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d113      	bne.n	8002e50 <SPI_EndRxTransaction+0x40>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d005      	beq.n	8002e40 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d107      	bne.n	8002e50 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2140      	movs	r1, #64	; 0x40
 8002e4c:	438a      	bics	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	0013      	movs	r3, r2
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2180      	movs	r1, #128	; 0x80
 8002e5e:	f7ff feef 	bl	8002c40 <SPI_WaitFlagStateUntilTimeout>
 8002e62:	1e03      	subs	r3, r0, #0
 8002e64:	d007      	beq.n	8002e76 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e026      	b.n	8002ec4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	2382      	movs	r3, #130	; 0x82
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d11f      	bne.n	8002ec2 <SPI_EndRxTransaction+0xb2>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d005      	beq.n	8002e9a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d113      	bne.n	8002ec2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	23c0      	movs	r3, #192	; 0xc0
 8002e9e:	00d9      	lsls	r1, r3, #3
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	0013      	movs	r3, r2
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f7ff ff37 	bl	8002d1c <SPI_WaitFifoStateUntilTimeout>
 8002eae:	1e03      	subs	r3, r0, #0
 8002eb0:	d007      	beq.n	8002ec2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e000      	b.n	8002ec4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b004      	add	sp, #16
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	23c0      	movs	r3, #192	; 0xc0
 8002edc:	0159      	lsls	r1, r3, #5
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	0013      	movs	r3, r2
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f7ff ff18 	bl	8002d1c <SPI_WaitFifoStateUntilTimeout>
 8002eec:	1e03      	subs	r3, r0, #0
 8002eee:	d007      	beq.n	8002f00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e027      	b.n	8002f50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	0013      	movs	r3, r2
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2180      	movs	r1, #128	; 0x80
 8002f0e:	f7ff fe97 	bl	8002c40 <SPI_WaitFlagStateUntilTimeout>
 8002f12:	1e03      	subs	r3, r0, #0
 8002f14:	d007      	beq.n	8002f26 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e014      	b.n	8002f50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	23c0      	movs	r3, #192	; 0xc0
 8002f2a:	00d9      	lsls	r1, r3, #3
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	0013      	movs	r3, r2
 8002f34:	2200      	movs	r2, #0
 8002f36:	f7ff fef1 	bl	8002d1c <SPI_WaitFifoStateUntilTimeout>
 8002f3a:	1e03      	subs	r3, r0, #0
 8002f3c:	d007      	beq.n	8002f4e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f42:	2220      	movs	r2, #32
 8002f44:	431a      	orrs	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e000      	b.n	8002f50 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	0018      	movs	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b004      	add	sp, #16
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e01e      	b.n	8002fa8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	223d      	movs	r2, #61	; 0x3d
 8002f6e:	5c9b      	ldrb	r3, [r3, r2]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d107      	bne.n	8002f86 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	223c      	movs	r2, #60	; 0x3c
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 f815 	bl	8002fb0 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	223d      	movs	r2, #61	; 0x3d
 8002f8a:	2102      	movs	r1, #2
 8002f8c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3304      	adds	r3, #4
 8002f96:	0019      	movs	r1, r3
 8002f98:	0010      	movs	r0, r2
 8002f9a:	f000 fabf 	bl	800351c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	223d      	movs	r2, #61	; 0x3d
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	0018      	movs	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b002      	add	sp, #8
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_TIM_OC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e01e      	b.n	8003042 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	223d      	movs	r2, #61	; 0x3d
 8003008:	5c9b      	ldrb	r3, [r3, r2]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d107      	bne.n	8003020 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	223c      	movs	r2, #60	; 0x3c
 8003014:	2100      	movs	r1, #0
 8003016:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	0018      	movs	r0, r3
 800301c:	f002 feae 	bl	8005d7c <HAL_TIM_OC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	223d      	movs	r2, #61	; 0x3d
 8003024:	2102      	movs	r1, #2
 8003026:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3304      	adds	r3, #4
 8003030:	0019      	movs	r1, r3
 8003032:	0010      	movs	r0, r2
 8003034:	f000 fa72 	bl	800351c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	223d      	movs	r2, #61	; 0x3d
 800303c:	2101      	movs	r1, #1
 800303e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	0018      	movs	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	b002      	add	sp, #8
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e01e      	b.n	800309a <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	223d      	movs	r2, #61	; 0x3d
 8003060:	5c9b      	ldrb	r3, [r3, r2]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d107      	bne.n	8003078 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	223c      	movs	r2, #60	; 0x3c
 800306c:	2100      	movs	r1, #0
 800306e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	0018      	movs	r0, r3
 8003074:	f002 fe50 	bl	8005d18 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	223d      	movs	r2, #61	; 0x3d
 800307c:	2102      	movs	r1, #2
 800307e:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	0019      	movs	r1, r3
 800308a:	0010      	movs	r0, r2
 800308c:	f000 fa46 	bl	800351c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	223d      	movs	r2, #61	; 0x3d
 8003094:	2101      	movs	r1, #1
 8003096:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	0018      	movs	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	b002      	add	sp, #8
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	2202      	movs	r2, #2
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d124      	bne.n	8003102 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2202      	movs	r2, #2
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d11d      	bne.n	8003102 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2203      	movs	r2, #3
 80030cc:	4252      	negs	r2, r2
 80030ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	2203      	movs	r2, #3
 80030de:	4013      	ands	r3, r2
 80030e0:	d004      	beq.n	80030ec <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f000 fa01 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 80030ea:	e007      	b.n	80030fc <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	0018      	movs	r0, r3
 80030f0:	f000 f9f4 	bl	80034dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	0018      	movs	r0, r3
 80030f8:	f000 fa00 	bl	80034fc <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	2204      	movs	r2, #4
 800310a:	4013      	ands	r3, r2
 800310c:	2b04      	cmp	r3, #4
 800310e:	d125      	bne.n	800315c <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2204      	movs	r2, #4
 8003118:	4013      	ands	r3, r2
 800311a:	2b04      	cmp	r3, #4
 800311c:	d11e      	bne.n	800315c <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2205      	movs	r2, #5
 8003124:	4252      	negs	r2, r2
 8003126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699a      	ldr	r2, [r3, #24]
 8003134:	23c0      	movs	r3, #192	; 0xc0
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4013      	ands	r3, r2
 800313a:	d004      	beq.n	8003146 <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	0018      	movs	r0, r3
 8003140:	f000 f9d4 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 8003144:	e007      	b.n	8003156 <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	0018      	movs	r0, r3
 800314a:	f000 f9c7 	bl	80034dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	0018      	movs	r0, r3
 8003152:	f000 f9d3 	bl	80034fc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2208      	movs	r2, #8
 8003164:	4013      	ands	r3, r2
 8003166:	2b08      	cmp	r3, #8
 8003168:	d124      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2208      	movs	r2, #8
 8003172:	4013      	ands	r3, r2
 8003174:	2b08      	cmp	r3, #8
 8003176:	d11d      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2209      	movs	r2, #9
 800317e:	4252      	negs	r2, r2
 8003180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2204      	movs	r2, #4
 8003186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	2203      	movs	r2, #3
 8003190:	4013      	ands	r3, r2
 8003192:	d004      	beq.n	800319e <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	0018      	movs	r0, r3
 8003198:	f000 f9a8 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 800319c:	e007      	b.n	80031ae <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	0018      	movs	r0, r3
 80031a2:	f000 f99b 	bl	80034dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	0018      	movs	r0, r3
 80031aa:	f000 f9a7 	bl	80034fc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2210      	movs	r2, #16
 80031bc:	4013      	ands	r3, r2
 80031be:	2b10      	cmp	r3, #16
 80031c0:	d125      	bne.n	800320e <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2210      	movs	r2, #16
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d11e      	bne.n	800320e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2211      	movs	r2, #17
 80031d6:	4252      	negs	r2, r2
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2208      	movs	r2, #8
 80031de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69da      	ldr	r2, [r3, #28]
 80031e6:	23c0      	movs	r3, #192	; 0xc0
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4013      	ands	r3, r2
 80031ec:	d004      	beq.n	80031f8 <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	0018      	movs	r0, r3
 80031f2:	f000 f97b 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 80031f6:	e007      	b.n	8003208 <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	0018      	movs	r0, r3
 80031fc:	f000 f96e 	bl	80034dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	0018      	movs	r0, r3
 8003204:	f000 f97a 	bl	80034fc <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2201      	movs	r2, #1
 8003216:	4013      	ands	r3, r2
 8003218:	2b01      	cmp	r3, #1
 800321a:	d10f      	bne.n	800323c <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	4013      	ands	r3, r2
 8003226:	2b01      	cmp	r3, #1
 8003228:	d108      	bne.n	800323c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2202      	movs	r2, #2
 8003230:	4252      	negs	r2, r2
 8003232:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	0018      	movs	r0, r3
 8003238:	f002 f95e 	bl	80054f8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2280      	movs	r2, #128	; 0x80
 8003244:	4013      	ands	r3, r2
 8003246:	2b80      	cmp	r3, #128	; 0x80
 8003248:	d10f      	bne.n	800326a <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2280      	movs	r2, #128	; 0x80
 8003252:	4013      	ands	r3, r2
 8003254:	2b80      	cmp	r3, #128	; 0x80
 8003256:	d108      	bne.n	800326a <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2281      	movs	r2, #129	; 0x81
 800325e:	4252      	negs	r2, r2
 8003260:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	0018      	movs	r0, r3
 8003266:	f000 fca9 	bl	8003bbc <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	2240      	movs	r2, #64	; 0x40
 8003272:	4013      	ands	r3, r2
 8003274:	2b40      	cmp	r3, #64	; 0x40
 8003276:	d10f      	bne.n	8003298 <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2240      	movs	r2, #64	; 0x40
 8003280:	4013      	ands	r3, r2
 8003282:	2b40      	cmp	r3, #64	; 0x40
 8003284:	d108      	bne.n	8003298 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2241      	movs	r2, #65	; 0x41
 800328c:	4252      	negs	r2, r2
 800328e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	0018      	movs	r0, r3
 8003294:	f000 f93a 	bl	800350c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2220      	movs	r2, #32
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d10f      	bne.n	80032c6 <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d108      	bne.n	80032c6 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2221      	movs	r2, #33	; 0x21
 80032ba:	4252      	negs	r2, r2
 80032bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f000 fc73 	bl	8003bac <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b002      	add	sp, #8
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	223c      	movs	r2, #60	; 0x3c
 80032de:	5c9b      	ldrb	r3, [r3, r2]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_TIM_OC_ConfigChannel+0x1a>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e03c      	b.n	8003362 <HAL_TIM_OC_ConfigChannel+0x94>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	223c      	movs	r2, #60	; 0x3c
 80032ec:	2101      	movs	r1, #1
 80032ee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	223d      	movs	r2, #61	; 0x3d
 80032f4:	2102      	movs	r1, #2
 80032f6:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d010      	beq.n	8003320 <HAL_TIM_OC_ConfigChannel+0x52>
 80032fe:	d802      	bhi.n	8003306 <HAL_TIM_OC_ConfigChannel+0x38>
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_TIM_OC_ConfigChannel+0x42>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
    }
    break;

    default:
    break;
 8003304:	e024      	b.n	8003350 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8003306:	2b08      	cmp	r3, #8
 8003308:	d012      	beq.n	8003330 <HAL_TIM_OC_ConfigChannel+0x62>
 800330a:	2b0c      	cmp	r3, #12
 800330c:	d018      	beq.n	8003340 <HAL_TIM_OC_ConfigChannel+0x72>
    break;
 800330e:	e01f      	b.n	8003350 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	0011      	movs	r1, r2
 8003318:	0018      	movs	r0, r3
 800331a:	f000 f981 	bl	8003620 <TIM_OC1_SetConfig>
    break;
 800331e:	e017      	b.n	8003350 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	0011      	movs	r1, r2
 8003328:	0018      	movs	r0, r3
 800332a:	f000 fa07 	bl	800373c <TIM_OC2_SetConfig>
    break;
 800332e:	e00f      	b.n	8003350 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	0011      	movs	r1, r2
 8003338:	0018      	movs	r0, r3
 800333a:	f000 fa89 	bl	8003850 <TIM_OC3_SetConfig>
    break;
 800333e:	e007      	b.n	8003350 <HAL_TIM_OC_ConfigChannel+0x82>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	0011      	movs	r1, r2
 8003348:	0018      	movs	r0, r3
 800334a:	f000 fb0d 	bl	8003968 <TIM_OC4_SetConfig>
    break;
 800334e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	223d      	movs	r2, #61	; 0x3d
 8003354:	2101      	movs	r1, #1
 8003356:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	223c      	movs	r2, #60	; 0x3c
 800335c:	2100      	movs	r1, #0
 800335e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b004      	add	sp, #16
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	223c      	movs	r2, #60	; 0x3c
 800337c:	5c9b      	ldrb	r3, [r3, r2]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003382:	2302      	movs	r3, #2
 8003384:	e0a4      	b.n	80034d0 <HAL_TIM_PWM_ConfigChannel+0x164>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	223c      	movs	r2, #60	; 0x3c
 800338a:	2101      	movs	r1, #1
 800338c:	5499      	strb	r1, [r3, r2]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	223d      	movs	r2, #61	; 0x3d
 8003392:	2102      	movs	r1, #2
 8003394:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d029      	beq.n	80033f0 <HAL_TIM_PWM_ConfigChannel+0x84>
 800339c:	d802      	bhi.n	80033a4 <HAL_TIM_PWM_ConfigChannel+0x38>
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    }
    break;

    default:
    break;
 80033a2:	e08c      	b.n	80034be <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d046      	beq.n	8003436 <HAL_TIM_PWM_ConfigChannel+0xca>
 80033a8:	2b0c      	cmp	r3, #12
 80033aa:	d065      	beq.n	8003478 <HAL_TIM_PWM_ConfigChannel+0x10c>
    break;
 80033ac:	e087      	b.n	80034be <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	0011      	movs	r1, r2
 80033b6:	0018      	movs	r0, r3
 80033b8:	f000 f932 	bl	8003620 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2108      	movs	r1, #8
 80033c8:	430a      	orrs	r2, r1
 80033ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2104      	movs	r1, #4
 80033d8:	438a      	bics	r2, r1
 80033da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6999      	ldr	r1, [r3, #24]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	619a      	str	r2, [r3, #24]
    break;
 80033ee:	e066      	b.n	80034be <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	0011      	movs	r1, r2
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 f99f 	bl	800373c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2180      	movs	r1, #128	; 0x80
 800340a:	0109      	lsls	r1, r1, #4
 800340c:	430a      	orrs	r2, r1
 800340e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699a      	ldr	r2, [r3, #24]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	492f      	ldr	r1, [pc, #188]	; (80034d8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800341c:	400a      	ands	r2, r1
 800341e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6999      	ldr	r1, [r3, #24]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	021a      	lsls	r2, r3, #8
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	619a      	str	r2, [r3, #24]
    break;
 8003434:	e043      	b.n	80034be <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	0011      	movs	r1, r2
 800343e:	0018      	movs	r0, r3
 8003440:	f000 fa06 	bl	8003850 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	69da      	ldr	r2, [r3, #28]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2108      	movs	r1, #8
 8003450:	430a      	orrs	r2, r1
 8003452:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69da      	ldr	r2, [r3, #28]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2104      	movs	r1, #4
 8003460:	438a      	bics	r2, r1
 8003462:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69d9      	ldr	r1, [r3, #28]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	61da      	str	r2, [r3, #28]
    break;
 8003476:	e022      	b.n	80034be <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	0011      	movs	r1, r2
 8003480:	0018      	movs	r0, r3
 8003482:	f000 fa71 	bl	8003968 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	0109      	lsls	r1, r1, #4
 8003494:	430a      	orrs	r2, r1
 8003496:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	490d      	ldr	r1, [pc, #52]	; (80034d8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80034a4:	400a      	ands	r2, r1
 80034a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69d9      	ldr	r1, [r3, #28]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	021a      	lsls	r2, r3, #8
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	61da      	str	r2, [r3, #28]
    break;
 80034bc:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	223d      	movs	r2, #61	; 0x3d
 80034c2:	2101      	movs	r1, #1
 80034c4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	223c      	movs	r2, #60	; 0x3c
 80034ca:	2100      	movs	r1, #0
 80034cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	0018      	movs	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b004      	add	sp, #16
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	fffffbff 	.word	0xfffffbff

080034dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b002      	add	sp, #8
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034f4:	46c0      	nop			; (mov r8, r8)
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b002      	add	sp, #8
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	b002      	add	sp, #8
 800351a:	bd80      	pop	{r7, pc}

0800351c <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a34      	ldr	r2, [pc, #208]	; (8003604 <TIM_Base_SetConfig+0xe8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d008      	beq.n	800354a <TIM_Base_SetConfig+0x2e>
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	05db      	lsls	r3, r3, #23
 800353e:	429a      	cmp	r2, r3
 8003540:	d003      	beq.n	800354a <TIM_Base_SetConfig+0x2e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a30      	ldr	r2, [pc, #192]	; (8003608 <TIM_Base_SetConfig+0xec>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d108      	bne.n	800355c <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2270      	movs	r2, #112	; 0x70
 800354e:	4393      	bics	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a29      	ldr	r2, [pc, #164]	; (8003604 <TIM_Base_SetConfig+0xe8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d018      	beq.n	8003596 <TIM_Base_SetConfig+0x7a>
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	2380      	movs	r3, #128	; 0x80
 8003568:	05db      	lsls	r3, r3, #23
 800356a:	429a      	cmp	r2, r3
 800356c:	d013      	beq.n	8003596 <TIM_Base_SetConfig+0x7a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a25      	ldr	r2, [pc, #148]	; (8003608 <TIM_Base_SetConfig+0xec>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00f      	beq.n	8003596 <TIM_Base_SetConfig+0x7a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a24      	ldr	r2, [pc, #144]	; (800360c <TIM_Base_SetConfig+0xf0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00b      	beq.n	8003596 <TIM_Base_SetConfig+0x7a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a23      	ldr	r2, [pc, #140]	; (8003610 <TIM_Base_SetConfig+0xf4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d007      	beq.n	8003596 <TIM_Base_SetConfig+0x7a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a22      	ldr	r2, [pc, #136]	; (8003614 <TIM_Base_SetConfig+0xf8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d003      	beq.n	8003596 <TIM_Base_SetConfig+0x7a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a21      	ldr	r2, [pc, #132]	; (8003618 <TIM_Base_SetConfig+0xfc>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d108      	bne.n	80035a8 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4a20      	ldr	r2, [pc, #128]	; (800361c <TIM_Base_SetConfig+0x100>)
 800359a:	4013      	ands	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2280      	movs	r2, #128	; 0x80
 80035ac:	4393      	bics	r3, r2
 80035ae:	001a      	movs	r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a0c      	ldr	r2, [pc, #48]	; (8003604 <TIM_Base_SetConfig+0xe8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00b      	beq.n	80035ee <TIM_Base_SetConfig+0xd2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a0d      	ldr	r2, [pc, #52]	; (8003610 <TIM_Base_SetConfig+0xf4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d007      	beq.n	80035ee <TIM_Base_SetConfig+0xd2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a0c      	ldr	r2, [pc, #48]	; (8003614 <TIM_Base_SetConfig+0xf8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d003      	beq.n	80035ee <TIM_Base_SetConfig+0xd2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a0b      	ldr	r2, [pc, #44]	; (8003618 <TIM_Base_SetConfig+0xfc>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d103      	bne.n	80035f6 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	691a      	ldr	r2, [r3, #16]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	615a      	str	r2, [r3, #20]
}
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	b004      	add	sp, #16
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40012c00 	.word	0x40012c00
 8003608:	40000400 	.word	0x40000400
 800360c:	40002000 	.word	0x40002000
 8003610:	40014000 	.word	0x40014000
 8003614:	40014400 	.word	0x40014400
 8003618:	40014800 	.word	0x40014800
 800361c:	fffffcff 	.word	0xfffffcff

08003620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	2201      	movs	r2, #1
 800363c:	4393      	bics	r3, r2
 800363e:	001a      	movs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2270      	movs	r2, #112	; 0x70
 800365a:	4393      	bics	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2203      	movs	r2, #3
 8003662:	4393      	bics	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2202      	movs	r2, #2
 8003674:	4393      	bics	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a27      	ldr	r2, [pc, #156]	; (8003724 <TIM_OC1_SetConfig+0x104>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00b      	beq.n	80036a2 <TIM_OC1_SetConfig+0x82>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a26      	ldr	r2, [pc, #152]	; (8003728 <TIM_OC1_SetConfig+0x108>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d007      	beq.n	80036a2 <TIM_OC1_SetConfig+0x82>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a25      	ldr	r2, [pc, #148]	; (800372c <TIM_OC1_SetConfig+0x10c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d003      	beq.n	80036a2 <TIM_OC1_SetConfig+0x82>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a24      	ldr	r2, [pc, #144]	; (8003730 <TIM_OC1_SetConfig+0x110>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10c      	bne.n	80036bc <TIM_OC1_SetConfig+0x9c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2208      	movs	r2, #8
 80036a6:	4393      	bics	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2204      	movs	r2, #4
 80036b8:	4393      	bics	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a19      	ldr	r2, [pc, #100]	; (8003724 <TIM_OC1_SetConfig+0x104>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00b      	beq.n	80036dc <TIM_OC1_SetConfig+0xbc>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a18      	ldr	r2, [pc, #96]	; (8003728 <TIM_OC1_SetConfig+0x108>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d007      	beq.n	80036dc <TIM_OC1_SetConfig+0xbc>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a17      	ldr	r2, [pc, #92]	; (800372c <TIM_OC1_SetConfig+0x10c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d003      	beq.n	80036dc <TIM_OC1_SetConfig+0xbc>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a16      	ldr	r2, [pc, #88]	; (8003730 <TIM_OC1_SetConfig+0x110>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d111      	bne.n	8003700 <TIM_OC1_SetConfig+0xe0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4a15      	ldr	r2, [pc, #84]	; (8003734 <TIM_OC1_SetConfig+0x114>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4a14      	ldr	r2, [pc, #80]	; (8003738 <TIM_OC1_SetConfig+0x118>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	46bd      	mov	sp, r7
 800371e:	b006      	add	sp, #24
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	40012c00 	.word	0x40012c00
 8003728:	40014000 	.word	0x40014000
 800372c:	40014400 	.word	0x40014400
 8003730:	40014800 	.word	0x40014800
 8003734:	fffffeff 	.word	0xfffffeff
 8003738:	fffffdff 	.word	0xfffffdff

0800373c <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	2210      	movs	r2, #16
 8003758:	4393      	bics	r3, r2
 800375a:	001a      	movs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a2e      	ldr	r2, [pc, #184]	; (8003830 <TIM_OC2_SetConfig+0xf4>)
 8003776:	4013      	ands	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4a2d      	ldr	r2, [pc, #180]	; (8003834 <TIM_OC2_SetConfig+0xf8>)
 800377e:	4013      	ands	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2220      	movs	r2, #32
 8003792:	4393      	bics	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a24      	ldr	r2, [pc, #144]	; (8003838 <TIM_OC2_SetConfig+0xfc>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d10d      	bne.n	80037c6 <TIM_OC2_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2280      	movs	r2, #128	; 0x80
 80037ae:	4393      	bics	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2240      	movs	r2, #64	; 0x40
 80037c2:	4393      	bics	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <TIM_OC2_SetConfig+0xfc>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00b      	beq.n	80037e6 <TIM_OC2_SetConfig+0xaa>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a1a      	ldr	r2, [pc, #104]	; (800383c <TIM_OC2_SetConfig+0x100>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d007      	beq.n	80037e6 <TIM_OC2_SetConfig+0xaa>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a19      	ldr	r2, [pc, #100]	; (8003840 <TIM_OC2_SetConfig+0x104>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d003      	beq.n	80037e6 <TIM_OC2_SetConfig+0xaa>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a18      	ldr	r2, [pc, #96]	; (8003844 <TIM_OC2_SetConfig+0x108>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d113      	bne.n	800380e <TIM_OC2_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4a17      	ldr	r2, [pc, #92]	; (8003848 <TIM_OC2_SetConfig+0x10c>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4a16      	ldr	r2, [pc, #88]	; (800384c <TIM_OC2_SetConfig+0x110>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	621a      	str	r2, [r3, #32]
}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	b006      	add	sp, #24
 800382e:	bd80      	pop	{r7, pc}
 8003830:	ffff8fff 	.word	0xffff8fff
 8003834:	fffffcff 	.word	0xfffffcff
 8003838:	40012c00 	.word	0x40012c00
 800383c:	40014000 	.word	0x40014000
 8003840:	40014400 	.word	0x40014400
 8003844:	40014800 	.word	0x40014800
 8003848:	fffffbff 	.word	0xfffffbff
 800384c:	fffff7ff 	.word	0xfffff7ff

08003850 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	4a35      	ldr	r2, [pc, #212]	; (8003940 <TIM_OC3_SetConfig+0xf0>)
 800386c:	401a      	ands	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2270      	movs	r2, #112	; 0x70
 8003888:	4393      	bics	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2203      	movs	r2, #3
 8003890:	4393      	bics	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	4a28      	ldr	r2, [pc, #160]	; (8003944 <TIM_OC3_SetConfig+0xf4>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	021b      	lsls	r3, r3, #8
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a24      	ldr	r2, [pc, #144]	; (8003948 <TIM_OC3_SetConfig+0xf8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d10d      	bne.n	80038d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	4a23      	ldr	r2, [pc, #140]	; (800394c <TIM_OC3_SetConfig+0xfc>)
 80038be:	4013      	ands	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	4a1f      	ldr	r2, [pc, #124]	; (8003950 <TIM_OC3_SetConfig+0x100>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a1b      	ldr	r2, [pc, #108]	; (8003948 <TIM_OC3_SetConfig+0xf8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <TIM_OC3_SetConfig+0xa6>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a1c      	ldr	r2, [pc, #112]	; (8003954 <TIM_OC3_SetConfig+0x104>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <TIM_OC3_SetConfig+0xa6>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a1b      	ldr	r2, [pc, #108]	; (8003958 <TIM_OC3_SetConfig+0x108>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <TIM_OC3_SetConfig+0xa6>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a1a      	ldr	r2, [pc, #104]	; (800395c <TIM_OC3_SetConfig+0x10c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d113      	bne.n	800391e <TIM_OC3_SetConfig+0xce>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	4a19      	ldr	r2, [pc, #100]	; (8003960 <TIM_OC3_SetConfig+0x110>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	4a18      	ldr	r2, [pc, #96]	; (8003964 <TIM_OC3_SetConfig+0x114>)
 8003902:	4013      	ands	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	621a      	str	r2, [r3, #32]
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b006      	add	sp, #24
 800393e:	bd80      	pop	{r7, pc}
 8003940:	fffffeff 	.word	0xfffffeff
 8003944:	fffffdff 	.word	0xfffffdff
 8003948:	40012c00 	.word	0x40012c00
 800394c:	fffff7ff 	.word	0xfffff7ff
 8003950:	fffffbff 	.word	0xfffffbff
 8003954:	40014000 	.word	0x40014000
 8003958:	40014400 	.word	0x40014400
 800395c:	40014800 	.word	0x40014800
 8003960:	ffffefff 	.word	0xffffefff
 8003964:	ffffdfff 	.word	0xffffdfff

08003968 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	4a28      	ldr	r2, [pc, #160]	; (8003a24 <TIM_OC4_SetConfig+0xbc>)
 8003984:	401a      	ands	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4a22      	ldr	r2, [pc, #136]	; (8003a28 <TIM_OC4_SetConfig+0xc0>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4a21      	ldr	r2, [pc, #132]	; (8003a2c <TIM_OC4_SetConfig+0xc4>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4a1d      	ldr	r2, [pc, #116]	; (8003a30 <TIM_OC4_SetConfig+0xc8>)
 80039bc:	4013      	ands	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	031b      	lsls	r3, r3, #12
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a19      	ldr	r2, [pc, #100]	; (8003a34 <TIM_OC4_SetConfig+0xcc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00b      	beq.n	80039ec <TIM_OC4_SetConfig+0x84>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <TIM_OC4_SetConfig+0xd0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d007      	beq.n	80039ec <TIM_OC4_SetConfig+0x84>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <TIM_OC4_SetConfig+0xd4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_OC4_SetConfig+0x84>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <TIM_OC4_SetConfig+0xd8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d109      	bne.n	8003a00 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <TIM_OC4_SetConfig+0xdc>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	019b      	lsls	r3, r3, #6
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	621a      	str	r2, [r3, #32]
}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b006      	add	sp, #24
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	ffffefff 	.word	0xffffefff
 8003a28:	ffff8fff 	.word	0xffff8fff
 8003a2c:	fffffcff 	.word	0xfffffcff
 8003a30:	ffffdfff 	.word	0xffffdfff
 8003a34:	40012c00 	.word	0x40012c00
 8003a38:	40014000 	.word	0x40014000
 8003a3c:	40014400 	.word	0x40014400
 8003a40:	40014800 	.word	0x40014800
 8003a44:	ffffbfff 	.word	0xffffbfff

08003a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	223c      	movs	r2, #60	; 0x3c
 8003a56:	5c9b      	ldrb	r3, [r3, r2]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e032      	b.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	223c      	movs	r2, #60	; 0x3c
 8003a64:	2101      	movs	r1, #1
 8003a66:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	223d      	movs	r2, #61	; 0x3d
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2170      	movs	r1, #112	; 0x70
 8003a7c:	438a      	bics	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6859      	ldr	r1, [r3, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2180      	movs	r1, #128	; 0x80
 8003a9e:	438a      	bics	r2, r1
 8003aa0:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6899      	ldr	r1, [r3, #8]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	223d      	movs	r2, #61	; 0x3d
 8003ab8:	2101      	movs	r1, #1
 8003aba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	223c      	movs	r2, #60	; 0x3c
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b002      	add	sp, #8
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	223c      	movs	r2, #60	; 0x3c
 8003ae2:	5c9b      	ldrb	r3, [r3, r2]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e04d      	b.n	8003b88 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	223c      	movs	r2, #60	; 0x3c
 8003af0:	2101      	movs	r1, #1
 8003af2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	223d      	movs	r2, #61	; 0x3d
 8003af8:	2102      	movs	r1, #2
 8003afa:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	22ff      	movs	r2, #255	; 0xff
 8003b00:	4393      	bics	r3, r2
 8003b02:	001a      	movs	r2, r3
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4a20      	ldr	r2, [pc, #128]	; (8003b90 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8003b10:	401a      	ands	r2, r3
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4a1d      	ldr	r2, [pc, #116]	; (8003b94 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 8003b1e:	401a      	ands	r2, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <HAL_TIMEx_ConfigBreakDeadTime+0xc8>)
 8003b2c:	401a      	ands	r2, r3
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4a18      	ldr	r2, [pc, #96]	; (8003b9c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>)
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a16      	ldr	r2, [pc, #88]	; (8003ba0 <HAL_TIMEx_ConfigBreakDeadTime+0xd0>)
 8003b48:	401a      	ands	r2, r3
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4a13      	ldr	r2, [pc, #76]	; (8003ba4 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>)
 8003b56:	401a      	ands	r2, r3
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4a11      	ldr	r2, [pc, #68]	; (8003ba8 <HAL_TIMEx_ConfigBreakDeadTime+0xd8>)
 8003b64:	401a      	ands	r2, r3
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	223d      	movs	r2, #61	; 0x3d
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	223c      	movs	r2, #60	; 0x3c
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	0018      	movs	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b004      	add	sp, #16
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	fffffcff 	.word	0xfffffcff
 8003b94:	fffffbff 	.word	0xfffffbff
 8003b98:	fffff7ff 	.word	0xfffff7ff
 8003b9c:	ffffefff 	.word	0xffffefff
 8003ba0:	ffffdfff 	.word	0xffffdfff
 8003ba4:	ffffbfff 	.word	0xffffbfff
 8003ba8:	ffff7fff 	.word	0xffff7fff

08003bac <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003bb4:	46c0      	nop			; (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b002      	add	sp, #8
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e047      	b.n	8003c6e <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2269      	movs	r2, #105	; 0x69
 8003be2:	5c9b      	ldrb	r3, [r3, r2]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d107      	bne.n	8003bfa <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2268      	movs	r2, #104	; 0x68
 8003bee:	2100      	movs	r1, #0
 8003bf0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f002 fa01 	bl	8005ffc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2269      	movs	r2, #105	; 0x69
 8003bfe:	2124      	movs	r1, #36	; 0x24
 8003c00:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	438a      	bics	r2, r1
 8003c10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	0018      	movs	r0, r3
 8003c16:	f000 f831 	bl	8003c7c <UART_SetConfig>
 8003c1a:	0003      	movs	r3, r0
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e024      	b.n	8003c6e <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f000 fa3e 	bl	80040b0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	490e      	ldr	r1, [pc, #56]	; (8003c78 <HAL_UART_Init+0xac>)
 8003c40:	400a      	ands	r2, r1
 8003c42:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	212a      	movs	r1, #42	; 0x2a
 8003c50:	438a      	bics	r2, r1
 8003c52:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2101      	movs	r1, #1
 8003c60:	430a      	orrs	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	0018      	movs	r0, r3
 8003c68:	f000 fad6 	bl	8004218 <UART_CheckIdleState>
 8003c6c:	0003      	movs	r3, r0
}
 8003c6e:	0018      	movs	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b002      	add	sp, #8
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	ffffb7ff 	.word	0xffffb7ff

08003c7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c7c:	b590      	push	{r4, r7, lr}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003c88:	2317      	movs	r3, #23
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8003c90:	230a      	movs	r3, #10
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	2200      	movs	r2, #0
 8003c96:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8003c98:	2314      	movs	r3, #20
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ca0:	2313      	movs	r3, #19
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4ac1      	ldr	r2, [pc, #772]	; (8003fcc <UART_SetConfig+0x350>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	0019      	movs	r1, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4abc      	ldr	r2, [pc, #752]	; (8003fd0 <UART_SetConfig+0x354>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	4ab4      	ldr	r2, [pc, #720]	; (8003fd4 <UART_SetConfig+0x358>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	0019      	movs	r1, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4ab0      	ldr	r2, [pc, #704]	; (8003fd8 <UART_SetConfig+0x35c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d125      	bne.n	8003d66 <UART_SetConfig+0xea>
 8003d1a:	4bb0      	ldr	r3, [pc, #704]	; (8003fdc <UART_SetConfig+0x360>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	2203      	movs	r2, #3
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d00f      	beq.n	8003d46 <UART_SetConfig+0xca>
 8003d26:	d304      	bcc.n	8003d32 <UART_SetConfig+0xb6>
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d011      	beq.n	8003d50 <UART_SetConfig+0xd4>
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d005      	beq.n	8003d3c <UART_SetConfig+0xc0>
 8003d30:	e013      	b.n	8003d5a <UART_SetConfig+0xde>
 8003d32:	2317      	movs	r3, #23
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
 8003d3a:	e0ba      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003d3c:	2317      	movs	r3, #23
 8003d3e:	18fb      	adds	r3, r7, r3
 8003d40:	2202      	movs	r2, #2
 8003d42:	701a      	strb	r2, [r3, #0]
 8003d44:	e0b5      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003d46:	2317      	movs	r3, #23
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	e0b0      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003d50:	2317      	movs	r3, #23
 8003d52:	18fb      	adds	r3, r7, r3
 8003d54:	2208      	movs	r2, #8
 8003d56:	701a      	strb	r2, [r3, #0]
 8003d58:	e0ab      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003d5a:	2317      	movs	r3, #23
 8003d5c:	18fb      	adds	r3, r7, r3
 8003d5e:	2210      	movs	r2, #16
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	e0a5      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a9d      	ldr	r2, [pc, #628]	; (8003fe0 <UART_SetConfig+0x364>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d132      	bne.n	8003dd6 <UART_SetConfig+0x15a>
 8003d70:	4b9a      	ldr	r3, [pc, #616]	; (8003fdc <UART_SetConfig+0x360>)
 8003d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d74:	23c0      	movs	r3, #192	; 0xc0
 8003d76:	029b      	lsls	r3, r3, #10
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2280      	movs	r2, #128	; 0x80
 8003d7c:	0252      	lsls	r2, r2, #9
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d019      	beq.n	8003db6 <UART_SetConfig+0x13a>
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	0252      	lsls	r2, r2, #9
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d802      	bhi.n	8003d90 <UART_SetConfig+0x114>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <UART_SetConfig+0x126>
 8003d8e:	e01c      	b.n	8003dca <UART_SetConfig+0x14e>
 8003d90:	2280      	movs	r2, #128	; 0x80
 8003d92:	0292      	lsls	r2, r2, #10
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d013      	beq.n	8003dc0 <UART_SetConfig+0x144>
 8003d98:	22c0      	movs	r2, #192	; 0xc0
 8003d9a:	0292      	lsls	r2, r2, #10
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d005      	beq.n	8003dac <UART_SetConfig+0x130>
 8003da0:	e013      	b.n	8003dca <UART_SetConfig+0x14e>
 8003da2:	2317      	movs	r3, #23
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	2200      	movs	r2, #0
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	e082      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003dac:	2317      	movs	r3, #23
 8003dae:	18fb      	adds	r3, r7, r3
 8003db0:	2202      	movs	r2, #2
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	e07d      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003db6:	2317      	movs	r3, #23
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	2204      	movs	r2, #4
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	e078      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003dc0:	2317      	movs	r3, #23
 8003dc2:	18fb      	adds	r3, r7, r3
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	701a      	strb	r2, [r3, #0]
 8003dc8:	e073      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003dca:	2317      	movs	r3, #23
 8003dcc:	18fb      	adds	r3, r7, r3
 8003dce:	2210      	movs	r2, #16
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	e06d      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a82      	ldr	r2, [pc, #520]	; (8003fe4 <UART_SetConfig+0x368>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d132      	bne.n	8003e46 <UART_SetConfig+0x1ca>
 8003de0:	4b7e      	ldr	r3, [pc, #504]	; (8003fdc <UART_SetConfig+0x360>)
 8003de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de4:	23c0      	movs	r3, #192	; 0xc0
 8003de6:	031b      	lsls	r3, r3, #12
 8003de8:	4013      	ands	r3, r2
 8003dea:	2280      	movs	r2, #128	; 0x80
 8003dec:	02d2      	lsls	r2, r2, #11
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d019      	beq.n	8003e26 <UART_SetConfig+0x1aa>
 8003df2:	2280      	movs	r2, #128	; 0x80
 8003df4:	02d2      	lsls	r2, r2, #11
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d802      	bhi.n	8003e00 <UART_SetConfig+0x184>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <UART_SetConfig+0x196>
 8003dfe:	e01c      	b.n	8003e3a <UART_SetConfig+0x1be>
 8003e00:	2280      	movs	r2, #128	; 0x80
 8003e02:	0312      	lsls	r2, r2, #12
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d013      	beq.n	8003e30 <UART_SetConfig+0x1b4>
 8003e08:	22c0      	movs	r2, #192	; 0xc0
 8003e0a:	0312      	lsls	r2, r2, #12
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d005      	beq.n	8003e1c <UART_SetConfig+0x1a0>
 8003e10:	e013      	b.n	8003e3a <UART_SetConfig+0x1be>
 8003e12:	2317      	movs	r3, #23
 8003e14:	18fb      	adds	r3, r7, r3
 8003e16:	2200      	movs	r2, #0
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	e04a      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003e1c:	2317      	movs	r3, #23
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	2202      	movs	r2, #2
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	e045      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003e26:	2317      	movs	r3, #23
 8003e28:	18fb      	adds	r3, r7, r3
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	701a      	strb	r2, [r3, #0]
 8003e2e:	e040      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003e30:	2317      	movs	r3, #23
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	2208      	movs	r2, #8
 8003e36:	701a      	strb	r2, [r3, #0]
 8003e38:	e03b      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003e3a:	2317      	movs	r3, #23
 8003e3c:	18fb      	adds	r3, r7, r3
 8003e3e:	2210      	movs	r2, #16
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	e035      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a67      	ldr	r2, [pc, #412]	; (8003fe8 <UART_SetConfig+0x36c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d104      	bne.n	8003e5a <UART_SetConfig+0x1de>
 8003e50:	2317      	movs	r3, #23
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	e02b      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a63      	ldr	r2, [pc, #396]	; (8003fec <UART_SetConfig+0x370>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d104      	bne.n	8003e6e <UART_SetConfig+0x1f2>
 8003e64:	2317      	movs	r3, #23
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	2200      	movs	r2, #0
 8003e6a:	701a      	strb	r2, [r3, #0]
 8003e6c:	e021      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a5f      	ldr	r2, [pc, #380]	; (8003ff0 <UART_SetConfig+0x374>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d104      	bne.n	8003e82 <UART_SetConfig+0x206>
 8003e78:	2317      	movs	r3, #23
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e017      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a5b      	ldr	r2, [pc, #364]	; (8003ff4 <UART_SetConfig+0x378>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d104      	bne.n	8003e96 <UART_SetConfig+0x21a>
 8003e8c:	2317      	movs	r3, #23
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	e00d      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a57      	ldr	r2, [pc, #348]	; (8003ff8 <UART_SetConfig+0x37c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d104      	bne.n	8003eaa <UART_SetConfig+0x22e>
 8003ea0:	2317      	movs	r3, #23
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
 8003ea8:	e003      	b.n	8003eb2 <UART_SetConfig+0x236>
 8003eaa:	2317      	movs	r3, #23
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	2210      	movs	r2, #16
 8003eb0:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	2380      	movs	r3, #128	; 0x80
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d000      	beq.n	8003ec0 <UART_SetConfig+0x244>
 8003ebe:	e077      	b.n	8003fb0 <UART_SetConfig+0x334>
  {
    switch (clocksource)
 8003ec0:	2317      	movs	r3, #23
 8003ec2:	18fb      	adds	r3, r7, r3
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d01c      	beq.n	8003f04 <UART_SetConfig+0x288>
 8003eca:	dc02      	bgt.n	8003ed2 <UART_SetConfig+0x256>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <UART_SetConfig+0x260>
 8003ed0:	e04f      	b.n	8003f72 <UART_SetConfig+0x2f6>
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d027      	beq.n	8003f26 <UART_SetConfig+0x2aa>
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d039      	beq.n	8003f4e <UART_SetConfig+0x2d2>
 8003eda:	e04a      	b.n	8003f72 <UART_SetConfig+0x2f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003edc:	f7fd ff2c 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	005a      	lsls	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	085b      	lsrs	r3, r3, #1
 8003eea:	18d2      	adds	r2, r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	0010      	movs	r0, r2
 8003ef4:	f7fc f906 	bl	8000104 <__udivsi3>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	001a      	movs	r2, r3
 8003efc:	2314      	movs	r3, #20
 8003efe:	18fb      	adds	r3, r7, r3
 8003f00:	801a      	strh	r2, [r3, #0]
        break;
 8003f02:	e03b      	b.n	8003f7c <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	4a3c      	ldr	r2, [pc, #240]	; (8003ffc <UART_SetConfig+0x380>)
 8003f0c:	189a      	adds	r2, r3, r2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	0019      	movs	r1, r3
 8003f14:	0010      	movs	r0, r2
 8003f16:	f7fc f8f5 	bl	8000104 <__udivsi3>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	001a      	movs	r2, r3
 8003f1e:	2314      	movs	r3, #20
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	801a      	strh	r2, [r3, #0]
        break;
 8003f24:	e02a      	b.n	8003f7c <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f26:	f7fd fe7f 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	005a      	lsls	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	085b      	lsrs	r3, r3, #1
 8003f34:	18d2      	adds	r2, r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	0019      	movs	r1, r3
 8003f3c:	0010      	movs	r0, r2
 8003f3e:	f7fc f8e1 	bl	8000104 <__udivsi3>
 8003f42:	0003      	movs	r3, r0
 8003f44:	001a      	movs	r2, r3
 8003f46:	2314      	movs	r3, #20
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	801a      	strh	r2, [r3, #0]
        break;
 8003f4c:	e016      	b.n	8003f7c <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	085b      	lsrs	r3, r3, #1
 8003f54:	2280      	movs	r2, #128	; 0x80
 8003f56:	0252      	lsls	r2, r2, #9
 8003f58:	189a      	adds	r2, r3, r2
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	0019      	movs	r1, r3
 8003f60:	0010      	movs	r0, r2
 8003f62:	f7fc f8cf 	bl	8000104 <__udivsi3>
 8003f66:	0003      	movs	r3, r0
 8003f68:	001a      	movs	r2, r3
 8003f6a:	2314      	movs	r3, #20
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	801a      	strh	r2, [r3, #0]
        break;
 8003f70:	e004      	b.n	8003f7c <UART_SetConfig+0x300>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003f72:	2313      	movs	r3, #19
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	2201      	movs	r2, #1
 8003f78:	701a      	strb	r2, [r3, #0]
        break;
 8003f7a:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003f7c:	200a      	movs	r0, #10
 8003f7e:	183b      	adds	r3, r7, r0
 8003f80:	2414      	movs	r4, #20
 8003f82:	193a      	adds	r2, r7, r4
 8003f84:	8812      	ldrh	r2, [r2, #0]
 8003f86:	210f      	movs	r1, #15
 8003f88:	438a      	bics	r2, r1
 8003f8a:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f8c:	193b      	adds	r3, r7, r4
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	105b      	asrs	r3, r3, #1
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2207      	movs	r2, #7
 8003f96:	4013      	ands	r3, r2
 8003f98:	b299      	uxth	r1, r3
 8003f9a:	183b      	adds	r3, r7, r0
 8003f9c:	183a      	adds	r2, r7, r0
 8003f9e:	8812      	ldrh	r2, [r2, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	183a      	adds	r2, r7, r0
 8003faa:	8812      	ldrh	r2, [r2, #0]
 8003fac:	60da      	str	r2, [r3, #12]
 8003fae:	e075      	b.n	800409c <UART_SetConfig+0x420>
  }
  else
  {
    switch (clocksource)
 8003fb0:	2317      	movs	r3, #23
 8003fb2:	18fb      	adds	r3, r7, r3
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d035      	beq.n	8004026 <UART_SetConfig+0x3aa>
 8003fba:	dc02      	bgt.n	8003fc2 <UART_SetConfig+0x346>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01f      	beq.n	8004000 <UART_SetConfig+0x384>
 8003fc0:	e067      	b.n	8004092 <UART_SetConfig+0x416>
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d040      	beq.n	8004048 <UART_SetConfig+0x3cc>
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d051      	beq.n	800406e <UART_SetConfig+0x3f2>
 8003fca:	e062      	b.n	8004092 <UART_SetConfig+0x416>
 8003fcc:	efff69f3 	.word	0xefff69f3
 8003fd0:	ffffcfff 	.word	0xffffcfff
 8003fd4:	fffff4ff 	.word	0xfffff4ff
 8003fd8:	40013800 	.word	0x40013800
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40004400 	.word	0x40004400
 8003fe4:	40004800 	.word	0x40004800
 8003fe8:	40004c00 	.word	0x40004c00
 8003fec:	40005000 	.word	0x40005000
 8003ff0:	40011400 	.word	0x40011400
 8003ff4:	40011800 	.word	0x40011800
 8003ff8:	40011c00 	.word	0x40011c00
 8003ffc:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004000:	f7fd fe9a 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
 8004004:	0002      	movs	r2, r0
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	18d2      	adds	r2, r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	0019      	movs	r1, r3
 8004014:	0010      	movs	r0, r2
 8004016:	f7fc f875 	bl	8000104 <__udivsi3>
 800401a:	0003      	movs	r3, r0
 800401c:	b29a      	uxth	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60da      	str	r2, [r3, #12]
        break;
 8004024:	e03a      	b.n	800409c <UART_SetConfig+0x420>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	085b      	lsrs	r3, r3, #1
 800402c:	4a1f      	ldr	r2, [pc, #124]	; (80040ac <UART_SetConfig+0x430>)
 800402e:	189a      	adds	r2, r3, r2
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	0019      	movs	r1, r3
 8004036:	0010      	movs	r0, r2
 8004038:	f7fc f864 	bl	8000104 <__udivsi3>
 800403c:	0003      	movs	r3, r0
 800403e:	b29a      	uxth	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60da      	str	r2, [r3, #12]
        break;
 8004046:	e029      	b.n	800409c <UART_SetConfig+0x420>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004048:	f7fd fdee 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 800404c:	0002      	movs	r2, r0
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	18d2      	adds	r2, r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	0019      	movs	r1, r3
 800405c:	0010      	movs	r0, r2
 800405e:	f7fc f851 	bl	8000104 <__udivsi3>
 8004062:	0003      	movs	r3, r0
 8004064:	b29a      	uxth	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60da      	str	r2, [r3, #12]
        break;
 800406c:	e016      	b.n	800409c <UART_SetConfig+0x420>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	085b      	lsrs	r3, r3, #1
 8004074:	2280      	movs	r2, #128	; 0x80
 8004076:	0212      	lsls	r2, r2, #8
 8004078:	189a      	adds	r2, r3, r2
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	0019      	movs	r1, r3
 8004080:	0010      	movs	r0, r2
 8004082:	f7fc f83f 	bl	8000104 <__udivsi3>
 8004086:	0003      	movs	r3, r0
 8004088:	b29a      	uxth	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60da      	str	r2, [r3, #12]
        break;
 8004090:	e004      	b.n	800409c <UART_SetConfig+0x420>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004092:	2313      	movs	r3, #19
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	2201      	movs	r2, #1
 8004098:	701a      	strb	r2, [r3, #0]
        break;
 800409a:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 800409c:	2313      	movs	r3, #19
 800409e:	18fb      	adds	r3, r7, r3
 80040a0:	781b      	ldrb	r3, [r3, #0]

}
 80040a2:	0018      	movs	r0, r3
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b007      	add	sp, #28
 80040a8:	bd90      	pop	{r4, r7, pc}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	007a1200 	.word	0x007a1200

080040b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	2201      	movs	r2, #1
 80040be:	4013      	ands	r3, r2
 80040c0:	d00b      	beq.n	80040da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4a4a      	ldr	r2, [pc, #296]	; (80041f4 <UART_AdvFeatureConfig+0x144>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	0019      	movs	r1, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	2202      	movs	r2, #2
 80040e0:	4013      	ands	r3, r2
 80040e2:	d00b      	beq.n	80040fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4a43      	ldr	r2, [pc, #268]	; (80041f8 <UART_AdvFeatureConfig+0x148>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	0019      	movs	r1, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	2204      	movs	r2, #4
 8004102:	4013      	ands	r3, r2
 8004104:	d00b      	beq.n	800411e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4a3b      	ldr	r2, [pc, #236]	; (80041fc <UART_AdvFeatureConfig+0x14c>)
 800410e:	4013      	ands	r3, r2
 8004110:	0019      	movs	r1, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	2208      	movs	r2, #8
 8004124:	4013      	ands	r3, r2
 8004126:	d00b      	beq.n	8004140 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4a34      	ldr	r2, [pc, #208]	; (8004200 <UART_AdvFeatureConfig+0x150>)
 8004130:	4013      	ands	r3, r2
 8004132:	0019      	movs	r1, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	2210      	movs	r2, #16
 8004146:	4013      	ands	r3, r2
 8004148:	d00b      	beq.n	8004162 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	4a2c      	ldr	r2, [pc, #176]	; (8004204 <UART_AdvFeatureConfig+0x154>)
 8004152:	4013      	ands	r3, r2
 8004154:	0019      	movs	r1, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	2220      	movs	r2, #32
 8004168:	4013      	ands	r3, r2
 800416a:	d00b      	beq.n	8004184 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	4a25      	ldr	r2, [pc, #148]	; (8004208 <UART_AdvFeatureConfig+0x158>)
 8004174:	4013      	ands	r3, r2
 8004176:	0019      	movs	r1, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	2240      	movs	r2, #64	; 0x40
 800418a:	4013      	ands	r3, r2
 800418c:	d01d      	beq.n	80041ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a1d      	ldr	r2, [pc, #116]	; (800420c <UART_AdvFeatureConfig+0x15c>)
 8004196:	4013      	ands	r3, r2
 8004198:	0019      	movs	r1, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041aa:	2380      	movs	r3, #128	; 0x80
 80041ac:	035b      	lsls	r3, r3, #13
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d10b      	bne.n	80041ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	4a15      	ldr	r2, [pc, #84]	; (8004210 <UART_AdvFeatureConfig+0x160>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	0019      	movs	r1, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	2280      	movs	r2, #128	; 0x80
 80041d0:	4013      	ands	r3, r2
 80041d2:	d00b      	beq.n	80041ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	4a0e      	ldr	r2, [pc, #56]	; (8004214 <UART_AdvFeatureConfig+0x164>)
 80041dc:	4013      	ands	r3, r2
 80041de:	0019      	movs	r1, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	605a      	str	r2, [r3, #4]
  }
}
 80041ec:	46c0      	nop			; (mov r8, r8)
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b002      	add	sp, #8
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	fffdffff 	.word	0xfffdffff
 80041f8:	fffeffff 	.word	0xfffeffff
 80041fc:	fffbffff 	.word	0xfffbffff
 8004200:	ffff7fff 	.word	0xffff7fff
 8004204:	ffffefff 	.word	0xffffefff
 8004208:	ffffdfff 	.word	0xffffdfff
 800420c:	ffefffff 	.word	0xffefffff
 8004210:	ff9fffff 	.word	0xff9fffff
 8004214:	fff7ffff 	.word	0xfff7ffff

08004218 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af02      	add	r7, sp, #8
 800421e:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800422a:	f7fc f841 	bl	80002b0 <HAL_GetTick>
 800422e:	0003      	movs	r3, r0
 8004230:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a24      	ldr	r2, [pc, #144]	; (80042c8 <UART_CheckIdleState+0xb0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d009      	beq.n	8004250 <UART_CheckIdleState+0x38>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a22      	ldr	r2, [pc, #136]	; (80042cc <UART_CheckIdleState+0xb4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <UART_CheckIdleState+0x38>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a21      	ldr	r2, [pc, #132]	; (80042d0 <UART_CheckIdleState+0xb8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d129      	bne.n	80042a4 <UART_CheckIdleState+0x8c>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2208      	movs	r2, #8
 8004258:	4013      	ands	r3, r2
 800425a:	2b08      	cmp	r3, #8
 800425c:	d10d      	bne.n	800427a <UART_CheckIdleState+0x62>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	2380      	movs	r3, #128	; 0x80
 8004262:	0399      	lsls	r1, r3, #14
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <UART_CheckIdleState+0xbc>)
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	0013      	movs	r3, r2
 800426c:	2200      	movs	r2, #0
 800426e:	f000 f833 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 8004272:	1e03      	subs	r3, r0, #0
 8004274:	d001      	beq.n	800427a <UART_CheckIdleState+0x62>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e021      	b.n	80042be <UART_CheckIdleState+0xa6>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2204      	movs	r2, #4
 8004282:	4013      	ands	r3, r2
 8004284:	2b04      	cmp	r3, #4
 8004286:	d10d      	bne.n	80042a4 <UART_CheckIdleState+0x8c>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	2380      	movs	r3, #128	; 0x80
 800428c:	03d9      	lsls	r1, r3, #15
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <UART_CheckIdleState+0xbc>)
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	0013      	movs	r3, r2
 8004296:	2200      	movs	r2, #0
 8004298:	f000 f81e 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 800429c:	1e03      	subs	r3, r0, #0
 800429e:	d001      	beq.n	80042a4 <UART_CheckIdleState+0x8c>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e00c      	b.n	80042be <UART_CheckIdleState+0xa6>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2269      	movs	r2, #105	; 0x69
 80042a8:	2120      	movs	r1, #32
 80042aa:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	226a      	movs	r2, #106	; 0x6a
 80042b0:	2120      	movs	r1, #32
 80042b2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2268      	movs	r2, #104	; 0x68
 80042b8:	2100      	movs	r1, #0
 80042ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	0018      	movs	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b004      	add	sp, #16
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	40013800 	.word	0x40013800
 80042cc:	40004400 	.word	0x40004400
 80042d0:	40004800 	.word	0x40004800
 80042d4:	01ffffff 	.word	0x01ffffff

080042d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	1dfb      	adds	r3, r7, #7
 80042e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e8:	e02b      	b.n	8004342 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	3301      	adds	r3, #1
 80042ee:	d028      	beq.n	8004342 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d007      	beq.n	8004306 <UART_WaitOnFlagUntilTimeout+0x2e>
 80042f6:	f7fb ffdb 	bl	80002b0 <HAL_GetTick>
 80042fa:	0002      	movs	r2, r0
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	429a      	cmp	r2, r3
 8004304:	d21d      	bcs.n	8004342 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4916      	ldr	r1, [pc, #88]	; (800436c <UART_WaitOnFlagUntilTimeout+0x94>)
 8004312:	400a      	ands	r2, r1
 8004314:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2101      	movs	r1, #1
 8004322:	438a      	bics	r2, r1
 8004324:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2269      	movs	r2, #105	; 0x69
 800432a:	2120      	movs	r1, #32
 800432c:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	226a      	movs	r2, #106	; 0x6a
 8004332:	2120      	movs	r1, #32
 8004334:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2268      	movs	r2, #104	; 0x68
 800433a:	2100      	movs	r1, #0
 800433c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e00f      	b.n	8004362 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	4013      	ands	r3, r2
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	425a      	negs	r2, r3
 8004352:	4153      	adcs	r3, r2
 8004354:	b2db      	uxtb	r3, r3
 8004356:	001a      	movs	r2, r3
 8004358:	1dfb      	adds	r3, r7, #7
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d0c4      	beq.n	80042ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	0018      	movs	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	b004      	add	sp, #16
 8004368:	bd80      	pop	{r7, pc}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	fffffe5f 	.word	0xfffffe5f

08004370 <Nrf905SetMode>:
/**
 * @brief Simple function to control a power state off a nFR905
 * @param  nRF905ModeMode			A enumeration status
 */
void Nrf905SetMode(nRF905ModeType nRF905ModeMode)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	0002      	movs	r2, r0
 8004378:	1dfb      	adds	r3, r7, #7
 800437a:	701a      	strb	r2, [r3, #0]
	switch (nRF905ModeMode)
 800437c:	1dfb      	adds	r3, r7, #7
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b04      	cmp	r3, #4
 8004382:	d86d      	bhi.n	8004460 <Nrf905SetMode+0xf0>
 8004384:	009a      	lsls	r2, r3, #2
 8004386:	4b44      	ldr	r3, [pc, #272]	; (8004498 <Nrf905SetMode+0x128>)
 8004388:	18d3      	adds	r3, r2, r3
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	469f      	mov	pc, r3
	{
	case ePowerDownAndProgramingMode:
		Nrf905ResetPwrUp();
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4842      	ldr	r0, [pc, #264]	; (800449c <Nrf905SetMode+0x12c>)
 8004394:	2200      	movs	r2, #0
 8004396:	0019      	movs	r1, r3
 8004398:	f7fc fe6f 	bl	800107a <HAL_GPIO_WritePin>
		Nrf905ResetTRxCe();
 800439c:	4b3f      	ldr	r3, [pc, #252]	; (800449c <Nrf905SetMode+0x12c>)
 800439e:	2200      	movs	r2, #0
 80043a0:	2120      	movs	r1, #32
 80043a2:	0018      	movs	r0, r3
 80043a4:	f7fc fe69 	bl	800107a <HAL_GPIO_WritePin>
		Nrf905ResetTxEn();
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	483b      	ldr	r0, [pc, #236]	; (800449c <Nrf905SetMode+0x12c>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	0019      	movs	r1, r3
 80043b2:	f7fc fe62 	bl	800107a <HAL_GPIO_WritePin>
		break;
 80043b6:	e068      	b.n	800448a <Nrf905SetMode+0x11a>
	case eReadDataFromRxMode:
		Nrf905SetPwrUp();
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4837      	ldr	r0, [pc, #220]	; (800449c <Nrf905SetMode+0x12c>)
 80043be:	2201      	movs	r2, #1
 80043c0:	0019      	movs	r1, r3
 80043c2:	f7fc fe5a 	bl	800107a <HAL_GPIO_WritePin>
		Nrf905SetTRxCe();
 80043c6:	4b35      	ldr	r3, [pc, #212]	; (800449c <Nrf905SetMode+0x12c>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	2120      	movs	r1, #32
 80043cc:	0018      	movs	r0, r3
 80043ce:	f7fc fe54 	bl	800107a <HAL_GPIO_WritePin>
		Nrf905ResetTxEn();
 80043d2:	2380      	movs	r3, #128	; 0x80
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	4831      	ldr	r0, [pc, #196]	; (800449c <Nrf905SetMode+0x12c>)
 80043d8:	2200      	movs	r2, #0
 80043da:	0019      	movs	r1, r3
 80043dc:	f7fc fe4d 	bl	800107a <HAL_GPIO_WritePin>
		break;
 80043e0:	e053      	b.n	800448a <Nrf905SetMode+0x11a>
	case eStandByAndProgramingMode:
		Nrf905SetPwrUp();
 80043e2:	2380      	movs	r3, #128	; 0x80
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	482d      	ldr	r0, [pc, #180]	; (800449c <Nrf905SetMode+0x12c>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	0019      	movs	r1, r3
 80043ec:	f7fc fe45 	bl	800107a <HAL_GPIO_WritePin>
		Nrf905ResetTRxCe();
 80043f0:	4b2a      	ldr	r3, [pc, #168]	; (800449c <Nrf905SetMode+0x12c>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	2120      	movs	r1, #32
 80043f6:	0018      	movs	r0, r3
 80043f8:	f7fc fe3f 	bl	800107a <HAL_GPIO_WritePin>
		Nrf905SetTxEn();
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	4826      	ldr	r0, [pc, #152]	; (800449c <Nrf905SetMode+0x12c>)
 8004402:	2201      	movs	r2, #1
 8004404:	0019      	movs	r1, r3
 8004406:	f7fc fe38 	bl	800107a <HAL_GPIO_WritePin>
		break;
 800440a:	e03e      	b.n	800448a <Nrf905SetMode+0x11a>
	case eReceiveShockBurstMode:
		Nrf905SetPwrUp();
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4822      	ldr	r0, [pc, #136]	; (800449c <Nrf905SetMode+0x12c>)
 8004412:	2201      	movs	r2, #1
 8004414:	0019      	movs	r1, r3
 8004416:	f7fc fe30 	bl	800107a <HAL_GPIO_WritePin>
		Nrf905SetTRxCe();
 800441a:	4b20      	ldr	r3, [pc, #128]	; (800449c <Nrf905SetMode+0x12c>)
 800441c:	2201      	movs	r2, #1
 800441e:	2120      	movs	r1, #32
 8004420:	0018      	movs	r0, r3
 8004422:	f7fc fe2a 	bl	800107a <HAL_GPIO_WritePin>
		Nrf905ResetTxEn();
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	481c      	ldr	r0, [pc, #112]	; (800449c <Nrf905SetMode+0x12c>)
 800442c:	2200      	movs	r2, #0
 800442e:	0019      	movs	r1, r3
 8004430:	f7fc fe23 	bl	800107a <HAL_GPIO_WritePin>
		break;
 8004434:	e029      	b.n	800448a <Nrf905SetMode+0x11a>
	case eTrasmitShockBurstMode:
		Nrf905SetPwrUp();
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4818      	ldr	r0, [pc, #96]	; (800449c <Nrf905SetMode+0x12c>)
 800443c:	2201      	movs	r2, #1
 800443e:	0019      	movs	r1, r3
 8004440:	f7fc fe1b 	bl	800107a <HAL_GPIO_WritePin>
		Nrf905SetTRxCe();
 8004444:	4b15      	ldr	r3, [pc, #84]	; (800449c <Nrf905SetMode+0x12c>)
 8004446:	2201      	movs	r2, #1
 8004448:	2120      	movs	r1, #32
 800444a:	0018      	movs	r0, r3
 800444c:	f7fc fe15 	bl	800107a <HAL_GPIO_WritePin>
		Nrf905SetTxEn();
 8004450:	2380      	movs	r3, #128	; 0x80
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	4811      	ldr	r0, [pc, #68]	; (800449c <Nrf905SetMode+0x12c>)
 8004456:	2201      	movs	r2, #1
 8004458:	0019      	movs	r1, r3
 800445a:	f7fc fe0e 	bl	800107a <HAL_GPIO_WritePin>
		break;
 800445e:	e014      	b.n	800448a <Nrf905SetMode+0x11a>
	default:
		Nrf905ResetPwrUp();
 8004460:	2380      	movs	r3, #128	; 0x80
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	480d      	ldr	r0, [pc, #52]	; (800449c <Nrf905SetMode+0x12c>)
 8004466:	2200      	movs	r2, #0
 8004468:	0019      	movs	r1, r3
 800446a:	f7fc fe06 	bl	800107a <HAL_GPIO_WritePin>
		Nrf905ResetTRxCe();
 800446e:	4b0b      	ldr	r3, [pc, #44]	; (800449c <Nrf905SetMode+0x12c>)
 8004470:	2200      	movs	r2, #0
 8004472:	2120      	movs	r1, #32
 8004474:	0018      	movs	r0, r3
 8004476:	f7fc fe00 	bl	800107a <HAL_GPIO_WritePin>
		Nrf905ResetTxEn();
 800447a:	2380      	movs	r3, #128	; 0x80
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	4807      	ldr	r0, [pc, #28]	; (800449c <Nrf905SetMode+0x12c>)
 8004480:	2200      	movs	r2, #0
 8004482:	0019      	movs	r1, r3
 8004484:	f7fc fdf9 	bl	800107a <HAL_GPIO_WritePin>
		break;
 8004488:	46c0      	nop			; (mov r8, r8)
	}
	HAL_Delay(5);
 800448a:	2005      	movs	r0, #5
 800448c:	f7fb ff1a 	bl	80002c4 <HAL_Delay>
}
 8004490:	46c0      	nop			; (mov r8, r8)
 8004492:	46bd      	mov	sp, r7
 8004494:	b002      	add	sp, #8
 8004496:	bd80      	pop	{r7, pc}
 8004498:	0800635c 	.word	0x0800635c
 800449c:	48000c00 	.word	0x48000c00

080044a0 <nRf905SetConfig>:
 *
 * @return RetValue 				A status error
 */

HAL_StatusTypeDef nRf905SetConfig(void)
{
 80044a0:	b590      	push	{r4, r7, lr}
 80044a2:	b089      	sub	sp, #36	; 0x24
 80044a4:	af00      	add	r7, sp, #0
	nRF905Cfg_t nRF905Config;
	nRF905Cfg_t nRF905Check;

	uint8_t i;

	nRF905Config.Fields.Command = eWriteConfigRegister;
 80044a6:	2010      	movs	r0, #16
 80044a8:	183b      	adds	r3, r7, r0
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]

	nRF905Config.Fields.CH_NO0 = (uint8_t) (nRfAt433_2MHz & 0x0FF);
 80044ae:	183b      	adds	r3, r7, r0
 80044b0:	226c      	movs	r2, #108	; 0x6c
 80044b2:	705a      	strb	r2, [r3, #1]

	nRF905Config.Fields.UNUSED1 = 0;
 80044b4:	183b      	adds	r3, r7, r0
 80044b6:	789a      	ldrb	r2, [r3, #2]
 80044b8:	213f      	movs	r1, #63	; 0x3f
 80044ba:	400a      	ands	r2, r1
 80044bc:	709a      	strb	r2, [r3, #2]
	nRF905Config.Fields.AUTO_RETRANS = AUTO_RETRAN_DIS;
 80044be:	183b      	adds	r3, r7, r0
 80044c0:	789a      	ldrb	r2, [r3, #2]
 80044c2:	2120      	movs	r1, #32
 80044c4:	430a      	orrs	r2, r1
 80044c6:	709a      	strb	r2, [r3, #2]
	nRF905Config.Fields.RX_RED_PWR = RX_NORM_PWR;
 80044c8:	183b      	adds	r3, r7, r0
 80044ca:	789a      	ldrb	r2, [r3, #2]
 80044cc:	2110      	movs	r1, #16
 80044ce:	438a      	bics	r2, r1
 80044d0:	709a      	strb	r2, [r3, #2]
	nRF905Config.Fields.PA_PWR = PA_PWR_10PdBm;
 80044d2:	183b      	adds	r3, r7, r0
 80044d4:	789a      	ldrb	r2, [r3, #2]
 80044d6:	210c      	movs	r1, #12
 80044d8:	430a      	orrs	r2, r1
 80044da:	709a      	strb	r2, [r3, #2]
	nRF905Config.Fields.HFREQ_PLL = HFREQ_PLL_433MHz;
 80044dc:	183b      	adds	r3, r7, r0
 80044de:	789a      	ldrb	r2, [r3, #2]
 80044e0:	2102      	movs	r1, #2
 80044e2:	438a      	bics	r2, r1
 80044e4:	709a      	strb	r2, [r3, #2]
	nRF905Config.Fields.CH_NO1 = (uint8_t) ((nRfAt433_2MHz & 0x100) >> 8);
 80044e6:	183b      	adds	r3, r7, r0
 80044e8:	789a      	ldrb	r2, [r3, #2]
 80044ea:	2101      	movs	r1, #1
 80044ec:	438a      	bics	r2, r1
 80044ee:	709a      	strb	r2, [r3, #2]

	nRF905Config.Fields.UNUSED2 = 0;
 80044f0:	183b      	adds	r3, r7, r0
 80044f2:	78da      	ldrb	r2, [r3, #3]
 80044f4:	217f      	movs	r1, #127	; 0x7f
 80044f6:	400a      	ands	r2, r1
 80044f8:	70da      	strb	r2, [r3, #3]
	nRF905Config.Fields.TX_AFW = 4;
 80044fa:	183b      	adds	r3, r7, r0
 80044fc:	78da      	ldrb	r2, [r3, #3]
 80044fe:	2170      	movs	r1, #112	; 0x70
 8004500:	438a      	bics	r2, r1
 8004502:	1c11      	adds	r1, r2, #0
 8004504:	2240      	movs	r2, #64	; 0x40
 8004506:	430a      	orrs	r2, r1
 8004508:	70da      	strb	r2, [r3, #3]

	nRF905Config.Fields.UNUSED3 = 0;
 800450a:	183b      	adds	r3, r7, r0
 800450c:	78da      	ldrb	r2, [r3, #3]
 800450e:	2108      	movs	r1, #8
 8004510:	438a      	bics	r2, r1
 8004512:	70da      	strb	r2, [r3, #3]
	nRF905Config.Fields.RX_AFW = 4;
 8004514:	183b      	adds	r3, r7, r0
 8004516:	78da      	ldrb	r2, [r3, #3]
 8004518:	2107      	movs	r1, #7
 800451a:	438a      	bics	r2, r1
 800451c:	1c11      	adds	r1, r2, #0
 800451e:	2204      	movs	r2, #4
 8004520:	430a      	orrs	r2, r1
 8004522:	70da      	strb	r2, [r3, #3]

	nRF905Config.Fields.UNUSED4 = 0;
 8004524:	183b      	adds	r3, r7, r0
 8004526:	791a      	ldrb	r2, [r3, #4]
 8004528:	213f      	movs	r1, #63	; 0x3f
 800452a:	400a      	ands	r2, r1
 800452c:	711a      	strb	r2, [r3, #4]
	nRF905Config.Fields.RX_PW = 4;
 800452e:	183b      	adds	r3, r7, r0
 8004530:	791a      	ldrb	r2, [r3, #4]
 8004532:	213f      	movs	r1, #63	; 0x3f
 8004534:	438a      	bics	r2, r1
 8004536:	1c11      	adds	r1, r2, #0
 8004538:	2204      	movs	r2, #4
 800453a:	430a      	orrs	r2, r1
 800453c:	711a      	strb	r2, [r3, #4]

	nRF905Config.Fields.UNUSED5 = 0;
 800453e:	183b      	adds	r3, r7, r0
 8004540:	795a      	ldrb	r2, [r3, #5]
 8004542:	213f      	movs	r1, #63	; 0x3f
 8004544:	400a      	ands	r2, r1
 8004546:	715a      	strb	r2, [r3, #5]
	nRF905Config.Fields.TX_PW = 4;
 8004548:	183b      	adds	r3, r7, r0
 800454a:	795a      	ldrb	r2, [r3, #5]
 800454c:	213f      	movs	r1, #63	; 0x3f
 800454e:	438a      	bics	r2, r1
 8004550:	1c11      	adds	r1, r2, #0
 8004552:	2204      	movs	r2, #4
 8004554:	430a      	orrs	r2, r1
 8004556:	715a      	strb	r2, [r3, #5]

	nRF905Config.Fields.RX_ADDRESS0 = 0xFF;
 8004558:	183b      	adds	r3, r7, r0
 800455a:	22ff      	movs	r2, #255	; 0xff
 800455c:	719a      	strb	r2, [r3, #6]
	nRF905Config.Fields.RX_ADDRESS1 = 0xFF;
 800455e:	183b      	adds	r3, r7, r0
 8004560:	22ff      	movs	r2, #255	; 0xff
 8004562:	71da      	strb	r2, [r3, #7]
	nRF905Config.Fields.RX_ADDRESS2 = 0xFF;
 8004564:	183b      	adds	r3, r7, r0
 8004566:	22ff      	movs	r2, #255	; 0xff
 8004568:	721a      	strb	r2, [r3, #8]
	nRF905Config.Fields.RX_ADDRESS3 = 0xFF;
 800456a:	183b      	adds	r3, r7, r0
 800456c:	22ff      	movs	r2, #255	; 0xff
 800456e:	725a      	strb	r2, [r3, #9]

	nRF905Config.Fields.CRC_MODE = CRC_MODE_16BIT;
 8004570:	183b      	adds	r3, r7, r0
 8004572:	7a9a      	ldrb	r2, [r3, #10]
 8004574:	2180      	movs	r1, #128	; 0x80
 8004576:	4249      	negs	r1, r1
 8004578:	430a      	orrs	r2, r1
 800457a:	729a      	strb	r2, [r3, #10]
	nRF905Config.Fields.CRC_ENA = CRC_ENABLE;
 800457c:	183b      	adds	r3, r7, r0
 800457e:	7a9a      	ldrb	r2, [r3, #10]
 8004580:	2140      	movs	r1, #64	; 0x40
 8004582:	430a      	orrs	r2, r1
 8004584:	729a      	strb	r2, [r3, #10]
	nRF905Config.Fields.XOF = XOF_4MHz;
 8004586:	183b      	adds	r3, r7, r0
 8004588:	7a9a      	ldrb	r2, [r3, #10]
 800458a:	2138      	movs	r1, #56	; 0x38
 800458c:	438a      	bics	r2, r1
 800458e:	729a      	strb	r2, [r3, #10]
	nRF905Config.Fields.UP_CLK_ENA = UP_CLK_DIS;
 8004590:	183b      	adds	r3, r7, r0
 8004592:	7a9a      	ldrb	r2, [r3, #10]
 8004594:	2104      	movs	r1, #4
 8004596:	438a      	bics	r2, r1
 8004598:	729a      	strb	r2, [r3, #10]
	nRF905Config.Fields.UP_CLK_FREQ = UP_CLK_FREQ_500kHz;
 800459a:	0004      	movs	r4, r0
 800459c:	183b      	adds	r3, r7, r0
 800459e:	7a9a      	ldrb	r2, [r3, #10]
 80045a0:	2103      	movs	r1, #3
 80045a2:	430a      	orrs	r2, r1
 80045a4:	729a      	strb	r2, [r3, #10]

	HAL_StatusTypeDef ret = HAL_OK;
 80045a6:	231e      	movs	r3, #30
 80045a8:	18fb      	adds	r3, r7, r3
 80045aa:	2200      	movs	r2, #0
 80045ac:	701a      	strb	r2, [r3, #0]

	/* select power down mode */
	Nrf905SetMode(ePowerDownAndProgramingMode);
 80045ae:	2000      	movs	r0, #0
 80045b0:	f7ff fede 	bl	8004370 <Nrf905SetMode>
	HAL_Delay(5);
 80045b4:	2005      	movs	r0, #5
 80045b6:	f7fb fe85 	bl	80002c4 <HAL_Delay>
	Nrf905ResetCs();
 80045ba:	2380      	movs	r3, #128	; 0x80
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	484a      	ldr	r0, [pc, #296]	; (80046e8 <nRf905SetConfig+0x248>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	0019      	movs	r1, r3
 80045c4:	f7fc fd59 	bl	800107a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80045c8:	2005      	movs	r0, #5
 80045ca:	f7fb fe7b 	bl	80002c4 <HAL_Delay>

	/* send a command and configuration packet*/
	if (HAL_SPI_Transmit(&hspi1, nRF905Config.u8v, 11, 1000) != HAL_OK)
 80045ce:	23fa      	movs	r3, #250	; 0xfa
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	1939      	adds	r1, r7, r4
 80045d4:	4845      	ldr	r0, [pc, #276]	; (80046ec <nRf905SetConfig+0x24c>)
 80045d6:	220b      	movs	r2, #11
 80045d8:	f7fd fe74 	bl	80022c4 <HAL_SPI_Transmit>
 80045dc:	1e03      	subs	r3, r0, #0
 80045de:	d003      	beq.n	80045e8 <nRf905SetConfig+0x148>
	{
		ret = HAL_ERROR;
 80045e0:	231e      	movs	r3, #30
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]
	}

	Nrf905SetCs();
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	483e      	ldr	r0, [pc, #248]	; (80046e8 <nRf905SetConfig+0x248>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	0019      	movs	r1, r3
 80045f2:	f7fc fd42 	bl	800107a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80045f6:	2005      	movs	r0, #5
 80045f8:	f7fb fe64 	bl	80002c4 <HAL_Delay>
	Nrf905SetMode(eStandByAndProgramingMode);
 80045fc:	2002      	movs	r0, #2
 80045fe:	f7ff feb7 	bl	8004370 <Nrf905SetMode>
	HAL_Delay(5);
 8004602:	2005      	movs	r0, #5
 8004604:	f7fb fe5e 	bl	80002c4 <HAL_Delay>

	/* test if configuration is successful */
	if (ret == HAL_OK)
 8004608:	231e      	movs	r3, #30
 800460a:	18fb      	adds	r3, r7, r3
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d13d      	bne.n	800468e <nRf905SetConfig+0x1ee>
	{
		/* read info set up */
		nRF905Check.Fields.Command = eReadConfigRegister;
 8004612:	1d3b      	adds	r3, r7, #4
 8004614:	2210      	movs	r2, #16
 8004616:	701a      	strb	r2, [r3, #0]

		Nrf905SetMode(ePowerDownAndProgramingMode);
 8004618:	2000      	movs	r0, #0
 800461a:	f7ff fea9 	bl	8004370 <Nrf905SetMode>
		HAL_Delay(5);
 800461e:	2005      	movs	r0, #5
 8004620:	f7fb fe50 	bl	80002c4 <HAL_Delay>
		Nrf905ResetCs();
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	482f      	ldr	r0, [pc, #188]	; (80046e8 <nRf905SetConfig+0x248>)
 800462a:	2200      	movs	r2, #0
 800462c:	0019      	movs	r1, r3
 800462e:	f7fc fd24 	bl	800107a <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8004632:	2005      	movs	r0, #5
 8004634:	f7fb fe46 	bl	80002c4 <HAL_Delay>

		if (HAL_SPI_Transmit(&hspi1, nRF905Check.u8v, 1, 1000) != HAL_OK)
 8004638:	23fa      	movs	r3, #250	; 0xfa
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	1d39      	adds	r1, r7, #4
 800463e:	482b      	ldr	r0, [pc, #172]	; (80046ec <nRf905SetConfig+0x24c>)
 8004640:	2201      	movs	r2, #1
 8004642:	f7fd fe3f 	bl	80022c4 <HAL_SPI_Transmit>
 8004646:	1e03      	subs	r3, r0, #0
 8004648:	d004      	beq.n	8004654 <nRf905SetConfig+0x1b4>
		{
			ret = HAL_ERROR;
 800464a:	231e      	movs	r3, #30
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	2201      	movs	r2, #1
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	e00c      	b.n	800466e <nRf905SetConfig+0x1ce>
		}

		else if (HAL_SPI_Receive(&hspi1, nRF905Check.u8v, 10, 1000) != HAL_OK)
 8004654:	23fa      	movs	r3, #250	; 0xfa
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	1d39      	adds	r1, r7, #4
 800465a:	4824      	ldr	r0, [pc, #144]	; (80046ec <nRf905SetConfig+0x24c>)
 800465c:	220a      	movs	r2, #10
 800465e:	f7fd ff9b 	bl	8002598 <HAL_SPI_Receive>
 8004662:	1e03      	subs	r3, r0, #0
 8004664:	d003      	beq.n	800466e <nRf905SetConfig+0x1ce>
		{
			ret = HAL_ERROR;
 8004666:	231e      	movs	r3, #30
 8004668:	18fb      	adds	r3, r7, r3
 800466a:	2201      	movs	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
		}

		/* select stand by mode */
		Nrf905SetCs();
 800466e:	2380      	movs	r3, #128	; 0x80
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	481d      	ldr	r0, [pc, #116]	; (80046e8 <nRf905SetConfig+0x248>)
 8004674:	2201      	movs	r2, #1
 8004676:	0019      	movs	r1, r3
 8004678:	f7fc fcff 	bl	800107a <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800467c:	2005      	movs	r0, #5
 800467e:	f7fb fe21 	bl	80002c4 <HAL_Delay>
		Nrf905SetMode(eStandByAndProgramingMode);
 8004682:	2002      	movs	r0, #2
 8004684:	f7ff fe74 	bl	8004370 <Nrf905SetMode>
		HAL_Delay(5);
 8004688:	2005      	movs	r0, #5
 800468a:	f7fb fe1b 	bl	80002c4 <HAL_Delay>
	}
	/* test if read is successful */
	if (ret == HAL_OK)
 800468e:	231e      	movs	r3, #30
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d120      	bne.n	80046da <nRf905SetConfig+0x23a>
	{
		/* test is nRF905 is correct set up */
		for (i = 0; i < 10; i++)
 8004698:	231f      	movs	r3, #31
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	2200      	movs	r2, #0
 800469e:	701a      	strb	r2, [r3, #0]
 80046a0:	e016      	b.n	80046d0 <nRf905SetConfig+0x230>
		{
			if (nRF905Config.Bytes.Check[i] != nRF905Check.u8v[i])
 80046a2:	211f      	movs	r1, #31
 80046a4:	187b      	adds	r3, r7, r1
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2210      	movs	r2, #16
 80046aa:	18ba      	adds	r2, r7, r2
 80046ac:	18d3      	adds	r3, r2, r3
 80046ae:	785a      	ldrb	r2, [r3, #1]
 80046b0:	187b      	adds	r3, r7, r1
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	1d39      	adds	r1, r7, #4
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d003      	beq.n	80046c4 <nRf905SetConfig+0x224>
			{
				ret = HAL_ERROR;
 80046bc:	231e      	movs	r3, #30
 80046be:	18fb      	adds	r3, r7, r3
 80046c0:	2201      	movs	r2, #1
 80046c2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 10; i++)
 80046c4:	211f      	movs	r1, #31
 80046c6:	187b      	adds	r3, r7, r1
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	187b      	adds	r3, r7, r1
 80046cc:	3201      	adds	r2, #1
 80046ce:	701a      	strb	r2, [r3, #0]
 80046d0:	231f      	movs	r3, #31
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b09      	cmp	r3, #9
 80046d8:	d9e3      	bls.n	80046a2 <nRf905SetConfig+0x202>
			}
		}
	}
	return (ret);
 80046da:	231e      	movs	r3, #30
 80046dc:	18fb      	adds	r3, r7, r3
 80046de:	781b      	ldrb	r3, [r3, #0]
}
 80046e0:	0018      	movs	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b009      	add	sp, #36	; 0x24
 80046e6:	bd90      	pop	{r4, r7, pc}
 80046e8:	48000c00 	.word	0x48000c00
 80046ec:	2000021c 	.word	0x2000021c

080046f0 <nRf905SetTxAddr>:
 *
 * @param  nRf905Address			A 32 bit address
 * @return RetValue 				A status error
 */
HAL_StatusTypeDef nRf905SetTxAddr(uint32_t nRf905Address)
{
 80046f0:	b590      	push	{r4, r7, lr}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	nRF905Address_t nRF905Buffer;

	HAL_StatusTypeDef ret = HAL_OK;
 80046f8:	2317      	movs	r3, #23
 80046fa:	18fb      	adds	r3, r7, r3
 80046fc:	2200      	movs	r2, #0
 80046fe:	701a      	strb	r2, [r3, #0]

	/* tx address write mode */
	nRF905Buffer.Command = eWriteTxAddressRegister;
 8004700:	240c      	movs	r4, #12
 8004702:	193b      	adds	r3, r7, r4
 8004704:	2222      	movs	r2, #34	; 0x22
 8004706:	701a      	strb	r2, [r3, #0]
	nRF905Buffer.Address.u32v = nRf905Address;
 8004708:	193b      	adds	r3, r7, r4
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	605a      	str	r2, [r3, #4]

	/* select stand by mode */
	Nrf905SetMode(eStandByAndProgramingMode);
 800470e:	2002      	movs	r0, #2
 8004710:	f7ff fe2e 	bl	8004370 <Nrf905SetMode>
	HAL_Delay(5);
 8004714:	2005      	movs	r0, #5
 8004716:	f7fb fdd5 	bl	80002c4 <HAL_Delay>
	Nrf905ResetCs();
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	481c      	ldr	r0, [pc, #112]	; (8004790 <nRf905SetTxAddr+0xa0>)
 8004720:	2200      	movs	r2, #0
 8004722:	0019      	movs	r1, r3
 8004724:	f7fc fca9 	bl	800107a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8004728:	2005      	movs	r0, #5
 800472a:	f7fb fdcb 	bl	80002c4 <HAL_Delay>

	/* write a address */
	if (HAL_SPI_Transmit(&hspi1, nRF905Buffer.u8v, 1, 1000) != HAL_OK)
 800472e:	23fa      	movs	r3, #250	; 0xfa
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	1939      	adds	r1, r7, r4
 8004734:	4817      	ldr	r0, [pc, #92]	; (8004794 <nRf905SetTxAddr+0xa4>)
 8004736:	2201      	movs	r2, #1
 8004738:	f7fd fdc4 	bl	80022c4 <HAL_SPI_Transmit>
 800473c:	1e03      	subs	r3, r0, #0
 800473e:	d003      	beq.n	8004748 <nRf905SetTxAddr+0x58>
	{
		ret = HAL_ERROR;
 8004740:	2317      	movs	r3, #23
 8004742:	18fb      	adds	r3, r7, r3
 8004744:	2201      	movs	r2, #1
 8004746:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_SPI_Transmit(&hspi1, nRF905Buffer.Address.u8v, 4, 1000) != HAL_OK)
 8004748:	23fa      	movs	r3, #250	; 0xfa
 800474a:	009a      	lsls	r2, r3, #2
 800474c:	230c      	movs	r3, #12
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	1d19      	adds	r1, r3, #4
 8004752:	4810      	ldr	r0, [pc, #64]	; (8004794 <nRf905SetTxAddr+0xa4>)
 8004754:	0013      	movs	r3, r2
 8004756:	2204      	movs	r2, #4
 8004758:	f7fd fdb4 	bl	80022c4 <HAL_SPI_Transmit>
 800475c:	1e03      	subs	r3, r0, #0
 800475e:	d003      	beq.n	8004768 <nRf905SetTxAddr+0x78>
	{
		ret = HAL_ERROR;
 8004760:	2317      	movs	r3, #23
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	2201      	movs	r2, #1
 8004766:	701a      	strb	r2, [r3, #0]
	}

	/* select stand by mode */
	Nrf905SetMode(eStandByAndProgramingMode);
 8004768:	2002      	movs	r0, #2
 800476a:	f7ff fe01 	bl	8004370 <Nrf905SetMode>
	HAL_Delay(5);
 800476e:	2005      	movs	r0, #5
 8004770:	f7fb fda8 	bl	80002c4 <HAL_Delay>
	Nrf905SetCs();
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	4805      	ldr	r0, [pc, #20]	; (8004790 <nRf905SetTxAddr+0xa0>)
 800477a:	2201      	movs	r2, #1
 800477c:	0019      	movs	r1, r3
 800477e:	f7fc fc7c 	bl	800107a <HAL_GPIO_WritePin>
	return (ret);
 8004782:	2317      	movs	r3, #23
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	781b      	ldrb	r3, [r3, #0]
}
 8004788:	0018      	movs	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	b007      	add	sp, #28
 800478e:	bd90      	pop	{r4, r7, pc}
 8004790:	48000c00 	.word	0x48000c00
 8004794:	2000021c 	.word	0x2000021c

08004798 <nRf905SetRxAddr>:
 *
 * @param  nRf905Address			A 32 bit address
 * @return RetValue 				A status error
 */
HAL_StatusTypeDef nRf905SetRxAddr(uint32_t nRf905Address)
{
 8004798:	b590      	push	{r4, r7, lr}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	nRF905Address_t nRF905Buffer;

	HAL_StatusTypeDef ret = HAL_OK;
 80047a0:	2317      	movs	r3, #23
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	2200      	movs	r2, #0
 80047a6:	701a      	strb	r2, [r3, #0]

	/* rx address write mode */
	nRF905Buffer.Command = eWriteConfigRegister5;
 80047a8:	240c      	movs	r4, #12
 80047aa:	193b      	adds	r3, r7, r4
 80047ac:	2205      	movs	r2, #5
 80047ae:	701a      	strb	r2, [r3, #0]
	nRF905Buffer.Address.u32v = nRf905Address;
 80047b0:	193b      	adds	r3, r7, r4
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	605a      	str	r2, [r3, #4]

	/* select stand by mode */
	Nrf905SetMode(eStandByAndProgramingMode);
 80047b6:	2002      	movs	r0, #2
 80047b8:	f7ff fdda 	bl	8004370 <Nrf905SetMode>
	HAL_Delay(5);
 80047bc:	2005      	movs	r0, #5
 80047be:	f7fb fd81 	bl	80002c4 <HAL_Delay>
	Nrf905ResetCs();
 80047c2:	2380      	movs	r3, #128	; 0x80
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	481c      	ldr	r0, [pc, #112]	; (8004838 <nRf905SetRxAddr+0xa0>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	0019      	movs	r1, r3
 80047cc:	f7fc fc55 	bl	800107a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80047d0:	2005      	movs	r0, #5
 80047d2:	f7fb fd77 	bl	80002c4 <HAL_Delay>

	/* write a address */
	if (HAL_SPI_Transmit(&hspi1, nRF905Buffer.u8v, 1, 1000) != HAL_OK)
 80047d6:	23fa      	movs	r3, #250	; 0xfa
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	1939      	adds	r1, r7, r4
 80047dc:	4817      	ldr	r0, [pc, #92]	; (800483c <nRf905SetRxAddr+0xa4>)
 80047de:	2201      	movs	r2, #1
 80047e0:	f7fd fd70 	bl	80022c4 <HAL_SPI_Transmit>
 80047e4:	1e03      	subs	r3, r0, #0
 80047e6:	d003      	beq.n	80047f0 <nRf905SetRxAddr+0x58>
	{
		ret = HAL_ERROR;
 80047e8:	2317      	movs	r3, #23
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_SPI_Transmit(&hspi1, nRF905Buffer.Address.u8v, 4, 1000) != HAL_OK)
 80047f0:	23fa      	movs	r3, #250	; 0xfa
 80047f2:	009a      	lsls	r2, r3, #2
 80047f4:	230c      	movs	r3, #12
 80047f6:	18fb      	adds	r3, r7, r3
 80047f8:	1d19      	adds	r1, r3, #4
 80047fa:	4810      	ldr	r0, [pc, #64]	; (800483c <nRf905SetRxAddr+0xa4>)
 80047fc:	0013      	movs	r3, r2
 80047fe:	2204      	movs	r2, #4
 8004800:	f7fd fd60 	bl	80022c4 <HAL_SPI_Transmit>
 8004804:	1e03      	subs	r3, r0, #0
 8004806:	d003      	beq.n	8004810 <nRf905SetRxAddr+0x78>
	{
		ret = HAL_ERROR;
 8004808:	2317      	movs	r3, #23
 800480a:	18fb      	adds	r3, r7, r3
 800480c:	2201      	movs	r2, #1
 800480e:	701a      	strb	r2, [r3, #0]
	}

	/* select stand by mode */
	Nrf905SetMode(eStandByAndProgramingMode);
 8004810:	2002      	movs	r0, #2
 8004812:	f7ff fdad 	bl	8004370 <Nrf905SetMode>
	HAL_Delay(5);
 8004816:	2005      	movs	r0, #5
 8004818:	f7fb fd54 	bl	80002c4 <HAL_Delay>
	Nrf905SetCs();
 800481c:	2380      	movs	r3, #128	; 0x80
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	4805      	ldr	r0, [pc, #20]	; (8004838 <nRf905SetRxAddr+0xa0>)
 8004822:	2201      	movs	r2, #1
 8004824:	0019      	movs	r1, r3
 8004826:	f7fc fc28 	bl	800107a <HAL_GPIO_WritePin>
	return (ret);
 800482a:	2317      	movs	r3, #23
 800482c:	18fb      	adds	r3, r7, r3
 800482e:	781b      	ldrb	r3, [r3, #0]
}
 8004830:	0018      	movs	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	b007      	add	sp, #28
 8004836:	bd90      	pop	{r4, r7, pc}
 8004838:	48000c00 	.word	0x48000c00
 800483c:	2000021c 	.word	0x2000021c

08004840 <nRf905SendPacket>:
 * @param  aSpiBuffer				A pointer to vector to tx
 * @param  Size						A size of a vector
 * @return RetValue 				A status error
 */
HAL_StatusTypeDef nRf905SendPacket(uint8_t* aSpiBuffer, uint8_t Size)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08c      	sub	sp, #48	; 0x30
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	000a      	movs	r2, r1
 800484a:	1cfb      	adds	r3, r7, #3
 800484c:	701a      	strb	r2, [r3, #0]
	nRF905Payload_t nRF905buffer;

	HAL_StatusTypeDef ret = HAL_OK;
 800484e:	232f      	movs	r3, #47	; 0x2f
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	2200      	movs	r2, #0
 8004854:	701a      	strb	r2, [r3, #0]

	uint8_t i;

	if (Size > 32)
 8004856:	1cfb      	adds	r3, r7, #3
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b20      	cmp	r3, #32
 800485c:	d901      	bls.n	8004862 <nRf905SendPacket+0x22>
	{
		return (HAL_ERROR);
 800485e:	2301      	movs	r3, #1
 8004860:	e07e      	b.n	8004960 <nRf905SendPacket+0x120>
	}

	/* load the tx buffer */
	nRF905buffer.Payload.Command = eWriteTxPayloadRegister;
 8004862:	230c      	movs	r3, #12
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	2220      	movs	r2, #32
 8004868:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < Size; i++)
 800486a:	232e      	movs	r3, #46	; 0x2e
 800486c:	18fb      	adds	r3, r7, r3
 800486e:	2200      	movs	r2, #0
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	e010      	b.n	8004896 <nRf905SendPacket+0x56>
	{
		nRF905buffer.Payload.Data[i] = *aSpiBuffer++;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	607a      	str	r2, [r7, #4]
 800487a:	202e      	movs	r0, #46	; 0x2e
 800487c:	183a      	adds	r2, r7, r0
 800487e:	7812      	ldrb	r2, [r2, #0]
 8004880:	7819      	ldrb	r1, [r3, #0]
 8004882:	230c      	movs	r3, #12
 8004884:	18fb      	adds	r3, r7, r3
 8004886:	189b      	adds	r3, r3, r2
 8004888:	1c0a      	adds	r2, r1, #0
 800488a:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < Size; i++)
 800488c:	183b      	adds	r3, r7, r0
 800488e:	781a      	ldrb	r2, [r3, #0]
 8004890:	183b      	adds	r3, r7, r0
 8004892:	3201      	adds	r2, #1
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	232e      	movs	r3, #46	; 0x2e
 8004898:	18fa      	adds	r2, r7, r3
 800489a:	1cfb      	adds	r3, r7, #3
 800489c:	7812      	ldrb	r2, [r2, #0]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d3e7      	bcc.n	8004874 <nRf905SendPacket+0x34>
	}

	/* select stand by mode */
	Nrf905SetCs();
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	482f      	ldr	r0, [pc, #188]	; (8004968 <nRf905SendPacket+0x128>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	0019      	movs	r1, r3
 80048ae:	f7fc fbe4 	bl	800107a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80048b2:	2005      	movs	r0, #5
 80048b4:	f7fb fd06 	bl	80002c4 <HAL_Delay>
	Nrf905SetMode(eStandByAndProgramingMode);
 80048b8:	2002      	movs	r0, #2
 80048ba:	f7ff fd59 	bl	8004370 <Nrf905SetMode>
	HAL_Delay(5);
 80048be:	2005      	movs	r0, #5
 80048c0:	f7fb fd00 	bl	80002c4 <HAL_Delay>
	Nrf905ResetCs();
 80048c4:	2380      	movs	r3, #128	; 0x80
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	4827      	ldr	r0, [pc, #156]	; (8004968 <nRf905SendPacket+0x128>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	0019      	movs	r1, r3
 80048ce:	f7fc fbd4 	bl	800107a <HAL_GPIO_WritePin>

	/* load the nRF905 payload */
	if (HAL_SPI_Transmit(&hspi1, nRF905buffer.u8v, (Size + 1), 1000) != HAL_OK)
 80048d2:	1cfb      	adds	r3, r7, #3
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3301      	adds	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	23fa      	movs	r3, #250	; 0xfa
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	210c      	movs	r1, #12
 80048e2:	1879      	adds	r1, r7, r1
 80048e4:	4821      	ldr	r0, [pc, #132]	; (800496c <nRf905SendPacket+0x12c>)
 80048e6:	f7fd fced 	bl	80022c4 <HAL_SPI_Transmit>
 80048ea:	1e03      	subs	r3, r0, #0
 80048ec:	d003      	beq.n	80048f6 <nRf905SendPacket+0xb6>
	{
		ret = HAL_ERROR;
 80048ee:	232f      	movs	r3, #47	; 0x2f
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	2201      	movs	r2, #1
 80048f4:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(5);
 80048f6:	2005      	movs	r0, #5
 80048f8:	f7fb fce4 	bl	80002c4 <HAL_Delay>
	Nrf905SetCs();
 80048fc:	2380      	movs	r3, #128	; 0x80
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	4819      	ldr	r0, [pc, #100]	; (8004968 <nRf905SendPacket+0x128>)
 8004902:	2201      	movs	r2, #1
 8004904:	0019      	movs	r1, r3
 8004906:	f7fc fbb8 	bl	800107a <HAL_GPIO_WritePin>
	/* wait the RF  */
	while (Nrf905GetCd() == 1)
 800490a:	e00d      	b.n	8004928 <nRf905SendPacket+0xe8>
	{
		HAL_Delay(rand() % 8);
 800490c:	f001 fc5c 	bl	80061c8 <rand>
 8004910:	0002      	movs	r2, r0
 8004912:	4b17      	ldr	r3, [pc, #92]	; (8004970 <nRf905SendPacket+0x130>)
 8004914:	4013      	ands	r3, r2
 8004916:	d504      	bpl.n	8004922 <nRf905SendPacket+0xe2>
 8004918:	3b01      	subs	r3, #1
 800491a:	2208      	movs	r2, #8
 800491c:	4252      	negs	r2, r2
 800491e:	4313      	orrs	r3, r2
 8004920:	3301      	adds	r3, #1
 8004922:	0018      	movs	r0, r3
 8004924:	f7fb fcce 	bl	80002c4 <HAL_Delay>
	while (Nrf905GetCd() == 1)
 8004928:	4b0f      	ldr	r3, [pc, #60]	; (8004968 <nRf905SendPacket+0x128>)
 800492a:	2140      	movs	r1, #64	; 0x40
 800492c:	0018      	movs	r0, r3
 800492e:	f7fc fb87 	bl	8001040 <HAL_GPIO_ReadPin>
 8004932:	0003      	movs	r3, r0
 8004934:	2b01      	cmp	r3, #1
 8004936:	d0e9      	beq.n	800490c <nRf905SendPacket+0xcc>
	}

	Nrf905SetMode(eTrasmitShockBurstMode);
 8004938:	2004      	movs	r0, #4
 800493a:	f7ff fd19 	bl	8004370 <Nrf905SetMode>

	//HAL_Delay(100);

	/* wait the RF transfer */
	while (Nrf905GetDr() == 0)
 800493e:	e002      	b.n	8004946 <nRf905SendPacket+0x106>
	{
		HAL_Delay(5);
 8004940:	2005      	movs	r0, #5
 8004942:	f7fb fcbf 	bl	80002c4 <HAL_Delay>
	while (Nrf905GetDr() == 0)
 8004946:	4b08      	ldr	r3, [pc, #32]	; (8004968 <nRf905SendPacket+0x128>)
 8004948:	2180      	movs	r1, #128	; 0x80
 800494a:	0018      	movs	r0, r3
 800494c:	f7fc fb78 	bl	8001040 <HAL_GPIO_ReadPin>
 8004950:	1e03      	subs	r3, r0, #0
 8004952:	d0f5      	beq.n	8004940 <nRf905SendPacket+0x100>
	}

	Nrf905SetMode(eReadDataFromRxMode);
 8004954:	2001      	movs	r0, #1
 8004956:	f7ff fd0b 	bl	8004370 <Nrf905SetMode>

	return (ret);
 800495a:	232f      	movs	r3, #47	; 0x2f
 800495c:	18fb      	adds	r3, r7, r3
 800495e:	781b      	ldrb	r3, [r3, #0]
}
 8004960:	0018      	movs	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	b00c      	add	sp, #48	; 0x30
 8004966:	bd80      	pop	{r7, pc}
 8004968:	48000c00 	.word	0x48000c00
 800496c:	2000021c 	.word	0x2000021c
 8004970:	80000007 	.word	0x80000007

08004974 <nRf905ReceivePacket>:
 * @param  aSpiBuffer				A pointer to vector to rx
 * @param  Size						A size of a vector
 * @return RetValue 				A status error
 */
HAL_StatusTypeDef nRf905ReceivePacket(uint8_t* aSpiBuffer, uint8_t Size)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08c      	sub	sp, #48	; 0x30
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	000a      	movs	r2, r1
 800497e:	1cfb      	adds	r3, r7, #3
 8004980:	701a      	strb	r2, [r3, #0]

	nRF905Payload_t nRF905buffer;
	HAL_StatusTypeDef ret = HAL_OK;
 8004982:	232f      	movs	r3, #47	; 0x2f
 8004984:	18fb      	adds	r3, r7, r3
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]

	uint8_t i;


	if (Size > 32)
 800498a:	1cfb      	adds	r3, r7, #3
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b20      	cmp	r3, #32
 8004990:	d901      	bls.n	8004996 <nRf905ReceivePacket+0x22>
	{
		return (HAL_ERROR);
 8004992:	2301      	movs	r3, #1
 8004994:	e067      	b.n	8004a66 <nRf905ReceivePacket+0xf2>
	}

	/* read a rx payload */
	Nrf905SetMode(eReceiveShockBurstMode);
 8004996:	2003      	movs	r0, #3
 8004998:	f7ff fcea 	bl	8004370 <Nrf905SetMode>
	HAL_Delay(5);
 800499c:	2005      	movs	r0, #5
 800499e:	f7fb fc91 	bl	80002c4 <HAL_Delay>
	Nrf905ResetCs();
 80049a2:	2380      	movs	r3, #128	; 0x80
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	4832      	ldr	r0, [pc, #200]	; (8004a70 <nRf905ReceivePacket+0xfc>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	0019      	movs	r1, r3
 80049ac:	f7fc fb65 	bl	800107a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80049b0:	2005      	movs	r0, #5
 80049b2:	f7fb fc87 	bl	80002c4 <HAL_Delay>

	nRF905buffer.Payload.Command = eReadRxPayloadRegister;
 80049b6:	210c      	movs	r1, #12
 80049b8:	187b      	adds	r3, r7, r1
 80049ba:	2224      	movs	r2, #36	; 0x24
 80049bc:	701a      	strb	r2, [r3, #0]



	if (HAL_SPI_Transmit(&hspi1, nRF905buffer.u8v, 1, 1000) != HAL_OK)
 80049be:	23fa      	movs	r3, #250	; 0xfa
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	1879      	adds	r1, r7, r1
 80049c4:	482b      	ldr	r0, [pc, #172]	; (8004a74 <nRf905ReceivePacket+0x100>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	f7fd fc7c 	bl	80022c4 <HAL_SPI_Transmit>
 80049cc:	1e03      	subs	r3, r0, #0
 80049ce:	d004      	beq.n	80049da <nRf905ReceivePacket+0x66>
	{
		ret = HAL_ERROR;
 80049d0:	232f      	movs	r3, #47	; 0x2f
 80049d2:	18fb      	adds	r3, r7, r3
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	e013      	b.n	8004a02 <nRf905ReceivePacket+0x8e>
	}

	/* get a payload */
	else if (HAL_SPI_Receive(&hspi1, nRF905buffer.u8v, Size, 1000) != HAL_OK)
 80049da:	1cfb      	adds	r3, r7, #3
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	b29a      	uxth	r2, r3
 80049e0:	23fa      	movs	r3, #250	; 0xfa
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	210c      	movs	r1, #12
 80049e6:	1879      	adds	r1, r7, r1
 80049e8:	4822      	ldr	r0, [pc, #136]	; (8004a74 <nRf905ReceivePacket+0x100>)
 80049ea:	f7fd fdd5 	bl	8002598 <HAL_SPI_Receive>
 80049ee:	1e03      	subs	r3, r0, #0
 80049f0:	d007      	beq.n	8004a02 <nRf905ReceivePacket+0x8e>
	{
		ret = HAL_ERROR;
 80049f2:	232f      	movs	r3, #47	; 0x2f
 80049f4:	18fb      	adds	r3, r7, r3
 80049f6:	2201      	movs	r2, #1
 80049f8:	701a      	strb	r2, [r3, #0]
	}

	while (Nrf905GetDr() == 0)
 80049fa:	e002      	b.n	8004a02 <nRf905ReceivePacket+0x8e>
	{
		HAL_Delay(5);
 80049fc:	2005      	movs	r0, #5
 80049fe:	f7fb fc61 	bl	80002c4 <HAL_Delay>
	while (Nrf905GetDr() == 0)
 8004a02:	4b1b      	ldr	r3, [pc, #108]	; (8004a70 <nRf905ReceivePacket+0xfc>)
 8004a04:	2180      	movs	r1, #128	; 0x80
 8004a06:	0018      	movs	r0, r3
 8004a08:	f7fc fb1a 	bl	8001040 <HAL_GPIO_ReadPin>
 8004a0c:	1e03      	subs	r3, r0, #0
 8004a0e:	d0f5      	beq.n	80049fc <nRf905ReceivePacket+0x88>
	}

	Nrf905SetMode(eStandByAndProgramingMode);//(eReadDataFromRxMode);//
 8004a10:	2002      	movs	r0, #2
 8004a12:	f7ff fcad 	bl	8004370 <Nrf905SetMode>
	HAL_Delay(5);
 8004a16:	2005      	movs	r0, #5
 8004a18:	f7fb fc54 	bl	80002c4 <HAL_Delay>
	Nrf905SetCs();
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4813      	ldr	r0, [pc, #76]	; (8004a70 <nRf905ReceivePacket+0xfc>)
 8004a22:	2201      	movs	r2, #1
 8004a24:	0019      	movs	r1, r3
 8004a26:	f7fc fb28 	bl	800107a <HAL_GPIO_WritePin>

	/* transfer do buffer output */
	for (i = 0; i < Size; i++)
 8004a2a:	232e      	movs	r3, #46	; 0x2e
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	2200      	movs	r2, #0
 8004a30:	701a      	strb	r2, [r3, #0]
 8004a32:	e00e      	b.n	8004a52 <nRf905ReceivePacket+0xde>
	{
		*aSpiBuffer++ = nRF905buffer.u8v[i];
 8004a34:	202e      	movs	r0, #46	; 0x2e
 8004a36:	183b      	adds	r3, r7, r0
 8004a38:	781a      	ldrb	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	1c59      	adds	r1, r3, #1
 8004a3e:	6079      	str	r1, [r7, #4]
 8004a40:	210c      	movs	r1, #12
 8004a42:	1879      	adds	r1, r7, r1
 8004a44:	5c8a      	ldrb	r2, [r1, r2]
 8004a46:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < Size; i++)
 8004a48:	183b      	adds	r3, r7, r0
 8004a4a:	781a      	ldrb	r2, [r3, #0]
 8004a4c:	183b      	adds	r3, r7, r0
 8004a4e:	3201      	adds	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	232e      	movs	r3, #46	; 0x2e
 8004a54:	18fa      	adds	r2, r7, r3
 8004a56:	1cfb      	adds	r3, r7, #3
 8004a58:	7812      	ldrb	r2, [r2, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d3e9      	bcc.n	8004a34 <nRf905ReceivePacket+0xc0>
	}

	return (ret);
 8004a60:	232f      	movs	r3, #47	; 0x2f
 8004a62:	18fb      	adds	r3, r7, r3
 8004a64:	781b      	ldrb	r3, [r3, #0]
}
 8004a66:	0018      	movs	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b00c      	add	sp, #48	; 0x30
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	48000c00 	.word	0x48000c00
 8004a74:	2000021c 	.word	0x2000021c

08004a78 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8004a7e:	1d3b      	adds	r3, r7, #4
 8004a80:	0018      	movs	r0, r3
 8004a82:	230c      	movs	r3, #12
 8004a84:	001a      	movs	r2, r3
 8004a86:	2100      	movs	r1, #0
 8004a88:	f001 fb96 	bl	80061b8 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8004a8c:	4b59      	ldr	r3, [pc, #356]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004a8e:	4a5a      	ldr	r2, [pc, #360]	; (8004bf8 <MX_ADC_Init+0x180>)
 8004a90:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004a92:	4b58      	ldr	r3, [pc, #352]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004a94:	2280      	movs	r2, #128	; 0x80
 8004a96:	0612      	lsls	r2, r2, #24
 8004a98:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004a9a:	4b56      	ldr	r3, [pc, #344]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004aa0:	4b54      	ldr	r3, [pc, #336]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004aa6:	4b53      	ldr	r3, [pc, #332]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004aac:	4b51      	ldr	r3, [pc, #324]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004aae:	2208      	movs	r2, #8
 8004ab0:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004ab2:	4b50      	ldr	r3, [pc, #320]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004ab8:	4b4e      	ldr	r3, [pc, #312]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	61da      	str	r2, [r3, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 8004abe:	4b4d      	ldr	r3, [pc, #308]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004ac4:	4b4b      	ldr	r3, [pc, #300]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004aca:	4b4a      	ldr	r3, [pc, #296]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004acc:	22c2      	movs	r2, #194	; 0xc2
 8004ace:	32ff      	adds	r2, #255	; 0xff
 8004ad0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004ad2:	4b48      	ldr	r3, [pc, #288]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 8004ad8:	4b46      	ldr	r3, [pc, #280]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004ade:	4b45      	ldr	r3, [pc, #276]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004ae4:	4b43      	ldr	r3, [pc, #268]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f7fb fc0a 	bl	8000300 <HAL_ADC_Init>
 8004aec:	1e03      	subs	r3, r0, #0
 8004aee:	d001      	beq.n	8004af4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8004af0:	f000 fd14 	bl	800551c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004af4:	1d3b      	adds	r3, r7, #4
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004afa:	1d3b      	adds	r3, r7, #4
 8004afc:	2280      	movs	r2, #128	; 0x80
 8004afe:	0152      	lsls	r2, r2, #5
 8004b00:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8004b02:	1d3b      	adds	r3, r7, #4
 8004b04:	2203      	movs	r2, #3
 8004b06:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004b08:	1d3a      	adds	r2, r7, #4
 8004b0a:	4b3a      	ldr	r3, [pc, #232]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004b0c:	0011      	movs	r1, r2
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f7fb fd34 	bl	800057c <HAL_ADC_ConfigChannel>
 8004b14:	1e03      	subs	r3, r0, #0
 8004b16:	d001      	beq.n	8004b1c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8004b18:	f000 fd00 	bl	800551c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004b1c:	1d3b      	adds	r3, r7, #4
 8004b1e:	2201      	movs	r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004b22:	1d3a      	adds	r2, r7, #4
 8004b24:	4b33      	ldr	r3, [pc, #204]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004b26:	0011      	movs	r1, r2
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f7fb fd27 	bl	800057c <HAL_ADC_ConfigChannel>
 8004b2e:	1e03      	subs	r3, r0, #0
 8004b30:	d001      	beq.n	8004b36 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8004b32:	f000 fcf3 	bl	800551c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004b36:	1d3b      	adds	r3, r7, #4
 8004b38:	2202      	movs	r2, #2
 8004b3a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004b3c:	1d3a      	adds	r2, r7, #4
 8004b3e:	4b2d      	ldr	r3, [pc, #180]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004b40:	0011      	movs	r1, r2
 8004b42:	0018      	movs	r0, r3
 8004b44:	f7fb fd1a 	bl	800057c <HAL_ADC_ConfigChannel>
 8004b48:	1e03      	subs	r3, r0, #0
 8004b4a:	d001      	beq.n	8004b50 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8004b4c:	f000 fce6 	bl	800551c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004b50:	1d3b      	adds	r3, r7, #4
 8004b52:	2203      	movs	r2, #3
 8004b54:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004b56:	1d3a      	adds	r2, r7, #4
 8004b58:	4b26      	ldr	r3, [pc, #152]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004b5a:	0011      	movs	r1, r2
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f7fb fd0d 	bl	800057c <HAL_ADC_ConfigChannel>
 8004b62:	1e03      	subs	r3, r0, #0
 8004b64:	d001      	beq.n	8004b6a <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8004b66:	f000 fcd9 	bl	800551c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004b6a:	1d3b      	adds	r3, r7, #4
 8004b6c:	2204      	movs	r2, #4
 8004b6e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004b70:	1d3a      	adds	r2, r7, #4
 8004b72:	4b20      	ldr	r3, [pc, #128]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004b74:	0011      	movs	r1, r2
 8004b76:	0018      	movs	r0, r3
 8004b78:	f7fb fd00 	bl	800057c <HAL_ADC_ConfigChannel>
 8004b7c:	1e03      	subs	r3, r0, #0
 8004b7e:	d001      	beq.n	8004b84 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8004b80:	f000 fccc 	bl	800551c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004b84:	1d3b      	adds	r3, r7, #4
 8004b86:	2205      	movs	r2, #5
 8004b88:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004b8a:	1d3a      	adds	r2, r7, #4
 8004b8c:	4b19      	ldr	r3, [pc, #100]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004b8e:	0011      	movs	r1, r2
 8004b90:	0018      	movs	r0, r3
 8004b92:	f7fb fcf3 	bl	800057c <HAL_ADC_ConfigChannel>
 8004b96:	1e03      	subs	r3, r0, #0
 8004b98:	d001      	beq.n	8004b9e <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8004b9a:	f000 fcbf 	bl	800551c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004b9e:	1d3b      	adds	r3, r7, #4
 8004ba0:	2206      	movs	r2, #6
 8004ba2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004ba4:	1d3a      	adds	r2, r7, #4
 8004ba6:	4b13      	ldr	r3, [pc, #76]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004ba8:	0011      	movs	r1, r2
 8004baa:	0018      	movs	r0, r3
 8004bac:	f7fb fce6 	bl	800057c <HAL_ADC_ConfigChannel>
 8004bb0:	1e03      	subs	r3, r0, #0
 8004bb2:	d001      	beq.n	8004bb8 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8004bb4:	f000 fcb2 	bl	800551c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004bb8:	1d3b      	adds	r3, r7, #4
 8004bba:	2207      	movs	r2, #7
 8004bbc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004bbe:	1d3a      	adds	r2, r7, #4
 8004bc0:	4b0c      	ldr	r3, [pc, #48]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004bc2:	0011      	movs	r1, r2
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f7fb fcd9 	bl	800057c <HAL_ADC_ConfigChannel>
 8004bca:	1e03      	subs	r3, r0, #0
 8004bcc:	d001      	beq.n	8004bd2 <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 8004bce:	f000 fca5 	bl	800551c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004bd2:	1d3b      	adds	r3, r7, #4
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004bd8:	1d3a      	adds	r2, r7, #4
 8004bda:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <MX_ADC_Init+0x17c>)
 8004bdc:	0011      	movs	r1, r2
 8004bde:	0018      	movs	r0, r3
 8004be0:	f7fb fccc 	bl	800057c <HAL_ADC_ConfigChannel>
 8004be4:	1e03      	subs	r3, r0, #0
 8004be6:	d001      	beq.n	8004bec <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8004be8:	f000 fc98 	bl	800551c <Error_Handler>
  }

}
 8004bec:	46c0      	nop			; (mov r8, r8)
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b004      	add	sp, #16
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	200000d8 	.word	0x200000d8
 8004bf8:	40012400 	.word	0x40012400

08004bfc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004bfc:	b590      	push	{r4, r7, lr}
 8004bfe:	b08b      	sub	sp, #44	; 0x2c
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c04:	2314      	movs	r3, #20
 8004c06:	18fb      	adds	r3, r7, r3
 8004c08:	0018      	movs	r0, r3
 8004c0a:	2314      	movs	r3, #20
 8004c0c:	001a      	movs	r2, r3
 8004c0e:	2100      	movs	r1, #0
 8004c10:	f001 fad2 	bl	80061b8 <memset>
  if(adcHandle->Instance==ADC1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a45      	ldr	r2, [pc, #276]	; (8004d30 <HAL_ADC_MspInit+0x134>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d000      	beq.n	8004c20 <HAL_ADC_MspInit+0x24>
 8004c1e:	e082      	b.n	8004d26 <HAL_ADC_MspInit+0x12a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004c20:	4b44      	ldr	r3, [pc, #272]	; (8004d34 <HAL_ADC_MspInit+0x138>)
 8004c22:	699a      	ldr	r2, [r3, #24]
 8004c24:	4b43      	ldr	r3, [pc, #268]	; (8004d34 <HAL_ADC_MspInit+0x138>)
 8004c26:	2180      	movs	r1, #128	; 0x80
 8004c28:	0089      	lsls	r1, r1, #2
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	619a      	str	r2, [r3, #24]
 8004c2e:	4b41      	ldr	r3, [pc, #260]	; (8004d34 <HAL_ADC_MspInit+0x138>)
 8004c30:	699a      	ldr	r2, [r3, #24]
 8004c32:	2380      	movs	r3, #128	; 0x80
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4013      	ands	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c3c:	4b3d      	ldr	r3, [pc, #244]	; (8004d34 <HAL_ADC_MspInit+0x138>)
 8004c3e:	695a      	ldr	r2, [r3, #20]
 8004c40:	4b3c      	ldr	r3, [pc, #240]	; (8004d34 <HAL_ADC_MspInit+0x138>)
 8004c42:	2180      	movs	r1, #128	; 0x80
 8004c44:	0289      	lsls	r1, r1, #10
 8004c46:	430a      	orrs	r2, r1
 8004c48:	615a      	str	r2, [r3, #20]
 8004c4a:	4b3a      	ldr	r3, [pc, #232]	; (8004d34 <HAL_ADC_MspInit+0x138>)
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	029b      	lsls	r3, r3, #10
 8004c52:	4013      	ands	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c58:	4b36      	ldr	r3, [pc, #216]	; (8004d34 <HAL_ADC_MspInit+0x138>)
 8004c5a:	695a      	ldr	r2, [r3, #20]
 8004c5c:	4b35      	ldr	r3, [pc, #212]	; (8004d34 <HAL_ADC_MspInit+0x138>)
 8004c5e:	2180      	movs	r1, #128	; 0x80
 8004c60:	02c9      	lsls	r1, r1, #11
 8004c62:	430a      	orrs	r2, r1
 8004c64:	615a      	str	r2, [r3, #20]
 8004c66:	4b33      	ldr	r3, [pc, #204]	; (8004d34 <HAL_ADC_MspInit+0x138>)
 8004c68:	695a      	ldr	r2, [r3, #20]
 8004c6a:	2380      	movs	r3, #128	; 0x80
 8004c6c:	02db      	lsls	r3, r3, #11
 8004c6e:	4013      	ands	r3, r2
 8004c70:	60bb      	str	r3, [r7, #8]
 8004c72:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8 
    */
    GPIO_InitStruct.Pin = McuIn01_Pin|McuIn02_Pin|McuIn03_Pin|McuIn04_Pin 
 8004c74:	2414      	movs	r4, #20
 8004c76:	193b      	adds	r3, r7, r4
 8004c78:	22ff      	movs	r2, #255	; 0xff
 8004c7a:	601a      	str	r2, [r3, #0]
                          |McuIn05_Pin|McuIn06_Pin|McuIn07_Pin|McuIn08_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c7c:	193b      	adds	r3, r7, r4
 8004c7e:	2203      	movs	r2, #3
 8004c80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c82:	193b      	adds	r3, r7, r4
 8004c84:	2200      	movs	r2, #0
 8004c86:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c88:	193a      	adds	r2, r7, r4
 8004c8a:	2390      	movs	r3, #144	; 0x90
 8004c8c:	05db      	lsls	r3, r3, #23
 8004c8e:	0011      	movs	r1, r2
 8004c90:	0018      	movs	r0, r3
 8004c92:	f7fc f859 	bl	8000d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = McuInVn_Pin;
 8004c96:	193b      	adds	r3, r7, r4
 8004c98:	2201      	movs	r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c9c:	193b      	adds	r3, r7, r4
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca2:	193b      	adds	r3, r7, r4
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(McuInVn_GPIO_Port, &GPIO_InitStruct);
 8004ca8:	193b      	adds	r3, r7, r4
 8004caa:	4a23      	ldr	r2, [pc, #140]	; (8004d38 <HAL_ADC_MspInit+0x13c>)
 8004cac:	0019      	movs	r1, r3
 8004cae:	0010      	movs	r0, r2
 8004cb0:	f7fc f84a 	bl	8000d48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8004cb4:	4b21      	ldr	r3, [pc, #132]	; (8004d3c <HAL_ADC_MspInit+0x140>)
 8004cb6:	4a22      	ldr	r2, [pc, #136]	; (8004d40 <HAL_ADC_MspInit+0x144>)
 8004cb8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cba:	4b20      	ldr	r3, [pc, #128]	; (8004d3c <HAL_ADC_MspInit+0x140>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cc0:	4b1e      	ldr	r3, [pc, #120]	; (8004d3c <HAL_ADC_MspInit+0x140>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004cc6:	4b1d      	ldr	r3, [pc, #116]	; (8004d3c <HAL_ADC_MspInit+0x140>)
 8004cc8:	2280      	movs	r2, #128	; 0x80
 8004cca:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004ccc:	4b1b      	ldr	r3, [pc, #108]	; (8004d3c <HAL_ADC_MspInit+0x140>)
 8004cce:	2280      	movs	r2, #128	; 0x80
 8004cd0:	0092      	lsls	r2, r2, #2
 8004cd2:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004cd4:	4b19      	ldr	r3, [pc, #100]	; (8004d3c <HAL_ADC_MspInit+0x140>)
 8004cd6:	2280      	movs	r2, #128	; 0x80
 8004cd8:	0112      	lsls	r2, r2, #4
 8004cda:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8004cdc:	4b17      	ldr	r3, [pc, #92]	; (8004d3c <HAL_ADC_MspInit+0x140>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004ce2:	4b16      	ldr	r3, [pc, #88]	; (8004d3c <HAL_ADC_MspInit+0x140>)
 8004ce4:	2280      	movs	r2, #128	; 0x80
 8004ce6:	0152      	lsls	r2, r2, #5
 8004ce8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004cea:	4b14      	ldr	r3, [pc, #80]	; (8004d3c <HAL_ADC_MspInit+0x140>)
 8004cec:	0018      	movs	r0, r3
 8004cee:	f7fb fefb 	bl	8000ae8 <HAL_DMA_Init>
 8004cf2:	1e03      	subs	r3, r0, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_ADC_MspInit+0xfe>
    {
      Error_Handler();
 8004cf6:	f000 fc11 	bl	800551c <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8004cfa:	4a12      	ldr	r2, [pc, #72]	; (8004d44 <HAL_ADC_MspInit+0x148>)
 8004cfc:	23a8      	movs	r3, #168	; 0xa8
 8004cfe:	58d3      	ldr	r3, [r2, r3]
 8004d00:	4910      	ldr	r1, [pc, #64]	; (8004d44 <HAL_ADC_MspInit+0x148>)
 8004d02:	220f      	movs	r2, #15
 8004d04:	4393      	bics	r3, r2
 8004d06:	22a8      	movs	r2, #168	; 0xa8
 8004d08:	508b      	str	r3, [r1, r2]
 8004d0a:	4a0e      	ldr	r2, [pc, #56]	; (8004d44 <HAL_ADC_MspInit+0x148>)
 8004d0c:	23a8      	movs	r3, #168	; 0xa8
 8004d0e:	58d3      	ldr	r3, [r2, r3]
 8004d10:	490c      	ldr	r1, [pc, #48]	; (8004d44 <HAL_ADC_MspInit+0x148>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	4313      	orrs	r3, r2
 8004d16:	22a8      	movs	r2, #168	; 0xa8
 8004d18:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a07      	ldr	r2, [pc, #28]	; (8004d3c <HAL_ADC_MspInit+0x140>)
 8004d1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_ADC_MspInit+0x140>)
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	b00b      	add	sp, #44	; 0x2c
 8004d2c:	bd90      	pop	{r4, r7, pc}
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	40012400 	.word	0x40012400
 8004d34:	40021000 	.word	0x40021000
 8004d38:	48000400 	.word	0x48000400
 8004d3c:	20000094 	.word	0x20000094
 8004d40:	40020008 	.word	0x40020008
 8004d44:	40020000 	.word	0x40020000

08004d48 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 8004d4c:	4b17      	ldr	r3, [pc, #92]	; (8004dac <MX_CAN_Init+0x64>)
 8004d4e:	4a18      	ldr	r2, [pc, #96]	; (8004db0 <MX_CAN_Init+0x68>)
 8004d50:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8004d52:	4b16      	ldr	r3, [pc, #88]	; (8004dac <MX_CAN_Init+0x64>)
 8004d54:	2210      	movs	r2, #16
 8004d56:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8004d58:	4b14      	ldr	r3, [pc, #80]	; (8004dac <MX_CAN_Init+0x64>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004d5e:	4b13      	ldr	r3, [pc, #76]	; (8004dac <MX_CAN_Init+0x64>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8004d64:	4b11      	ldr	r3, [pc, #68]	; (8004dac <MX_CAN_Init+0x64>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8004d6a:	4b10      	ldr	r3, [pc, #64]	; (8004dac <MX_CAN_Init+0x64>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8004d70:	4b0e      	ldr	r3, [pc, #56]	; (8004dac <MX_CAN_Init+0x64>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <MX_CAN_Init+0x64>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8004d7c:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <MX_CAN_Init+0x64>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <MX_CAN_Init+0x64>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8004d88:	4b08      	ldr	r3, [pc, #32]	; (8004dac <MX_CAN_Init+0x64>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8004d8e:	4b07      	ldr	r3, [pc, #28]	; (8004dac <MX_CAN_Init+0x64>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8004d94:	4b05      	ldr	r3, [pc, #20]	; (8004dac <MX_CAN_Init+0x64>)
 8004d96:	0018      	movs	r0, r3
 8004d98:	f7fb fcfe 	bl	8000798 <HAL_CAN_Init>
 8004d9c:	1e03      	subs	r3, r0, #0
 8004d9e:	d001      	beq.n	8004da4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8004da0:	f000 fbbc 	bl	800551c <Error_Handler>
  }

}
 8004da4:	46c0      	nop			; (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	20000124 	.word	0x20000124
 8004db0:	40006400 	.word	0x40006400

08004db4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08a      	sub	sp, #40	; 0x28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dbc:	2314      	movs	r3, #20
 8004dbe:	18fb      	adds	r3, r7, r3
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	2314      	movs	r3, #20
 8004dc4:	001a      	movs	r2, r3
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	f001 f9f6 	bl	80061b8 <memset>
  if(canHandle->Instance==CAN)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1c      	ldr	r2, [pc, #112]	; (8004e44 <HAL_CAN_MspInit+0x90>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d132      	bne.n	8004e3c <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004dd6:	4b1c      	ldr	r3, [pc, #112]	; (8004e48 <HAL_CAN_MspInit+0x94>)
 8004dd8:	69da      	ldr	r2, [r3, #28]
 8004dda:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <HAL_CAN_MspInit+0x94>)
 8004ddc:	2180      	movs	r1, #128	; 0x80
 8004dde:	0489      	lsls	r1, r1, #18
 8004de0:	430a      	orrs	r2, r1
 8004de2:	61da      	str	r2, [r3, #28]
 8004de4:	4b18      	ldr	r3, [pc, #96]	; (8004e48 <HAL_CAN_MspInit+0x94>)
 8004de6:	69da      	ldr	r2, [r3, #28]
 8004de8:	2380      	movs	r3, #128	; 0x80
 8004dea:	049b      	lsls	r3, r3, #18
 8004dec:	4013      	ands	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004df2:	4b15      	ldr	r3, [pc, #84]	; (8004e48 <HAL_CAN_MspInit+0x94>)
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	4b14      	ldr	r3, [pc, #80]	; (8004e48 <HAL_CAN_MspInit+0x94>)
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	02c9      	lsls	r1, r1, #11
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	615a      	str	r2, [r3, #20]
 8004e00:	4b11      	ldr	r3, [pc, #68]	; (8004e48 <HAL_CAN_MspInit+0x94>)
 8004e02:	695a      	ldr	r2, [r3, #20]
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	02db      	lsls	r3, r3, #11
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004e0e:	2114      	movs	r1, #20
 8004e10:	187b      	adds	r3, r7, r1
 8004e12:	22c0      	movs	r2, #192	; 0xc0
 8004e14:	0092      	lsls	r2, r2, #2
 8004e16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e18:	187b      	adds	r3, r7, r1
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e1e:	187b      	adds	r3, r7, r1
 8004e20:	2200      	movs	r2, #0
 8004e22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e24:	187b      	adds	r3, r7, r1
 8004e26:	2203      	movs	r2, #3
 8004e28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8004e2a:	187b      	adds	r3, r7, r1
 8004e2c:	2204      	movs	r2, #4
 8004e2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e30:	187b      	adds	r3, r7, r1
 8004e32:	4a06      	ldr	r2, [pc, #24]	; (8004e4c <HAL_CAN_MspInit+0x98>)
 8004e34:	0019      	movs	r1, r3
 8004e36:	0010      	movs	r0, r2
 8004e38:	f7fb ff86 	bl	8000d48 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8004e3c:	46c0      	nop			; (mov r8, r8)
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	b00a      	add	sp, #40	; 0x28
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40006400 	.word	0x40006400
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	48000400 	.word	0x48000400

08004e50 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e56:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <MX_DMA_Init+0x38>)
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <MX_DMA_Init+0x38>)
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	615a      	str	r2, [r3, #20]
 8004e62:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <MX_DMA_Init+0x38>)
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	2201      	movs	r2, #1
 8004e68:	4013      	ands	r3, r2
 8004e6a:	607b      	str	r3, [r7, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2100      	movs	r1, #0
 8004e72:	2009      	movs	r0, #9
 8004e74:	f7fb fe12 	bl	8000a9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8004e78:	2009      	movs	r0, #9
 8004e7a:	f7fb fe24 	bl	8000ac6 <HAL_NVIC_EnableIRQ>

}
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	46bd      	mov	sp, r7
 8004e82:	b002      	add	sp, #8
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	40021000 	.word	0x40021000

08004e8c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004e8c:	b590      	push	{r4, r7, lr}
 8004e8e:	b08d      	sub	sp, #52	; 0x34
 8004e90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e92:	241c      	movs	r4, #28
 8004e94:	193b      	adds	r3, r7, r4
 8004e96:	0018      	movs	r0, r3
 8004e98:	2314      	movs	r3, #20
 8004e9a:	001a      	movs	r2, r3
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	f001 f98b 	bl	80061b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ea2:	4bad      	ldr	r3, [pc, #692]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	4bac      	ldr	r3, [pc, #688]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004ea8:	2180      	movs	r1, #128	; 0x80
 8004eaa:	0389      	lsls	r1, r1, #14
 8004eac:	430a      	orrs	r2, r1
 8004eae:	615a      	str	r2, [r3, #20]
 8004eb0:	4ba9      	ldr	r3, [pc, #676]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004eb2:	695a      	ldr	r2, [r3, #20]
 8004eb4:	2380      	movs	r3, #128	; 0x80
 8004eb6:	039b      	lsls	r3, r3, #14
 8004eb8:	4013      	ands	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]
 8004ebc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ebe:	4ba6      	ldr	r3, [pc, #664]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004ec0:	695a      	ldr	r2, [r3, #20]
 8004ec2:	4ba5      	ldr	r3, [pc, #660]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004ec4:	2180      	movs	r1, #128	; 0x80
 8004ec6:	0309      	lsls	r1, r1, #12
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	615a      	str	r2, [r3, #20]
 8004ecc:	4ba2      	ldr	r3, [pc, #648]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004ece:	695a      	ldr	r2, [r3, #20]
 8004ed0:	2380      	movs	r3, #128	; 0x80
 8004ed2:	031b      	lsls	r3, r3, #12
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004eda:	4b9f      	ldr	r3, [pc, #636]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004edc:	695a      	ldr	r2, [r3, #20]
 8004ede:	4b9e      	ldr	r3, [pc, #632]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004ee0:	2180      	movs	r1, #128	; 0x80
 8004ee2:	03c9      	lsls	r1, r1, #15
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	615a      	str	r2, [r3, #20]
 8004ee8:	4b9b      	ldr	r3, [pc, #620]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004eea:	695a      	ldr	r2, [r3, #20]
 8004eec:	2380      	movs	r3, #128	; 0x80
 8004eee:	03db      	lsls	r3, r3, #15
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ef6:	4b98      	ldr	r3, [pc, #608]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004ef8:	695a      	ldr	r2, [r3, #20]
 8004efa:	4b97      	ldr	r3, [pc, #604]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004efc:	2180      	movs	r1, #128	; 0x80
 8004efe:	0289      	lsls	r1, r1, #10
 8004f00:	430a      	orrs	r2, r1
 8004f02:	615a      	str	r2, [r3, #20]
 8004f04:	4b94      	ldr	r3, [pc, #592]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	2380      	movs	r3, #128	; 0x80
 8004f0a:	029b      	lsls	r3, r3, #10
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f12:	4b91      	ldr	r3, [pc, #580]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004f14:	695a      	ldr	r2, [r3, #20]
 8004f16:	4b90      	ldr	r3, [pc, #576]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004f18:	2180      	movs	r1, #128	; 0x80
 8004f1a:	02c9      	lsls	r1, r1, #11
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	615a      	str	r2, [r3, #20]
 8004f20:	4b8d      	ldr	r3, [pc, #564]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004f22:	695a      	ldr	r2, [r3, #20]
 8004f24:	2380      	movs	r3, #128	; 0x80
 8004f26:	02db      	lsls	r3, r3, #11
 8004f28:	4013      	ands	r3, r2
 8004f2a:	60bb      	str	r3, [r7, #8]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f2e:	4b8a      	ldr	r3, [pc, #552]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	4b89      	ldr	r3, [pc, #548]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004f34:	2180      	movs	r1, #128	; 0x80
 8004f36:	0349      	lsls	r1, r1, #13
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	615a      	str	r2, [r3, #20]
 8004f3c:	4b86      	ldr	r3, [pc, #536]	; (8005158 <MX_GPIO_Init+0x2cc>)
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	2380      	movs	r3, #128	; 0x80
 8004f42:	035b      	lsls	r3, r3, #13
 8004f44:	4013      	ands	r3, r2
 8004f46:	607b      	str	r3, [r7, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, McuCsVn01_Pin|McuCsVn02_Pin|McuCsVn03_Pin|McuCsVn04_Pin 
 8004f4a:	4984      	ldr	r1, [pc, #528]	; (800515c <MX_GPIO_Init+0x2d0>)
 8004f4c:	4b84      	ldr	r3, [pc, #528]	; (8005160 <MX_GPIO_Init+0x2d4>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	0018      	movs	r0, r3
 8004f52:	f7fc f892 	bl	800107a <HAL_GPIO_WritePin>
                          |McuCsVn05_Pin|McuCsVn06_Pin|McuCsVn08_Pin|McuCsVn09_Pin 
                          |Mcu485RxEn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, McpLedKeys02_Pin|McuLedkeys01_Pin|McuFlashCs_Pin, GPIO_PIN_RESET);
 8004f56:	23c1      	movs	r3, #193	; 0xc1
 8004f58:	019b      	lsls	r3, r3, #6
 8004f5a:	4882      	ldr	r0, [pc, #520]	; (8005164 <MX_GPIO_Init+0x2d8>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	0019      	movs	r1, r3
 8004f60:	f7fc f88b 	bl	800107a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(McuLedVd_GPIO_Port, McuLedVd_Pin, GPIO_PIN_RESET);
 8004f64:	4b80      	ldr	r3, [pc, #512]	; (8005168 <MX_GPIO_Init+0x2dc>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	2104      	movs	r1, #4
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f7fc f885 	bl	800107a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, McuNordicTxEn_Pin|McuNordicPwrUp_Pin|McuNordicCs_Pin|Mcu485TxEn_Pin 
 8004f70:	497e      	ldr	r1, [pc, #504]	; (800516c <MX_GPIO_Init+0x2e0>)
 8004f72:	4b7f      	ldr	r3, [pc, #508]	; (8005170 <MX_GPIO_Init+0x2e4>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	0018      	movs	r0, r3
 8004f78:	f7fc f87f 	bl	800107a <HAL_GPIO_WritePin>
                          |McuFlashReset_Pin|McuNordicTrxCe_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin PEPin PEPin 
                           PEPin */
  GPIO_InitStruct.Pin = McuCsVn01_Pin|McuCsVn02_Pin|McuCsVn03_Pin|McuCsVn04_Pin 
 8004f7c:	0021      	movs	r1, r4
 8004f7e:	187b      	adds	r3, r7, r1
 8004f80:	4a76      	ldr	r2, [pc, #472]	; (800515c <MX_GPIO_Init+0x2d0>)
 8004f82:	601a      	str	r2, [r3, #0]
                          |McuCsVn05_Pin|McuCsVn06_Pin|McuCsVn08_Pin|McuCsVn09_Pin 
                          |Mcu485RxEn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f84:	187b      	adds	r3, r7, r1
 8004f86:	2201      	movs	r2, #1
 8004f88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f8a:	187b      	adds	r3, r7, r1
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f90:	187b      	adds	r3, r7, r1
 8004f92:	2200      	movs	r2, #0
 8004f94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f96:	000c      	movs	r4, r1
 8004f98:	187b      	adds	r3, r7, r1
 8004f9a:	4a71      	ldr	r2, [pc, #452]	; (8005160 <MX_GPIO_Init+0x2d4>)
 8004f9c:	0019      	movs	r1, r3
 8004f9e:	0010      	movs	r0, r2
 8004fa0:	f7fb fed2 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = McpLedKeys02_Pin|McuLedkeys01_Pin|McuFlashCs_Pin;
 8004fa4:	0021      	movs	r1, r4
 8004fa6:	187b      	adds	r3, r7, r1
 8004fa8:	22c1      	movs	r2, #193	; 0xc1
 8004faa:	0192      	lsls	r2, r2, #6
 8004fac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fae:	187b      	adds	r3, r7, r1
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb4:	187b      	adds	r3, r7, r1
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fba:	187b      	adds	r3, r7, r1
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fc0:	000c      	movs	r4, r1
 8004fc2:	187b      	adds	r3, r7, r1
 8004fc4:	4a67      	ldr	r2, [pc, #412]	; (8005164 <MX_GPIO_Init+0x2d8>)
 8004fc6:	0019      	movs	r1, r3
 8004fc8:	0010      	movs	r0, r2
 8004fca:	f7fb febd 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF9 PF10 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004fce:	0021      	movs	r1, r4
 8004fd0:	187b      	adds	r3, r7, r1
 8004fd2:	22e0      	movs	r2, #224	; 0xe0
 8004fd4:	0112      	lsls	r2, r2, #4
 8004fd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fd8:	187b      	adds	r3, r7, r1
 8004fda:	2203      	movs	r2, #3
 8004fdc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fde:	187b      	adds	r3, r7, r1
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004fe4:	000c      	movs	r4, r1
 8004fe6:	187b      	adds	r3, r7, r1
 8004fe8:	4a62      	ldr	r2, [pc, #392]	; (8005174 <MX_GPIO_Init+0x2e8>)
 8004fea:	0019      	movs	r1, r3
 8004fec:	0010      	movs	r0, r2
 8004fee:	f7fb feab 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC7 PC8 
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8004ff2:	0021      	movs	r1, r4
 8004ff4:	187b      	adds	r3, r7, r1
 8004ff6:	4a60      	ldr	r2, [pc, #384]	; (8005178 <MX_GPIO_Init+0x2ec>)
 8004ff8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ffa:	187b      	adds	r3, r7, r1
 8004ffc:	2203      	movs	r2, #3
 8004ffe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005000:	187b      	adds	r3, r7, r1
 8005002:	2200      	movs	r2, #0
 8005004:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005006:	000c      	movs	r4, r1
 8005008:	187b      	adds	r3, r7, r1
 800500a:	4a56      	ldr	r2, [pc, #344]	; (8005164 <MX_GPIO_Init+0x2d8>)
 800500c:	0019      	movs	r1, r3
 800500e:	0010      	movs	r0, r2
 8005010:	f7fb fe9a 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = McuBtInt_Pin|McuCol03_Pin|McuCol04_Pin;
 8005014:	0021      	movs	r1, r4
 8005016:	187b      	adds	r3, r7, r1
 8005018:	224c      	movs	r2, #76	; 0x4c
 800501a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800501c:	187b      	adds	r3, r7, r1
 800501e:	2200      	movs	r2, #0
 8005020:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005022:	187b      	adds	r3, r7, r1
 8005024:	2200      	movs	r2, #0
 8005026:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005028:	000c      	movs	r4, r1
 800502a:	187b      	adds	r3, r7, r1
 800502c:	4a51      	ldr	r2, [pc, #324]	; (8005174 <MX_GPIO_Init+0x2e8>)
 800502e:	0019      	movs	r1, r3
 8005030:	0010      	movs	r0, r2
 8005032:	f7fb fe89 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005036:	0021      	movs	r1, r4
 8005038:	187b      	adds	r3, r7, r1
 800503a:	2202      	movs	r2, #2
 800503c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800503e:	187b      	adds	r3, r7, r1
 8005040:	2203      	movs	r2, #3
 8005042:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005044:	187b      	adds	r3, r7, r1
 8005046:	2200      	movs	r2, #0
 8005048:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800504a:	000c      	movs	r4, r1
 800504c:	187b      	adds	r3, r7, r1
 800504e:	4a46      	ldr	r2, [pc, #280]	; (8005168 <MX_GPIO_Init+0x2dc>)
 8005050:	0019      	movs	r1, r3
 8005052:	0010      	movs	r0, r2
 8005054:	f7fb fe78 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = McuLedVd_Pin;
 8005058:	0021      	movs	r1, r4
 800505a:	187b      	adds	r3, r7, r1
 800505c:	2204      	movs	r2, #4
 800505e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005060:	187b      	adds	r3, r7, r1
 8005062:	2201      	movs	r2, #1
 8005064:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005066:	187b      	adds	r3, r7, r1
 8005068:	2200      	movs	r2, #0
 800506a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800506c:	187b      	adds	r3, r7, r1
 800506e:	2200      	movs	r2, #0
 8005070:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(McuLedVd_GPIO_Port, &GPIO_InitStruct);
 8005072:	000c      	movs	r4, r1
 8005074:	187b      	adds	r3, r7, r1
 8005076:	4a3c      	ldr	r2, [pc, #240]	; (8005168 <MX_GPIO_Init+0x2dc>)
 8005078:	0019      	movs	r1, r3
 800507a:	0010      	movs	r0, r2
 800507c:	f7fb fe64 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_0|GPIO_PIN_1;
 8005080:	0021      	movs	r1, r4
 8005082:	187b      	adds	r3, r7, r1
 8005084:	4a3d      	ldr	r2, [pc, #244]	; (800517c <MX_GPIO_Init+0x2f0>)
 8005086:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005088:	187b      	adds	r3, r7, r1
 800508a:	2203      	movs	r2, #3
 800508c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508e:	187b      	adds	r3, r7, r1
 8005090:	2200      	movs	r2, #0
 8005092:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005094:	000c      	movs	r4, r1
 8005096:	187b      	adds	r3, r7, r1
 8005098:	4a31      	ldr	r2, [pc, #196]	; (8005160 <MX_GPIO_Init+0x2d4>)
 800509a:	0019      	movs	r1, r3
 800509c:	0010      	movs	r0, r2
 800509e:	f7fb fe53 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = McuLin03_Pin|McuLin04_Pin|McuLin01_Pin|McuLin02_Pin 
 80050a2:	0021      	movs	r1, r4
 80050a4:	187b      	adds	r3, r7, r1
 80050a6:	4a36      	ldr	r2, [pc, #216]	; (8005180 <MX_GPIO_Init+0x2f4>)
 80050a8:	601a      	str	r2, [r3, #0]
                          |McuNordicuCClk_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050aa:	187b      	adds	r3, r7, r1
 80050ac:	2200      	movs	r2, #0
 80050ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b0:	187b      	adds	r3, r7, r1
 80050b2:	2200      	movs	r2, #0
 80050b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050b6:	000c      	movs	r4, r1
 80050b8:	187b      	adds	r3, r7, r1
 80050ba:	4a2b      	ldr	r2, [pc, #172]	; (8005168 <MX_GPIO_Init+0x2dc>)
 80050bc:	0019      	movs	r1, r3
 80050be:	0010      	movs	r0, r2
 80050c0:	f7fb fe42 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin */
  GPIO_InitStruct.Pin = McuNordicTxEn_Pin|McuNordicPwrUp_Pin|McuNordicCs_Pin|Mcu485TxEn_Pin 
 80050c4:	0021      	movs	r1, r4
 80050c6:	187b      	adds	r3, r7, r1
 80050c8:	4a28      	ldr	r2, [pc, #160]	; (800516c <MX_GPIO_Init+0x2e0>)
 80050ca:	601a      	str	r2, [r3, #0]
                          |McuFlashReset_Pin|McuNordicTrxCe_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050cc:	187b      	adds	r3, r7, r1
 80050ce:	2201      	movs	r2, #1
 80050d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d2:	187b      	adds	r3, r7, r1
 80050d4:	2200      	movs	r2, #0
 80050d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050d8:	187b      	adds	r3, r7, r1
 80050da:	2200      	movs	r2, #0
 80050dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050de:	000c      	movs	r4, r1
 80050e0:	187b      	adds	r3, r7, r1
 80050e2:	4a23      	ldr	r2, [pc, #140]	; (8005170 <MX_GPIO_Init+0x2e4>)
 80050e4:	0019      	movs	r1, r3
 80050e6:	0010      	movs	r0, r2
 80050e8:	f7fb fe2e 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80050ec:	0021      	movs	r1, r4
 80050ee:	187b      	adds	r3, r7, r1
 80050f0:	2280      	movs	r2, #128	; 0x80
 80050f2:	0112      	lsls	r2, r2, #4
 80050f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050f6:	000c      	movs	r4, r1
 80050f8:	193b      	adds	r3, r7, r4
 80050fa:	2203      	movs	r2, #3
 80050fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fe:	193b      	adds	r3, r7, r4
 8005100:	2200      	movs	r2, #0
 8005102:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005104:	193b      	adds	r3, r7, r4
 8005106:	4a1a      	ldr	r2, [pc, #104]	; (8005170 <MX_GPIO_Init+0x2e4>)
 8005108:	0019      	movs	r1, r3
 800510a:	0010      	movs	r0, r2
 800510c:	f7fb fe1c 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = McuCol02_Pin;
 8005110:	193b      	adds	r3, r7, r4
 8005112:	2280      	movs	r2, #128	; 0x80
 8005114:	0152      	lsls	r2, r2, #5
 8005116:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005118:	193b      	adds	r3, r7, r4
 800511a:	2200      	movs	r2, #0
 800511c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800511e:	193b      	adds	r3, r7, r4
 8005120:	2200      	movs	r2, #0
 8005122:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(McuCol02_GPIO_Port, &GPIO_InitStruct);
 8005124:	193a      	adds	r2, r7, r4
 8005126:	2390      	movs	r3, #144	; 0x90
 8005128:	05db      	lsls	r3, r3, #23
 800512a:	0011      	movs	r1, r2
 800512c:	0018      	movs	r0, r3
 800512e:	f7fb fe0b 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = McuCol01_Pin|McuNordicAm_Pin|McuNordicCd_Pin|McuNordicDr_Pin;
 8005132:	193b      	adds	r3, r7, r4
 8005134:	22c5      	movs	r2, #197	; 0xc5
 8005136:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005138:	193b      	adds	r3, r7, r4
 800513a:	2200      	movs	r2, #0
 800513c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800513e:	193b      	adds	r3, r7, r4
 8005140:	2200      	movs	r2, #0
 8005142:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005144:	193b      	adds	r3, r7, r4
 8005146:	4a0a      	ldr	r2, [pc, #40]	; (8005170 <MX_GPIO_Init+0x2e4>)
 8005148:	0019      	movs	r1, r3
 800514a:	0010      	movs	r0, r2
 800514c:	f7fb fdfc 	bl	8000d48 <HAL_GPIO_Init>

}
 8005150:	46c0      	nop			; (mov r8, r8)
 8005152:	46bd      	mov	sp, r7
 8005154:	b00d      	add	sp, #52	; 0x34
 8005156:	bd90      	pop	{r4, r7, pc}
 8005158:	40021000 	.word	0x40021000
 800515c:	000007fc 	.word	0x000007fc
 8005160:	48001000 	.word	0x48001000
 8005164:	48000800 	.word	0x48000800
 8005168:	48000400 	.word	0x48000400
 800516c:	00009720 	.word	0x00009720
 8005170:	48000c00 	.word	0x48000c00
 8005174:	48001400 	.word	0x48001400
 8005178:	000003bf 	.word	0x000003bf
 800517c:	00001803 	.word	0x00001803
 8005180:	000090e0 	.word	0x000090e0

08005184 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8005188:	4b1b      	ldr	r3, [pc, #108]	; (80051f8 <MX_I2C2_Init+0x74>)
 800518a:	4a1c      	ldr	r2, [pc, #112]	; (80051fc <MX_I2C2_Init+0x78>)
 800518c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800518e:	4b1a      	ldr	r3, [pc, #104]	; (80051f8 <MX_I2C2_Init+0x74>)
 8005190:	4a1b      	ldr	r2, [pc, #108]	; (8005200 <MX_I2C2_Init+0x7c>)
 8005192:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005194:	4b18      	ldr	r3, [pc, #96]	; (80051f8 <MX_I2C2_Init+0x74>)
 8005196:	2200      	movs	r2, #0
 8005198:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800519a:	4b17      	ldr	r3, [pc, #92]	; (80051f8 <MX_I2C2_Init+0x74>)
 800519c:	2201      	movs	r2, #1
 800519e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80051a0:	4b15      	ldr	r3, [pc, #84]	; (80051f8 <MX_I2C2_Init+0x74>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80051a6:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <MX_I2C2_Init+0x74>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80051ac:	4b12      	ldr	r3, [pc, #72]	; (80051f8 <MX_I2C2_Init+0x74>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051b2:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <MX_I2C2_Init+0x74>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051b8:	4b0f      	ldr	r3, [pc, #60]	; (80051f8 <MX_I2C2_Init+0x74>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80051be:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <MX_I2C2_Init+0x74>)
 80051c0:	0018      	movs	r0, r3
 80051c2:	f7fb ff89 	bl	80010d8 <HAL_I2C_Init>
 80051c6:	1e03      	subs	r3, r0, #0
 80051c8:	d001      	beq.n	80051ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80051ca:	f000 f9a7 	bl	800551c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80051ce:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <MX_I2C2_Init+0x74>)
 80051d0:	2100      	movs	r1, #0
 80051d2:	0018      	movs	r0, r3
 80051d4:	f7fc f816 	bl	8001204 <HAL_I2CEx_ConfigAnalogFilter>
 80051d8:	1e03      	subs	r3, r0, #0
 80051da:	d001      	beq.n	80051e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80051dc:	f000 f99e 	bl	800551c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80051e0:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <MX_I2C2_Init+0x74>)
 80051e2:	2100      	movs	r1, #0
 80051e4:	0018      	movs	r0, r3
 80051e6:	f7fc f859 	bl	800129c <HAL_I2CEx_ConfigDigitalFilter>
 80051ea:	1e03      	subs	r3, r0, #0
 80051ec:	d001      	beq.n	80051f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80051ee:	f000 f995 	bl	800551c <Error_Handler>
  }

}
 80051f2:	46c0      	nop			; (mov r8, r8)
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	2000014c 	.word	0x2000014c
 80051fc:	40005800 	.word	0x40005800
 8005200:	20303e5d 	.word	0x20303e5d

08005204 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08a      	sub	sp, #40	; 0x28
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800520c:	2314      	movs	r3, #20
 800520e:	18fb      	adds	r3, r7, r3
 8005210:	0018      	movs	r0, r3
 8005212:	2314      	movs	r3, #20
 8005214:	001a      	movs	r2, r3
 8005216:	2100      	movs	r1, #0
 8005218:	f000 ffce 	bl	80061b8 <memset>
  if(i2cHandle->Instance==I2C2)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1c      	ldr	r2, [pc, #112]	; (8005294 <HAL_I2C_MspInit+0x90>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d132      	bne.n	800528c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005226:	4b1c      	ldr	r3, [pc, #112]	; (8005298 <HAL_I2C_MspInit+0x94>)
 8005228:	695a      	ldr	r2, [r3, #20]
 800522a:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <HAL_I2C_MspInit+0x94>)
 800522c:	2180      	movs	r1, #128	; 0x80
 800522e:	02c9      	lsls	r1, r1, #11
 8005230:	430a      	orrs	r2, r1
 8005232:	615a      	str	r2, [r3, #20]
 8005234:	4b18      	ldr	r3, [pc, #96]	; (8005298 <HAL_I2C_MspInit+0x94>)
 8005236:	695a      	ldr	r2, [r3, #20]
 8005238:	2380      	movs	r3, #128	; 0x80
 800523a:	02db      	lsls	r3, r3, #11
 800523c:	4013      	ands	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8005242:	2114      	movs	r1, #20
 8005244:	187b      	adds	r3, r7, r1
 8005246:	22c0      	movs	r2, #192	; 0xc0
 8005248:	01d2      	lsls	r2, r2, #7
 800524a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800524c:	187b      	adds	r3, r7, r1
 800524e:	2212      	movs	r2, #18
 8005250:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005252:	187b      	adds	r3, r7, r1
 8005254:	2201      	movs	r2, #1
 8005256:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005258:	187b      	adds	r3, r7, r1
 800525a:	2203      	movs	r2, #3
 800525c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800525e:	187b      	adds	r3, r7, r1
 8005260:	2205      	movs	r2, #5
 8005262:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005264:	187b      	adds	r3, r7, r1
 8005266:	4a0d      	ldr	r2, [pc, #52]	; (800529c <HAL_I2C_MspInit+0x98>)
 8005268:	0019      	movs	r1, r3
 800526a:	0010      	movs	r0, r2
 800526c:	f7fb fd6c 	bl	8000d48 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005270:	4b09      	ldr	r3, [pc, #36]	; (8005298 <HAL_I2C_MspInit+0x94>)
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	4b08      	ldr	r3, [pc, #32]	; (8005298 <HAL_I2C_MspInit+0x94>)
 8005276:	2180      	movs	r1, #128	; 0x80
 8005278:	03c9      	lsls	r1, r1, #15
 800527a:	430a      	orrs	r2, r1
 800527c:	61da      	str	r2, [r3, #28]
 800527e:	4b06      	ldr	r3, [pc, #24]	; (8005298 <HAL_I2C_MspInit+0x94>)
 8005280:	69da      	ldr	r2, [r3, #28]
 8005282:	2380      	movs	r3, #128	; 0x80
 8005284:	03db      	lsls	r3, r3, #15
 8005286:	4013      	ands	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	46bd      	mov	sp, r7
 8005290:	b00a      	add	sp, #40	; 0x28
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40005800 	.word	0x40005800
 8005298:	40021000 	.word	0x40021000
 800529c:	48000400 	.word	0x48000400

080052a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80052a6:	f7fa ffe3 	bl	8000270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80052aa:	f000 f8bf 	bl	800542c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80052ae:	f7ff fded 	bl	8004e8c <MX_GPIO_Init>
  MX_DMA_Init();
 80052b2:	f7ff fdcd 	bl	8004e50 <MX_DMA_Init>
  MX_ADC_Init();
 80052b6:	f7ff fbdf 	bl	8004a78 <MX_ADC_Init>
  MX_CAN_Init();
 80052ba:	f7ff fd45 	bl	8004d48 <MX_CAN_Init>
  MX_I2C2_Init();
 80052be:	f7ff ff61 	bl	8005184 <MX_I2C2_Init>
  MX_SPI1_Init();
 80052c2:	f000 f96f 	bl	80055a4 <MX_SPI1_Init>
  MX_SPI2_Init();
 80052c6:	f000 f9ab 	bl	8005620 <MX_SPI2_Init>
  MX_TIM1_Init();
 80052ca:	f000 fb91 	bl	80059f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80052ce:	f000 fc45 	bl	8005b5c <MX_TIM2_Init>
  MX_TIM3_Init();
 80052d2:	f000 fcc1 	bl	8005c58 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80052d6:	f000 fe31 	bl	8005f3c <MX_USART3_UART_Init>
  MX_USART8_UART_Init();
 80052da:	f000 fe5f 	bl	8005f9c <MX_USART8_UART_Init>
  MX_RTC_Init();
 80052de:	f000 f923 	bl	8005528 <MX_RTC_Init>

  /* USER CODE BEGIN 2 */
  if(nRf905SetConfig() != HAL_OK)
 80052e2:	f7ff f8dd 	bl	80044a0 <nRf905SetConfig>
 80052e6:	1e03      	subs	r3, r0, #0
 80052e8:	d000      	beq.n	80052ec <main+0x4c>
  {
	  while(1);
 80052ea:	e7fe      	b.n	80052ea <main+0x4a>
  }

	nRf905SetTxAddr(0xAAAAAAAA);
 80052ec:	4b49      	ldr	r3, [pc, #292]	; (8005414 <main+0x174>)
 80052ee:	0018      	movs	r0, r3
 80052f0:	f7ff f9fe 	bl	80046f0 <nRf905SetTxAddr>
	nRf905SetRxAddr(0xCCCCCCCC);
 80052f4:	4b48      	ldr	r3, [pc, #288]	; (8005418 <main+0x178>)
 80052f6:	0018      	movs	r0, r3
 80052f8:	f7ff fa4e 	bl	8004798 <nRf905SetRxAddr>

	Nrf905SetMode(eReceiveShockBurstMode);
 80052fc:	2003      	movs	r0, #3
 80052fe:	f7ff f837 	bl	8004370 <Nrf905SetMode>
	HAL_Delay(50);
 8005302:	2032      	movs	r0, #50	; 0x32
 8005304:	f7fa ffde 	bl	80002c4 <HAL_Delay>

	for(i = 0; i < 50; i++)
 8005308:	230f      	movs	r3, #15
 800530a:	18fb      	adds	r3, r7, r3
 800530c:	2200      	movs	r2, #0
 800530e:	701a      	strb	r2, [r3, #0]
 8005310:	e015      	b.n	800533e <main+0x9e>
	{
		ToSend.u32v = 0x12345678;
 8005312:	4b42      	ldr	r3, [pc, #264]	; (800541c <main+0x17c>)
 8005314:	60bb      	str	r3, [r7, #8]
		nRf905SendPacket(ToSend.u8v, 4);
 8005316:	2308      	movs	r3, #8
 8005318:	18fb      	adds	r3, r7, r3
 800531a:	2104      	movs	r1, #4
 800531c:	0018      	movs	r0, r3
 800531e:	f7ff fa8f 	bl	8004840 <nRf905SendPacket>
		HAL_Delay(50);
 8005322:	2032      	movs	r0, #50	; 0x32
 8005324:	f7fa ffce 	bl	80002c4 <HAL_Delay>
		HAL_GPIO_TogglePin(McuLedVd_GPIO_Port, McuLedVd_Pin);
 8005328:	4b3d      	ldr	r3, [pc, #244]	; (8005420 <main+0x180>)
 800532a:	2104      	movs	r1, #4
 800532c:	0018      	movs	r0, r3
 800532e:	f7fb fec1 	bl	80010b4 <HAL_GPIO_TogglePin>
	for(i = 0; i < 50; i++)
 8005332:	210f      	movs	r1, #15
 8005334:	187b      	adds	r3, r7, r1
 8005336:	781a      	ldrb	r2, [r3, #0]
 8005338:	187b      	adds	r3, r7, r1
 800533a:	3201      	adds	r2, #1
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	230f      	movs	r3, #15
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b31      	cmp	r3, #49	; 0x31
 8005346:	d9e4      	bls.n	8005312 <main+0x72>
	}

	nRf905SetTxAddr(0xAAAAAAAA);
 8005348:	4b32      	ldr	r3, [pc, #200]	; (8005414 <main+0x174>)
 800534a:	0018      	movs	r0, r3
 800534c:	f7ff f9d0 	bl	80046f0 <nRf905SetTxAddr>
	nRf905SetRxAddr(0xCCCCCCCC);
 8005350:	4b31      	ldr	r3, [pc, #196]	; (8005418 <main+0x178>)
 8005352:	0018      	movs	r0, r3
 8005354:	f7ff fa20 	bl	8004798 <nRf905SetRxAddr>
	Nrf905SetMode(eReadDataFromRxMode);
 8005358:	2001      	movs	r0, #1
 800535a:	f7ff f809 	bl	8004370 <Nrf905SetMode>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Nrf905SetMode(eReadDataFromRxMode);
 800535e:	2001      	movs	r0, #1
 8005360:	f7ff f806 	bl	8004370 <Nrf905SetMode>

	  if(Nrf905GetDr() == 1)
 8005364:	4b2f      	ldr	r3, [pc, #188]	; (8005424 <main+0x184>)
 8005366:	2180      	movs	r1, #128	; 0x80
 8005368:	0018      	movs	r0, r3
 800536a:	f7fb fe69 	bl	8001040 <HAL_GPIO_ReadPin>
 800536e:	0003      	movs	r3, r0
 8005370:	2b01      	cmp	r3, #1
 8005372:	d1f4      	bne.n	800535e <main+0xbe>
	 	  {
		  	  //while(1);
		  	// HAL_GPIO_TogglePin(McuLedVd_GPIO_Port, McuLedVd_Pin);

		  ToReceive.u32v = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	607b      	str	r3, [r7, #4]
		   nRf905ReceivePacket(ToReceive.u8v, 4);
 8005378:	1d3b      	adds	r3, r7, #4
 800537a:	2104      	movs	r1, #4
 800537c:	0018      	movs	r0, r3
 800537e:	f7ff faf9 	bl	8004974 <nRf905ReceivePacket>
//		  	while(Nrf905GetDr() == 1)
//		  	{
//		  		HAL_Delay(5);
//		  	}

		  	 if(ToReceive.u32v == 0x12345678)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a25      	ldr	r2, [pc, #148]	; (800541c <main+0x17c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d11f      	bne.n	80053ca <main+0x12a>
		  	 {
		  		ToReceive.u32v = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	607b      	str	r3, [r7, #4]
		  		for(i = 0; i < 10; i++)
 800538e:	230f      	movs	r3, #15
 8005390:	18fb      	adds	r3, r7, r3
 8005392:	2200      	movs	r2, #0
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	e00d      	b.n	80053b4 <main+0x114>
		  			{
		  				HAL_Delay(50);
 8005398:	2032      	movs	r0, #50	; 0x32
 800539a:	f7fa ff93 	bl	80002c4 <HAL_Delay>
		  				HAL_GPIO_TogglePin(McuLedVd_GPIO_Port, McuLedVd_Pin);
 800539e:	4b20      	ldr	r3, [pc, #128]	; (8005420 <main+0x180>)
 80053a0:	2104      	movs	r1, #4
 80053a2:	0018      	movs	r0, r3
 80053a4:	f7fb fe86 	bl	80010b4 <HAL_GPIO_TogglePin>
		  		for(i = 0; i < 10; i++)
 80053a8:	210f      	movs	r1, #15
 80053aa:	187b      	adds	r3, r7, r1
 80053ac:	781a      	ldrb	r2, [r3, #0]
 80053ae:	187b      	adds	r3, r7, r1
 80053b0:	3201      	adds	r2, #1
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	230f      	movs	r3, #15
 80053b6:	18fb      	adds	r3, r7, r3
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b09      	cmp	r3, #9
 80053bc:	d9ec      	bls.n	8005398 <main+0xf8>
		  			}
		  		HAL_GPIO_WritePin(McuLedVd_GPIO_Port, McuLedVd_Pin, GPIO_PIN_RESET);
 80053be:	4b18      	ldr	r3, [pc, #96]	; (8005420 <main+0x180>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	2104      	movs	r1, #4
 80053c4:	0018      	movs	r0, r3
 80053c6:	f7fb fe58 	bl	800107a <HAL_GPIO_WritePin>
		  	 }

		  	 if(ToReceive.u32v == 0x87654321)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a16      	ldr	r2, [pc, #88]	; (8005428 <main+0x188>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d1c5      	bne.n	800535e <main+0xbe>
		  			  	 {
		  		            ToReceive.u32v = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	607b      	str	r3, [r7, #4]
		  			  		for(i = 0; i < 5; i++)
 80053d6:	230f      	movs	r3, #15
 80053d8:	18fb      	adds	r3, r7, r3
 80053da:	2200      	movs	r2, #0
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	e00d      	b.n	80053fc <main+0x15c>
		  			  			{
		  			  				HAL_Delay(100);
 80053e0:	2064      	movs	r0, #100	; 0x64
 80053e2:	f7fa ff6f 	bl	80002c4 <HAL_Delay>
		  			  				HAL_GPIO_TogglePin(McuLedVd_GPIO_Port, McuLedVd_Pin);
 80053e6:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <main+0x180>)
 80053e8:	2104      	movs	r1, #4
 80053ea:	0018      	movs	r0, r3
 80053ec:	f7fb fe62 	bl	80010b4 <HAL_GPIO_TogglePin>
		  			  		for(i = 0; i < 5; i++)
 80053f0:	210f      	movs	r1, #15
 80053f2:	187b      	adds	r3, r7, r1
 80053f4:	781a      	ldrb	r2, [r3, #0]
 80053f6:	187b      	adds	r3, r7, r1
 80053f8:	3201      	adds	r2, #1
 80053fa:	701a      	strb	r2, [r3, #0]
 80053fc:	230f      	movs	r3, #15
 80053fe:	18fb      	adds	r3, r7, r3
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b04      	cmp	r3, #4
 8005404:	d9ec      	bls.n	80053e0 <main+0x140>
		  			  			}
		  			  		HAL_GPIO_WritePin(McuLedVd_GPIO_Port, McuLedVd_Pin, GPIO_PIN_RESET);
 8005406:	4b06      	ldr	r3, [pc, #24]	; (8005420 <main+0x180>)
 8005408:	2200      	movs	r2, #0
 800540a:	2104      	movs	r1, #4
 800540c:	0018      	movs	r0, r3
 800540e:	f7fb fe34 	bl	800107a <HAL_GPIO_WritePin>
	  Nrf905SetMode(eReadDataFromRxMode);
 8005412:	e7a4      	b.n	800535e <main+0xbe>
 8005414:	aaaaaaaa 	.word	0xaaaaaaaa
 8005418:	cccccccc 	.word	0xcccccccc
 800541c:	12345678 	.word	0x12345678
 8005420:	48000400 	.word	0x48000400
 8005424:	48000c00 	.word	0x48000c00
 8005428:	87654321 	.word	0x87654321

0800542c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800542c:	b590      	push	{r4, r7, lr}
 800542e:	b099      	sub	sp, #100	; 0x64
 8005430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005432:	242c      	movs	r4, #44	; 0x2c
 8005434:	193b      	adds	r3, r7, r4
 8005436:	0018      	movs	r0, r3
 8005438:	2334      	movs	r3, #52	; 0x34
 800543a:	001a      	movs	r2, r3
 800543c:	2100      	movs	r1, #0
 800543e:	f000 febb 	bl	80061b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005442:	231c      	movs	r3, #28
 8005444:	18fb      	adds	r3, r7, r3
 8005446:	0018      	movs	r0, r3
 8005448:	2310      	movs	r3, #16
 800544a:	001a      	movs	r2, r3
 800544c:	2100      	movs	r1, #0
 800544e:	f000 feb3 	bl	80061b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005452:	003b      	movs	r3, r7
 8005454:	0018      	movs	r0, r3
 8005456:	231c      	movs	r3, #28
 8005458:	001a      	movs	r2, r3
 800545a:	2100      	movs	r1, #0
 800545c:	f000 feac 	bl	80061b8 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8005460:	f7fb ff6a 	bl	8001338 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8005464:	4b23      	ldr	r3, [pc, #140]	; (80054f4 <SystemClock_Config+0xc8>)
 8005466:	6a1a      	ldr	r2, [r3, #32]
 8005468:	4b22      	ldr	r3, [pc, #136]	; (80054f4 <SystemClock_Config+0xc8>)
 800546a:	2118      	movs	r1, #24
 800546c:	430a      	orrs	r2, r1
 800546e:	621a      	str	r2, [r3, #32]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE;
 8005470:	0021      	movs	r1, r4
 8005472:	187b      	adds	r3, r7, r1
 8005474:	2224      	movs	r2, #36	; 0x24
 8005476:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005478:	187b      	adds	r3, r7, r1
 800547a:	2201      	movs	r2, #1
 800547c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800547e:	187b      	adds	r3, r7, r1
 8005480:	2201      	movs	r2, #1
 8005482:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005484:	187b      	adds	r3, r7, r1
 8005486:	2200      	movs	r2, #0
 8005488:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800548a:	187b      	adds	r3, r7, r1
 800548c:	0018      	movs	r0, r3
 800548e:	f7fb ff61 	bl	8001354 <HAL_RCC_OscConfig>
 8005492:	1e03      	subs	r3, r0, #0
 8005494:	d001      	beq.n	800549a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8005496:	f000 f841 	bl	800551c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800549a:	211c      	movs	r1, #28
 800549c:	187b      	adds	r3, r7, r1
 800549e:	2207      	movs	r2, #7
 80054a0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80054a2:	187b      	adds	r3, r7, r1
 80054a4:	2203      	movs	r2, #3
 80054a6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054a8:	187b      	adds	r3, r7, r1
 80054aa:	2200      	movs	r2, #0
 80054ac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80054ae:	187b      	adds	r3, r7, r1
 80054b0:	2200      	movs	r2, #0
 80054b2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80054b4:	187b      	adds	r3, r7, r1
 80054b6:	2101      	movs	r1, #1
 80054b8:	0018      	movs	r0, r3
 80054ba:	f7fc faab 	bl	8001a14 <HAL_RCC_ClockConfig>
 80054be:	1e03      	subs	r3, r0, #0
 80054c0:	d001      	beq.n	80054c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80054c2:	f000 f82b 	bl	800551c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_RTC;
 80054c6:	003b      	movs	r3, r7
 80054c8:	22a0      	movs	r2, #160	; 0xa0
 80054ca:	02d2      	lsls	r2, r2, #11
 80054cc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80054ce:	003b      	movs	r3, r7
 80054d0:	2200      	movs	r2, #0
 80054d2:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80054d4:	003b      	movs	r3, r7
 80054d6:	2280      	movs	r2, #128	; 0x80
 80054d8:	0052      	lsls	r2, r2, #1
 80054da:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054dc:	003b      	movs	r3, r7
 80054de:	0018      	movs	r0, r3
 80054e0:	f7fc fc6a 	bl	8001db8 <HAL_RCCEx_PeriphCLKConfig>
 80054e4:	1e03      	subs	r3, r0, #0
 80054e6:	d001      	beq.n	80054ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80054e8:	f000 f818 	bl	800551c <Error_Handler>
  }
}
 80054ec:	46c0      	nop			; (mov r8, r8)
 80054ee:	46bd      	mov	sp, r7
 80054f0:	b019      	add	sp, #100	; 0x64
 80054f2:	bd90      	pop	{r4, r7, pc}
 80054f4:	40021000 	.word	0x40021000

080054f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a04      	ldr	r2, [pc, #16]	; (8005518 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d101      	bne.n	800550e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800550a:	f7fa fec5 	bl	8000298 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	46bd      	mov	sp, r7
 8005512:	b002      	add	sp, #8
 8005514:	bd80      	pop	{r7, pc}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	40001000 	.word	0x40001000

0800551c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005520:	46c0      	nop			; (mov r8, r8)
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800552c:	4b0f      	ldr	r3, [pc, #60]	; (800556c <MX_RTC_Init+0x44>)
 800552e:	4a10      	ldr	r2, [pc, #64]	; (8005570 <MX_RTC_Init+0x48>)
 8005530:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005532:	4b0e      	ldr	r3, [pc, #56]	; (800556c <MX_RTC_Init+0x44>)
 8005534:	2200      	movs	r2, #0
 8005536:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005538:	4b0c      	ldr	r3, [pc, #48]	; (800556c <MX_RTC_Init+0x44>)
 800553a:	227f      	movs	r2, #127	; 0x7f
 800553c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800553e:	4b0b      	ldr	r3, [pc, #44]	; (800556c <MX_RTC_Init+0x44>)
 8005540:	22ff      	movs	r2, #255	; 0xff
 8005542:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005544:	4b09      	ldr	r3, [pc, #36]	; (800556c <MX_RTC_Init+0x44>)
 8005546:	2200      	movs	r2, #0
 8005548:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800554a:	4b08      	ldr	r3, [pc, #32]	; (800556c <MX_RTC_Init+0x44>)
 800554c:	2200      	movs	r2, #0
 800554e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <MX_RTC_Init+0x44>)
 8005552:	2200      	movs	r2, #0
 8005554:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005556:	4b05      	ldr	r3, [pc, #20]	; (800556c <MX_RTC_Init+0x44>)
 8005558:	0018      	movs	r0, r3
 800555a:	f7fc fd2f 	bl	8001fbc <HAL_RTC_Init>
 800555e:	1e03      	subs	r3, r0, #0
 8005560:	d001      	beq.n	8005566 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8005562:	f7ff ffdb 	bl	800551c <Error_Handler>
  }

}
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20000198 	.word	0x20000198
 8005570:	40002800 	.word	0x40002800

08005574 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a06      	ldr	r2, [pc, #24]	; (800559c <HAL_RTC_MspInit+0x28>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d106      	bne.n	8005594 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005586:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <HAL_RTC_MspInit+0x2c>)
 8005588:	6a1a      	ldr	r2, [r3, #32]
 800558a:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <HAL_RTC_MspInit+0x2c>)
 800558c:	2180      	movs	r1, #128	; 0x80
 800558e:	0209      	lsls	r1, r1, #8
 8005590:	430a      	orrs	r2, r1
 8005592:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005594:	46c0      	nop			; (mov r8, r8)
 8005596:	46bd      	mov	sp, r7
 8005598:	b002      	add	sp, #8
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40002800 	.word	0x40002800
 80055a0:	40021000 	.word	0x40021000

080055a4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80055a8:	4b1b      	ldr	r3, [pc, #108]	; (8005618 <MX_SPI1_Init+0x74>)
 80055aa:	4a1c      	ldr	r2, [pc, #112]	; (800561c <MX_SPI1_Init+0x78>)
 80055ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80055ae:	4b1a      	ldr	r3, [pc, #104]	; (8005618 <MX_SPI1_Init+0x74>)
 80055b0:	2282      	movs	r2, #130	; 0x82
 80055b2:	0052      	lsls	r2, r2, #1
 80055b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80055b6:	4b18      	ldr	r3, [pc, #96]	; (8005618 <MX_SPI1_Init+0x74>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80055bc:	4b16      	ldr	r3, [pc, #88]	; (8005618 <MX_SPI1_Init+0x74>)
 80055be:	22e0      	movs	r2, #224	; 0xe0
 80055c0:	00d2      	lsls	r2, r2, #3
 80055c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80055c4:	4b14      	ldr	r3, [pc, #80]	; (8005618 <MX_SPI1_Init+0x74>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80055ca:	4b13      	ldr	r3, [pc, #76]	; (8005618 <MX_SPI1_Init+0x74>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80055d0:	4b11      	ldr	r3, [pc, #68]	; (8005618 <MX_SPI1_Init+0x74>)
 80055d2:	2280      	movs	r2, #128	; 0x80
 80055d4:	0092      	lsls	r2, r2, #2
 80055d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80055d8:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <MX_SPI1_Init+0x74>)
 80055da:	2228      	movs	r2, #40	; 0x28
 80055dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80055de:	4b0e      	ldr	r3, [pc, #56]	; (8005618 <MX_SPI1_Init+0x74>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80055e4:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <MX_SPI1_Init+0x74>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055ea:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <MX_SPI1_Init+0x74>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80055f0:	4b09      	ldr	r3, [pc, #36]	; (8005618 <MX_SPI1_Init+0x74>)
 80055f2:	2207      	movs	r2, #7
 80055f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80055f6:	4b08      	ldr	r3, [pc, #32]	; (8005618 <MX_SPI1_Init+0x74>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80055fc:	4b06      	ldr	r3, [pc, #24]	; (8005618 <MX_SPI1_Init+0x74>)
 80055fe:	2208      	movs	r2, #8
 8005600:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005602:	4b05      	ldr	r3, [pc, #20]	; (8005618 <MX_SPI1_Init+0x74>)
 8005604:	0018      	movs	r0, r3
 8005606:	f7fc fdc3 	bl	8002190 <HAL_SPI_Init>
 800560a:	1e03      	subs	r3, r0, #0
 800560c:	d001      	beq.n	8005612 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800560e:	f7ff ff85 	bl	800551c <Error_Handler>
  }

}
 8005612:	46c0      	nop			; (mov r8, r8)
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	2000021c 	.word	0x2000021c
 800561c:	40013000 	.word	0x40013000

08005620 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8005624:	4b1b      	ldr	r3, [pc, #108]	; (8005694 <MX_SPI2_Init+0x74>)
 8005626:	4a1c      	ldr	r2, [pc, #112]	; (8005698 <MX_SPI2_Init+0x78>)
 8005628:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800562a:	4b1a      	ldr	r3, [pc, #104]	; (8005694 <MX_SPI2_Init+0x74>)
 800562c:	2282      	movs	r2, #130	; 0x82
 800562e:	0052      	lsls	r2, r2, #1
 8005630:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005632:	4b18      	ldr	r3, [pc, #96]	; (8005694 <MX_SPI2_Init+0x74>)
 8005634:	2200      	movs	r2, #0
 8005636:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005638:	4b16      	ldr	r3, [pc, #88]	; (8005694 <MX_SPI2_Init+0x74>)
 800563a:	22e0      	movs	r2, #224	; 0xe0
 800563c:	00d2      	lsls	r2, r2, #3
 800563e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005640:	4b14      	ldr	r3, [pc, #80]	; (8005694 <MX_SPI2_Init+0x74>)
 8005642:	2200      	movs	r2, #0
 8005644:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005646:	4b13      	ldr	r3, [pc, #76]	; (8005694 <MX_SPI2_Init+0x74>)
 8005648:	2200      	movs	r2, #0
 800564a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800564c:	4b11      	ldr	r3, [pc, #68]	; (8005694 <MX_SPI2_Init+0x74>)
 800564e:	2280      	movs	r2, #128	; 0x80
 8005650:	0092      	lsls	r2, r2, #2
 8005652:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005654:	4b0f      	ldr	r3, [pc, #60]	; (8005694 <MX_SPI2_Init+0x74>)
 8005656:	2210      	movs	r2, #16
 8005658:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800565a:	4b0e      	ldr	r3, [pc, #56]	; (8005694 <MX_SPI2_Init+0x74>)
 800565c:	2200      	movs	r2, #0
 800565e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005660:	4b0c      	ldr	r3, [pc, #48]	; (8005694 <MX_SPI2_Init+0x74>)
 8005662:	2200      	movs	r2, #0
 8005664:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005666:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <MX_SPI2_Init+0x74>)
 8005668:	2200      	movs	r2, #0
 800566a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800566c:	4b09      	ldr	r3, [pc, #36]	; (8005694 <MX_SPI2_Init+0x74>)
 800566e:	2207      	movs	r2, #7
 8005670:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005672:	4b08      	ldr	r3, [pc, #32]	; (8005694 <MX_SPI2_Init+0x74>)
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005678:	4b06      	ldr	r3, [pc, #24]	; (8005694 <MX_SPI2_Init+0x74>)
 800567a:	2208      	movs	r2, #8
 800567c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800567e:	4b05      	ldr	r3, [pc, #20]	; (8005694 <MX_SPI2_Init+0x74>)
 8005680:	0018      	movs	r0, r3
 8005682:	f7fc fd85 	bl	8002190 <HAL_SPI_Init>
 8005686:	1e03      	subs	r3, r0, #0
 8005688:	d001      	beq.n	800568e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800568a:	f7ff ff47 	bl	800551c <Error_Handler>
  }

}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	200001b8 	.word	0x200001b8
 8005698:	40003800 	.word	0x40003800

0800569c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08c      	sub	sp, #48	; 0x30
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056a4:	231c      	movs	r3, #28
 80056a6:	18fb      	adds	r3, r7, r3
 80056a8:	0018      	movs	r0, r3
 80056aa:	2314      	movs	r3, #20
 80056ac:	001a      	movs	r2, r3
 80056ae:	2100      	movs	r1, #0
 80056b0:	f000 fd82 	bl	80061b8 <memset>
  if(spiHandle->Instance==SPI1)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a38      	ldr	r2, [pc, #224]	; (800579c <HAL_SPI_MspInit+0x100>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d133      	bne.n	8005726 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80056be:	4b38      	ldr	r3, [pc, #224]	; (80057a0 <HAL_SPI_MspInit+0x104>)
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	4b37      	ldr	r3, [pc, #220]	; (80057a0 <HAL_SPI_MspInit+0x104>)
 80056c4:	2180      	movs	r1, #128	; 0x80
 80056c6:	0149      	lsls	r1, r1, #5
 80056c8:	430a      	orrs	r2, r1
 80056ca:	619a      	str	r2, [r3, #24]
 80056cc:	4b34      	ldr	r3, [pc, #208]	; (80057a0 <HAL_SPI_MspInit+0x104>)
 80056ce:	699a      	ldr	r2, [r3, #24]
 80056d0:	2380      	movs	r3, #128	; 0x80
 80056d2:	015b      	lsls	r3, r3, #5
 80056d4:	4013      	ands	r3, r2
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80056da:	4b31      	ldr	r3, [pc, #196]	; (80057a0 <HAL_SPI_MspInit+0x104>)
 80056dc:	695a      	ldr	r2, [r3, #20]
 80056de:	4b30      	ldr	r3, [pc, #192]	; (80057a0 <HAL_SPI_MspInit+0x104>)
 80056e0:	2180      	movs	r1, #128	; 0x80
 80056e2:	0389      	lsls	r1, r1, #14
 80056e4:	430a      	orrs	r2, r1
 80056e6:	615a      	str	r2, [r3, #20]
 80056e8:	4b2d      	ldr	r3, [pc, #180]	; (80057a0 <HAL_SPI_MspInit+0x104>)
 80056ea:	695a      	ldr	r2, [r3, #20]
 80056ec:	2380      	movs	r3, #128	; 0x80
 80056ee:	039b      	lsls	r3, r3, #14
 80056f0:	4013      	ands	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = McuNordicSck_Pin|McuNordicMiso_Pin|McuNordicMosi_Pin;
 80056f6:	211c      	movs	r1, #28
 80056f8:	187b      	adds	r3, r7, r1
 80056fa:	22e0      	movs	r2, #224	; 0xe0
 80056fc:	0212      	lsls	r2, r2, #8
 80056fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005700:	187b      	adds	r3, r7, r1
 8005702:	2202      	movs	r2, #2
 8005704:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005706:	187b      	adds	r3, r7, r1
 8005708:	2200      	movs	r2, #0
 800570a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800570c:	187b      	adds	r3, r7, r1
 800570e:	2203      	movs	r2, #3
 8005710:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8005712:	187b      	adds	r3, r7, r1
 8005714:	2201      	movs	r2, #1
 8005716:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005718:	187b      	adds	r3, r7, r1
 800571a:	4a22      	ldr	r2, [pc, #136]	; (80057a4 <HAL_SPI_MspInit+0x108>)
 800571c:	0019      	movs	r1, r3
 800571e:	0010      	movs	r0, r2
 8005720:	f7fb fb12 	bl	8000d48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005724:	e036      	b.n	8005794 <HAL_SPI_MspInit+0xf8>
  else if(spiHandle->Instance==SPI2)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a1f      	ldr	r2, [pc, #124]	; (80057a8 <HAL_SPI_MspInit+0x10c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d131      	bne.n	8005794 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005730:	4b1b      	ldr	r3, [pc, #108]	; (80057a0 <HAL_SPI_MspInit+0x104>)
 8005732:	69da      	ldr	r2, [r3, #28]
 8005734:	4b1a      	ldr	r3, [pc, #104]	; (80057a0 <HAL_SPI_MspInit+0x104>)
 8005736:	2180      	movs	r1, #128	; 0x80
 8005738:	01c9      	lsls	r1, r1, #7
 800573a:	430a      	orrs	r2, r1
 800573c:	61da      	str	r2, [r3, #28]
 800573e:	4b18      	ldr	r3, [pc, #96]	; (80057a0 <HAL_SPI_MspInit+0x104>)
 8005740:	69da      	ldr	r2, [r3, #28]
 8005742:	2380      	movs	r3, #128	; 0x80
 8005744:	01db      	lsls	r3, r3, #7
 8005746:	4013      	ands	r3, r2
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800574c:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <HAL_SPI_MspInit+0x104>)
 800574e:	695a      	ldr	r2, [r3, #20]
 8005750:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <HAL_SPI_MspInit+0x104>)
 8005752:	2180      	movs	r1, #128	; 0x80
 8005754:	0349      	lsls	r1, r1, #13
 8005756:	430a      	orrs	r2, r1
 8005758:	615a      	str	r2, [r3, #20]
 800575a:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <HAL_SPI_MspInit+0x104>)
 800575c:	695a      	ldr	r2, [r3, #20]
 800575e:	2380      	movs	r3, #128	; 0x80
 8005760:	035b      	lsls	r3, r3, #13
 8005762:	4013      	ands	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = McuFlashSck_Pin|McuFlashMiso_Pin|McuFlashMosi_Pin;
 8005768:	211c      	movs	r1, #28
 800576a:	187b      	adds	r3, r7, r1
 800576c:	221a      	movs	r2, #26
 800576e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005770:	187b      	adds	r3, r7, r1
 8005772:	2202      	movs	r2, #2
 8005774:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005776:	187b      	adds	r3, r7, r1
 8005778:	2200      	movs	r2, #0
 800577a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800577c:	187b      	adds	r3, r7, r1
 800577e:	2203      	movs	r2, #3
 8005780:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8005782:	187b      	adds	r3, r7, r1
 8005784:	2201      	movs	r2, #1
 8005786:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005788:	187b      	adds	r3, r7, r1
 800578a:	4a08      	ldr	r2, [pc, #32]	; (80057ac <HAL_SPI_MspInit+0x110>)
 800578c:	0019      	movs	r1, r3
 800578e:	0010      	movs	r0, r2
 8005790:	f7fb fada 	bl	8000d48 <HAL_GPIO_Init>
}
 8005794:	46c0      	nop			; (mov r8, r8)
 8005796:	46bd      	mov	sp, r7
 8005798:	b00c      	add	sp, #48	; 0x30
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40013000 	.word	0x40013000
 80057a0:	40021000 	.word	0x40021000
 80057a4:	48001000 	.word	0x48001000
 80057a8:	40003800 	.word	0x40003800
 80057ac:	48000c00 	.word	0x48000c00

080057b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057b6:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <HAL_MspInit+0x44>)
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	4b0e      	ldr	r3, [pc, #56]	; (80057f4 <HAL_MspInit+0x44>)
 80057bc:	2101      	movs	r1, #1
 80057be:	430a      	orrs	r2, r1
 80057c0:	619a      	str	r2, [r3, #24]
 80057c2:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <HAL_MspInit+0x44>)
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	2201      	movs	r2, #1
 80057c8:	4013      	ands	r3, r2
 80057ca:	607b      	str	r3, [r7, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057ce:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <HAL_MspInit+0x44>)
 80057d0:	69da      	ldr	r2, [r3, #28]
 80057d2:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <HAL_MspInit+0x44>)
 80057d4:	2180      	movs	r1, #128	; 0x80
 80057d6:	0549      	lsls	r1, r1, #21
 80057d8:	430a      	orrs	r2, r1
 80057da:	61da      	str	r2, [r3, #28]
 80057dc:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <HAL_MspInit+0x44>)
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	2380      	movs	r3, #128	; 0x80
 80057e2:	055b      	lsls	r3, r3, #21
 80057e4:	4013      	ands	r3, r2
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	46bd      	mov	sp, r7
 80057ee:	b002      	add	sp, #8
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	46c0      	nop			; (mov r8, r8)
 80057f4:	40021000 	.word	0x40021000

080057f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08a      	sub	sp, #40	; 0x28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005800:	2300      	movs	r3, #0
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	0019      	movs	r1, r3
 800580e:	2011      	movs	r0, #17
 8005810:	f7fb f944 	bl	8000a9c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8005814:	2011      	movs	r0, #17
 8005816:	f7fb f956 	bl	8000ac6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800581a:	4b20      	ldr	r3, [pc, #128]	; (800589c <HAL_InitTick+0xa4>)
 800581c:	69da      	ldr	r2, [r3, #28]
 800581e:	4b1f      	ldr	r3, [pc, #124]	; (800589c <HAL_InitTick+0xa4>)
 8005820:	2110      	movs	r1, #16
 8005822:	430a      	orrs	r2, r1
 8005824:	61da      	str	r2, [r3, #28]
 8005826:	4b1d      	ldr	r3, [pc, #116]	; (800589c <HAL_InitTick+0xa4>)
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	2210      	movs	r2, #16
 800582c:	4013      	ands	r3, r2
 800582e:	60bb      	str	r3, [r7, #8]
 8005830:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005832:	230c      	movs	r3, #12
 8005834:	18fa      	adds	r2, r7, r3
 8005836:	2310      	movs	r3, #16
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	0011      	movs	r1, r2
 800583c:	0018      	movs	r0, r3
 800583e:	f7fc fa91 	bl	8001d64 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005842:	f7fc fa79 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
 8005846:	0003      	movs	r3, r0
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	4914      	ldr	r1, [pc, #80]	; (80058a0 <HAL_InitTick+0xa8>)
 800584e:	0018      	movs	r0, r3
 8005850:	f7fa fc58 	bl	8000104 <__udivsi3>
 8005854:	0003      	movs	r3, r0
 8005856:	3b01      	subs	r3, #1
 8005858:	623b      	str	r3, [r7, #32]
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800585a:	4b12      	ldr	r3, [pc, #72]	; (80058a4 <HAL_InitTick+0xac>)
 800585c:	4a12      	ldr	r2, [pc, #72]	; (80058a8 <HAL_InitTick+0xb0>)
 800585e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8005860:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <HAL_InitTick+0xac>)
 8005862:	4a12      	ldr	r2, [pc, #72]	; (80058ac <HAL_InitTick+0xb4>)
 8005864:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005866:	4b0f      	ldr	r3, [pc, #60]	; (80058a4 <HAL_InitTick+0xac>)
 8005868:	6a3a      	ldr	r2, [r7, #32]
 800586a:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 800586c:	4b0d      	ldr	r3, [pc, #52]	; (80058a4 <HAL_InitTick+0xac>)
 800586e:	2200      	movs	r2, #0
 8005870:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005872:	4b0c      	ldr	r3, [pc, #48]	; (80058a4 <HAL_InitTick+0xac>)
 8005874:	2200      	movs	r2, #0
 8005876:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005878:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <HAL_InitTick+0xac>)
 800587a:	0018      	movs	r0, r3
 800587c:	f7fd fb6c 	bl	8002f58 <HAL_TIM_Base_Init>
 8005880:	1e03      	subs	r3, r0, #0
 8005882:	d105      	bne.n	8005890 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005884:	4b07      	ldr	r3, [pc, #28]	; (80058a4 <HAL_InitTick+0xac>)
 8005886:	0018      	movs	r0, r3
 8005888:	f7fd fb9a 	bl	8002fc0 <HAL_TIM_Base_Start_IT>
 800588c:	0003      	movs	r3, r0
 800588e:	e000      	b.n	8005892 <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
}
 8005892:	0018      	movs	r0, r3
 8005894:	46bd      	mov	sp, r7
 8005896:	b00a      	add	sp, #40	; 0x28
 8005898:	bd80      	pop	{r7, pc}
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	40021000 	.word	0x40021000
 80058a0:	000f4240 	.word	0x000f4240
 80058a4:	20000280 	.word	0x20000280
 80058a8:	40001000 	.word	0x40001000
 80058ac:	000003e7 	.word	0x000003e7

080058b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80058b4:	46c0      	nop			; (mov r8, r8)
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058be:	e7fe      	b.n	80058be <HardFault_Handler+0x4>

080058c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80058c4:	46c0      	nop			; (mov r8, r8)
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80058ce:	46c0      	nop			; (mov r8, r8)
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80058d8:	46c0      	nop			; (mov r8, r8)
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80058e4:	4b03      	ldr	r3, [pc, #12]	; (80058f4 <DMA1_Ch1_IRQHandler+0x14>)
 80058e6:	0018      	movs	r0, r3
 80058e8:	f7fb f952 	bl	8000b90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 80058ec:	46c0      	nop			; (mov r8, r8)
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	20000094 	.word	0x20000094

080058f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80058fc:	4b03      	ldr	r3, [pc, #12]	; (800590c <TIM6_DAC_IRQHandler+0x14>)
 80058fe:	0018      	movs	r0, r3
 8005900:	f7fd fbcf 	bl	80030a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005904:	46c0      	nop			; (mov r8, r8)
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	20000280 	.word	0x20000280

08005910 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005918:	4b11      	ldr	r3, [pc, #68]	; (8005960 <_sbrk+0x50>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d102      	bne.n	8005926 <_sbrk+0x16>
		heap_end = &end;
 8005920:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <_sbrk+0x50>)
 8005922:	4a10      	ldr	r2, [pc, #64]	; (8005964 <_sbrk+0x54>)
 8005924:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005926:	4b0e      	ldr	r3, [pc, #56]	; (8005960 <_sbrk+0x50>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800592c:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <_sbrk+0x50>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	18d3      	adds	r3, r2, r3
 8005934:	466a      	mov	r2, sp
 8005936:	4293      	cmp	r3, r2
 8005938:	d907      	bls.n	800594a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800593a:	f000 fc13 	bl	8006164 <__errno>
 800593e:	0003      	movs	r3, r0
 8005940:	220c      	movs	r2, #12
 8005942:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005944:	2301      	movs	r3, #1
 8005946:	425b      	negs	r3, r3
 8005948:	e006      	b.n	8005958 <_sbrk+0x48>
	}

	heap_end += incr;
 800594a:	4b05      	ldr	r3, [pc, #20]	; (8005960 <_sbrk+0x50>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	18d2      	adds	r2, r2, r3
 8005952:	4b03      	ldr	r3, [pc, #12]	; (8005960 <_sbrk+0x50>)
 8005954:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8005956:	68fb      	ldr	r3, [r7, #12]
}
 8005958:	0018      	movs	r0, r3
 800595a:	46bd      	mov	sp, r7
 800595c:	b004      	add	sp, #16
 800595e:	bd80      	pop	{r7, pc}
 8005960:	20000084 	.word	0x20000084
 8005964:	20000468 	.word	0x20000468

08005968 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800596c:	4b1a      	ldr	r3, [pc, #104]	; (80059d8 <SystemInit+0x70>)
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	4b19      	ldr	r3, [pc, #100]	; (80059d8 <SystemInit+0x70>)
 8005972:	2101      	movs	r1, #1
 8005974:	430a      	orrs	r2, r1
 8005976:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8005978:	4b17      	ldr	r3, [pc, #92]	; (80059d8 <SystemInit+0x70>)
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	4b16      	ldr	r3, [pc, #88]	; (80059d8 <SystemInit+0x70>)
 800597e:	4917      	ldr	r1, [pc, #92]	; (80059dc <SystemInit+0x74>)
 8005980:	400a      	ands	r2, r1
 8005982:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8005984:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <SystemInit+0x70>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	4b13      	ldr	r3, [pc, #76]	; (80059d8 <SystemInit+0x70>)
 800598a:	4915      	ldr	r1, [pc, #84]	; (80059e0 <SystemInit+0x78>)
 800598c:	400a      	ands	r2, r1
 800598e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8005990:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <SystemInit+0x70>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	4b10      	ldr	r3, [pc, #64]	; (80059d8 <SystemInit+0x70>)
 8005996:	4913      	ldr	r1, [pc, #76]	; (80059e4 <SystemInit+0x7c>)
 8005998:	400a      	ands	r2, r1
 800599a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800599c:	4b0e      	ldr	r3, [pc, #56]	; (80059d8 <SystemInit+0x70>)
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	4b0d      	ldr	r3, [pc, #52]	; (80059d8 <SystemInit+0x70>)
 80059a2:	4911      	ldr	r1, [pc, #68]	; (80059e8 <SystemInit+0x80>)
 80059a4:	400a      	ands	r2, r1
 80059a6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80059a8:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <SystemInit+0x70>)
 80059aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ac:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <SystemInit+0x70>)
 80059ae:	210f      	movs	r1, #15
 80059b0:	438a      	bics	r2, r1
 80059b2:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 80059b4:	4b08      	ldr	r3, [pc, #32]	; (80059d8 <SystemInit+0x70>)
 80059b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059b8:	4b07      	ldr	r3, [pc, #28]	; (80059d8 <SystemInit+0x70>)
 80059ba:	490c      	ldr	r1, [pc, #48]	; (80059ec <SystemInit+0x84>)
 80059bc:	400a      	ands	r2, r1
 80059be:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80059c0:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <SystemInit+0x70>)
 80059c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059c4:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <SystemInit+0x70>)
 80059c6:	2101      	movs	r1, #1
 80059c8:	438a      	bics	r2, r1
 80059ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80059cc:	4b02      	ldr	r3, [pc, #8]	; (80059d8 <SystemInit+0x70>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	609a      	str	r2, [r3, #8]

}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40021000 	.word	0x40021000
 80059dc:	08ffb80c 	.word	0x08ffb80c
 80059e0:	fef6ffff 	.word	0xfef6ffff
 80059e4:	fffbffff 	.word	0xfffbffff
 80059e8:	ffc0ffff 	.word	0xffc0ffff
 80059ec:	fff0feac 	.word	0xfff0feac

080059f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b090      	sub	sp, #64	; 0x40
 80059f4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059f6:	2338      	movs	r3, #56	; 0x38
 80059f8:	18fb      	adds	r3, r7, r3
 80059fa:	0018      	movs	r0, r3
 80059fc:	2308      	movs	r3, #8
 80059fe:	001a      	movs	r2, r3
 8005a00:	2100      	movs	r1, #0
 8005a02:	f000 fbd9 	bl	80061b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a06:	231c      	movs	r3, #28
 8005a08:	18fb      	adds	r3, r7, r3
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	231c      	movs	r3, #28
 8005a0e:	001a      	movs	r2, r3
 8005a10:	2100      	movs	r1, #0
 8005a12:	f000 fbd1 	bl	80061b8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005a16:	003b      	movs	r3, r7
 8005a18:	0018      	movs	r0, r3
 8005a1a:	231c      	movs	r3, #28
 8005a1c:	001a      	movs	r2, r3
 8005a1e:	2100      	movs	r1, #0
 8005a20:	f000 fbca 	bl	80061b8 <memset>

  htim1.Instance = TIM1;
 8005a24:	4b4b      	ldr	r3, [pc, #300]	; (8005b54 <MX_TIM1_Init+0x164>)
 8005a26:	4a4c      	ldr	r2, [pc, #304]	; (8005b58 <MX_TIM1_Init+0x168>)
 8005a28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48;
 8005a2a:	4b4a      	ldr	r3, [pc, #296]	; (8005b54 <MX_TIM1_Init+0x164>)
 8005a2c:	2230      	movs	r2, #48	; 0x30
 8005a2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a30:	4b48      	ldr	r3, [pc, #288]	; (8005b54 <MX_TIM1_Init+0x164>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8005a36:	4b47      	ldr	r3, [pc, #284]	; (8005b54 <MX_TIM1_Init+0x164>)
 8005a38:	22fa      	movs	r2, #250	; 0xfa
 8005a3a:	0092      	lsls	r2, r2, #2
 8005a3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a3e:	4b45      	ldr	r3, [pc, #276]	; (8005b54 <MX_TIM1_Init+0x164>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005a44:	4b43      	ldr	r3, [pc, #268]	; (8005b54 <MX_TIM1_Init+0x164>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a4a:	4b42      	ldr	r3, [pc, #264]	; (8005b54 <MX_TIM1_Init+0x164>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005a50:	4b40      	ldr	r3, [pc, #256]	; (8005b54 <MX_TIM1_Init+0x164>)
 8005a52:	0018      	movs	r0, r3
 8005a54:	f7fd faf9 	bl	800304a <HAL_TIM_PWM_Init>
 8005a58:	1e03      	subs	r3, r0, #0
 8005a5a:	d001      	beq.n	8005a60 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8005a5c:	f7ff fd5e 	bl	800551c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a60:	2138      	movs	r1, #56	; 0x38
 8005a62:	187b      	adds	r3, r7, r1
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a68:	187b      	adds	r3, r7, r1
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005a6e:	187a      	adds	r2, r7, r1
 8005a70:	4b38      	ldr	r3, [pc, #224]	; (8005b54 <MX_TIM1_Init+0x164>)
 8005a72:	0011      	movs	r1, r2
 8005a74:	0018      	movs	r0, r3
 8005a76:	f7fd ffe7 	bl	8003a48 <HAL_TIMEx_MasterConfigSynchronization>
 8005a7a:	1e03      	subs	r3, r0, #0
 8005a7c:	d001      	beq.n	8005a82 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8005a7e:	f7ff fd4d 	bl	800551c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a82:	211c      	movs	r1, #28
 8005a84:	187b      	adds	r3, r7, r1
 8005a86:	2260      	movs	r2, #96	; 0x60
 8005a88:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8005a8a:	187b      	adds	r3, r7, r1
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a90:	187b      	adds	r3, r7, r1
 8005a92:	2200      	movs	r2, #0
 8005a94:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005a96:	187b      	adds	r3, r7, r1
 8005a98:	2200      	movs	r2, #0
 8005a9a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a9c:	187b      	adds	r3, r7, r1
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005aa2:	187b      	adds	r3, r7, r1
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005aa8:	187b      	adds	r3, r7, r1
 8005aaa:	2200      	movs	r2, #0
 8005aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005aae:	1879      	adds	r1, r7, r1
 8005ab0:	4b28      	ldr	r3, [pc, #160]	; (8005b54 <MX_TIM1_Init+0x164>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f7fd fc59 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
 8005aba:	1e03      	subs	r3, r0, #0
 8005abc:	d001      	beq.n	8005ac2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8005abe:	f7ff fd2d 	bl	800551c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005ac2:	231c      	movs	r3, #28
 8005ac4:	18f9      	adds	r1, r7, r3
 8005ac6:	4b23      	ldr	r3, [pc, #140]	; (8005b54 <MX_TIM1_Init+0x164>)
 8005ac8:	2204      	movs	r2, #4
 8005aca:	0018      	movs	r0, r3
 8005acc:	f7fd fc4e 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
 8005ad0:	1e03      	subs	r3, r0, #0
 8005ad2:	d001      	beq.n	8005ad8 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8005ad4:	f7ff fd22 	bl	800551c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005ad8:	231c      	movs	r3, #28
 8005ada:	18f9      	adds	r1, r7, r3
 8005adc:	4b1d      	ldr	r3, [pc, #116]	; (8005b54 <MX_TIM1_Init+0x164>)
 8005ade:	2208      	movs	r2, #8
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f7fd fc43 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
 8005ae6:	1e03      	subs	r3, r0, #0
 8005ae8:	d001      	beq.n	8005aee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8005aea:	f7ff fd17 	bl	800551c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005aee:	231c      	movs	r3, #28
 8005af0:	18f9      	adds	r1, r7, r3
 8005af2:	4b18      	ldr	r3, [pc, #96]	; (8005b54 <MX_TIM1_Init+0x164>)
 8005af4:	220c      	movs	r2, #12
 8005af6:	0018      	movs	r0, r3
 8005af8:	f7fd fc38 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
 8005afc:	1e03      	subs	r3, r0, #0
 8005afe:	d001      	beq.n	8005b04 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8005b00:	f7ff fd0c 	bl	800551c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b04:	003b      	movs	r3, r7
 8005b06:	2200      	movs	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005b0a:	003b      	movs	r3, r7
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005b10:	003b      	movs	r3, r7
 8005b12:	2200      	movs	r2, #0
 8005b14:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005b16:	003b      	movs	r3, r7
 8005b18:	2200      	movs	r2, #0
 8005b1a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005b1c:	003b      	movs	r3, r7
 8005b1e:	2200      	movs	r2, #0
 8005b20:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b22:	003b      	movs	r3, r7
 8005b24:	2280      	movs	r2, #128	; 0x80
 8005b26:	0192      	lsls	r2, r2, #6
 8005b28:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005b2a:	003b      	movs	r3, r7
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005b30:	003a      	movs	r2, r7
 8005b32:	4b08      	ldr	r3, [pc, #32]	; (8005b54 <MX_TIM1_Init+0x164>)
 8005b34:	0011      	movs	r1, r2
 8005b36:	0018      	movs	r0, r3
 8005b38:	f7fd ffca 	bl	8003ad0 <HAL_TIMEx_ConfigBreakDeadTime>
 8005b3c:	1e03      	subs	r3, r0, #0
 8005b3e:	d001      	beq.n	8005b44 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 8005b40:	f7ff fcec 	bl	800551c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8005b44:	4b03      	ldr	r3, [pc, #12]	; (8005b54 <MX_TIM1_Init+0x164>)
 8005b46:	0018      	movs	r0, r3
 8005b48:	f000 f936 	bl	8005db8 <HAL_TIM_MspPostInit>

}
 8005b4c:	46c0      	nop			; (mov r8, r8)
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	b010      	add	sp, #64	; 0x40
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	20000300 	.word	0x20000300
 8005b58:	40012c00 	.word	0x40012c00

08005b5c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08a      	sub	sp, #40	; 0x28
 8005b60:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b62:	2320      	movs	r3, #32
 8005b64:	18fb      	adds	r3, r7, r3
 8005b66:	0018      	movs	r0, r3
 8005b68:	2308      	movs	r3, #8
 8005b6a:	001a      	movs	r2, r3
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	f000 fb23 	bl	80061b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b72:	1d3b      	adds	r3, r7, #4
 8005b74:	0018      	movs	r0, r3
 8005b76:	231c      	movs	r3, #28
 8005b78:	001a      	movs	r2, r3
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	f000 fb1c 	bl	80061b8 <memset>

  htim2.Instance = TIM2;
 8005b80:	4b34      	ldr	r3, [pc, #208]	; (8005c54 <MX_TIM2_Init+0xf8>)
 8005b82:	2280      	movs	r2, #128	; 0x80
 8005b84:	05d2      	lsls	r2, r2, #23
 8005b86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8005b88:	4b32      	ldr	r3, [pc, #200]	; (8005c54 <MX_TIM2_Init+0xf8>)
 8005b8a:	2230      	movs	r2, #48	; 0x30
 8005b8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b8e:	4b31      	ldr	r3, [pc, #196]	; (8005c54 <MX_TIM2_Init+0xf8>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8005b94:	4b2f      	ldr	r3, [pc, #188]	; (8005c54 <MX_TIM2_Init+0xf8>)
 8005b96:	22fa      	movs	r2, #250	; 0xfa
 8005b98:	0092      	lsls	r2, r2, #2
 8005b9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b9c:	4b2d      	ldr	r3, [pc, #180]	; (8005c54 <MX_TIM2_Init+0xf8>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ba2:	4b2c      	ldr	r3, [pc, #176]	; (8005c54 <MX_TIM2_Init+0xf8>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005ba8:	4b2a      	ldr	r3, [pc, #168]	; (8005c54 <MX_TIM2_Init+0xf8>)
 8005baa:	0018      	movs	r0, r3
 8005bac:	f7fd fa4d 	bl	800304a <HAL_TIM_PWM_Init>
 8005bb0:	1e03      	subs	r3, r0, #0
 8005bb2:	d001      	beq.n	8005bb8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8005bb4:	f7ff fcb2 	bl	800551c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bb8:	2120      	movs	r1, #32
 8005bba:	187b      	adds	r3, r7, r1
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bc0:	187b      	adds	r3, r7, r1
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005bc6:	187a      	adds	r2, r7, r1
 8005bc8:	4b22      	ldr	r3, [pc, #136]	; (8005c54 <MX_TIM2_Init+0xf8>)
 8005bca:	0011      	movs	r1, r2
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f7fd ff3b 	bl	8003a48 <HAL_TIMEx_MasterConfigSynchronization>
 8005bd2:	1e03      	subs	r3, r0, #0
 8005bd4:	d001      	beq.n	8005bda <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005bd6:	f7ff fca1 	bl	800551c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005bda:	1d3b      	adds	r3, r7, #4
 8005bdc:	2260      	movs	r2, #96	; 0x60
 8005bde:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8005be0:	1d3b      	adds	r3, r7, #4
 8005be2:	2200      	movs	r2, #0
 8005be4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005be6:	1d3b      	adds	r3, r7, #4
 8005be8:	2200      	movs	r2, #0
 8005bea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005bec:	1d3b      	adds	r3, r7, #4
 8005bee:	2200      	movs	r2, #0
 8005bf0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005bf2:	1d39      	adds	r1, r7, #4
 8005bf4:	4b17      	ldr	r3, [pc, #92]	; (8005c54 <MX_TIM2_Init+0xf8>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f7fd fbb7 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
 8005bfe:	1e03      	subs	r3, r0, #0
 8005c00:	d001      	beq.n	8005c06 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8005c02:	f7ff fc8b 	bl	800551c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005c06:	1d39      	adds	r1, r7, #4
 8005c08:	4b12      	ldr	r3, [pc, #72]	; (8005c54 <MX_TIM2_Init+0xf8>)
 8005c0a:	2204      	movs	r2, #4
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f7fd fbad 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
 8005c12:	1e03      	subs	r3, r0, #0
 8005c14:	d001      	beq.n	8005c1a <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8005c16:	f7ff fc81 	bl	800551c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005c1a:	1d39      	adds	r1, r7, #4
 8005c1c:	4b0d      	ldr	r3, [pc, #52]	; (8005c54 <MX_TIM2_Init+0xf8>)
 8005c1e:	2208      	movs	r2, #8
 8005c20:	0018      	movs	r0, r3
 8005c22:	f7fd fba3 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
 8005c26:	1e03      	subs	r3, r0, #0
 8005c28:	d001      	beq.n	8005c2e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8005c2a:	f7ff fc77 	bl	800551c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005c2e:	1d39      	adds	r1, r7, #4
 8005c30:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <MX_TIM2_Init+0xf8>)
 8005c32:	220c      	movs	r2, #12
 8005c34:	0018      	movs	r0, r3
 8005c36:	f7fd fb99 	bl	800336c <HAL_TIM_PWM_ConfigChannel>
 8005c3a:	1e03      	subs	r3, r0, #0
 8005c3c:	d001      	beq.n	8005c42 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8005c3e:	f7ff fc6d 	bl	800551c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8005c42:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <MX_TIM2_Init+0xf8>)
 8005c44:	0018      	movs	r0, r3
 8005c46:	f000 f8b7 	bl	8005db8 <HAL_TIM_MspPostInit>

}
 8005c4a:	46c0      	nop			; (mov r8, r8)
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	b00a      	add	sp, #40	; 0x28
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	20000340 	.word	0x20000340

08005c58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08a      	sub	sp, #40	; 0x28
 8005c5c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c5e:	2320      	movs	r3, #32
 8005c60:	18fb      	adds	r3, r7, r3
 8005c62:	0018      	movs	r0, r3
 8005c64:	2308      	movs	r3, #8
 8005c66:	001a      	movs	r2, r3
 8005c68:	2100      	movs	r1, #0
 8005c6a:	f000 faa5 	bl	80061b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c6e:	1d3b      	adds	r3, r7, #4
 8005c70:	0018      	movs	r0, r3
 8005c72:	231c      	movs	r3, #28
 8005c74:	001a      	movs	r2, r3
 8005c76:	2100      	movs	r1, #0
 8005c78:	f000 fa9e 	bl	80061b8 <memset>

  htim3.Instance = TIM3;
 8005c7c:	4b24      	ldr	r3, [pc, #144]	; (8005d10 <MX_TIM3_Init+0xb8>)
 8005c7e:	4a25      	ldr	r2, [pc, #148]	; (8005d14 <MX_TIM3_Init+0xbc>)
 8005c80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 8005c82:	4b23      	ldr	r3, [pc, #140]	; (8005d10 <MX_TIM3_Init+0xb8>)
 8005c84:	2230      	movs	r2, #48	; 0x30
 8005c86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c88:	4b21      	ldr	r3, [pc, #132]	; (8005d10 <MX_TIM3_Init+0xb8>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8005c8e:	4b20      	ldr	r3, [pc, #128]	; (8005d10 <MX_TIM3_Init+0xb8>)
 8005c90:	22fa      	movs	r2, #250	; 0xfa
 8005c92:	0092      	lsls	r2, r2, #2
 8005c94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c96:	4b1e      	ldr	r3, [pc, #120]	; (8005d10 <MX_TIM3_Init+0xb8>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c9c:	4b1c      	ldr	r3, [pc, #112]	; (8005d10 <MX_TIM3_Init+0xb8>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8005ca2:	4b1b      	ldr	r3, [pc, #108]	; (8005d10 <MX_TIM3_Init+0xb8>)
 8005ca4:	0018      	movs	r0, r3
 8005ca6:	f7fd f9a4 	bl	8002ff2 <HAL_TIM_OC_Init>
 8005caa:	1e03      	subs	r3, r0, #0
 8005cac:	d001      	beq.n	8005cb2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8005cae:	f7ff fc35 	bl	800551c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cb2:	2120      	movs	r1, #32
 8005cb4:	187b      	adds	r3, r7, r1
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cba:	187b      	adds	r3, r7, r1
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005cc0:	187a      	adds	r2, r7, r1
 8005cc2:	4b13      	ldr	r3, [pc, #76]	; (8005d10 <MX_TIM3_Init+0xb8>)
 8005cc4:	0011      	movs	r1, r2
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f7fd febe 	bl	8003a48 <HAL_TIMEx_MasterConfigSynchronization>
 8005ccc:	1e03      	subs	r3, r0, #0
 8005cce:	d001      	beq.n	8005cd4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005cd0:	f7ff fc24 	bl	800551c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005cd4:	1d3b      	adds	r3, r7, #4
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8005cda:	1d3b      	adds	r3, r7, #4
 8005cdc:	2200      	movs	r2, #0
 8005cde:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ce0:	1d3b      	adds	r3, r7, #4
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ce6:	1d3b      	adds	r3, r7, #4
 8005ce8:	2200      	movs	r2, #0
 8005cea:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005cec:	1d39      	adds	r1, r7, #4
 8005cee:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <MX_TIM3_Init+0xb8>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f7fd faeb 	bl	80032ce <HAL_TIM_OC_ConfigChannel>
 8005cf8:	1e03      	subs	r3, r0, #0
 8005cfa:	d001      	beq.n	8005d00 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8005cfc:	f7ff fc0e 	bl	800551c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8005d00:	4b03      	ldr	r3, [pc, #12]	; (8005d10 <MX_TIM3_Init+0xb8>)
 8005d02:	0018      	movs	r0, r3
 8005d04:	f000 f858 	bl	8005db8 <HAL_TIM_MspPostInit>

}
 8005d08:	46c0      	nop			; (mov r8, r8)
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	b00a      	add	sp, #40	; 0x28
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	200002c0 	.word	0x200002c0
 8005d14:	40000400 	.word	0x40000400

08005d18 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a13      	ldr	r2, [pc, #76]	; (8005d74 <HAL_TIM_PWM_MspInit+0x5c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d10e      	bne.n	8005d48 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005d2a:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <HAL_TIM_PWM_MspInit+0x60>)
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	4b12      	ldr	r3, [pc, #72]	; (8005d78 <HAL_TIM_PWM_MspInit+0x60>)
 8005d30:	2180      	movs	r1, #128	; 0x80
 8005d32:	0109      	lsls	r1, r1, #4
 8005d34:	430a      	orrs	r2, r1
 8005d36:	619a      	str	r2, [r3, #24]
 8005d38:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <HAL_TIM_PWM_MspInit+0x60>)
 8005d3a:	699a      	ldr	r2, [r3, #24]
 8005d3c:	2380      	movs	r3, #128	; 0x80
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	4013      	ands	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
 8005d44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005d46:	e011      	b.n	8005d6c <HAL_TIM_PWM_MspInit+0x54>
  else if(tim_pwmHandle->Instance==TIM2)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	2380      	movs	r3, #128	; 0x80
 8005d4e:	05db      	lsls	r3, r3, #23
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d10b      	bne.n	8005d6c <HAL_TIM_PWM_MspInit+0x54>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d54:	4b08      	ldr	r3, [pc, #32]	; (8005d78 <HAL_TIM_PWM_MspInit+0x60>)
 8005d56:	69da      	ldr	r2, [r3, #28]
 8005d58:	4b07      	ldr	r3, [pc, #28]	; (8005d78 <HAL_TIM_PWM_MspInit+0x60>)
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	61da      	str	r2, [r3, #28]
 8005d60:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <HAL_TIM_PWM_MspInit+0x60>)
 8005d62:	69db      	ldr	r3, [r3, #28]
 8005d64:	2201      	movs	r2, #1
 8005d66:	4013      	ands	r3, r2
 8005d68:	60bb      	str	r3, [r7, #8]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
}
 8005d6c:	46c0      	nop			; (mov r8, r8)
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	b004      	add	sp, #16
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40021000 	.word	0x40021000

08005d7c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM3)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a09      	ldr	r2, [pc, #36]	; (8005db0 <HAL_TIM_OC_MspInit+0x34>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d10b      	bne.n	8005da6 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d8e:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <HAL_TIM_OC_MspInit+0x38>)
 8005d90:	69da      	ldr	r2, [r3, #28]
 8005d92:	4b08      	ldr	r3, [pc, #32]	; (8005db4 <HAL_TIM_OC_MspInit+0x38>)
 8005d94:	2102      	movs	r1, #2
 8005d96:	430a      	orrs	r2, r1
 8005d98:	61da      	str	r2, [r3, #28]
 8005d9a:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <HAL_TIM_OC_MspInit+0x38>)
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	4013      	ands	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005da6:	46c0      	nop			; (mov r8, r8)
 8005da8:	46bd      	mov	sp, r7
 8005daa:	b004      	add	sp, #16
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	46c0      	nop			; (mov r8, r8)
 8005db0:	40000400 	.word	0x40000400
 8005db4:	40021000 	.word	0x40021000

08005db8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005db8:	b590      	push	{r4, r7, lr}
 8005dba:	b08d      	sub	sp, #52	; 0x34
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dc0:	231c      	movs	r3, #28
 8005dc2:	18fb      	adds	r3, r7, r3
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	2314      	movs	r3, #20
 8005dc8:	001a      	movs	r2, r3
 8005dca:	2100      	movs	r1, #0
 8005dcc:	f000 f9f4 	bl	80061b8 <memset>
  if(timHandle->Instance==TIM1)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a54      	ldr	r2, [pc, #336]	; (8005f28 <HAL_TIM_MspPostInit+0x170>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d126      	bne.n	8005e28 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dda:	4b54      	ldr	r3, [pc, #336]	; (8005f2c <HAL_TIM_MspPostInit+0x174>)
 8005ddc:	695a      	ldr	r2, [r3, #20]
 8005dde:	4b53      	ldr	r3, [pc, #332]	; (8005f2c <HAL_TIM_MspPostInit+0x174>)
 8005de0:	2180      	movs	r1, #128	; 0x80
 8005de2:	0289      	lsls	r1, r1, #10
 8005de4:	430a      	orrs	r2, r1
 8005de6:	615a      	str	r2, [r3, #20]
 8005de8:	4b50      	ldr	r3, [pc, #320]	; (8005f2c <HAL_TIM_MspPostInit+0x174>)
 8005dea:	695a      	ldr	r2, [r3, #20]
 8005dec:	2380      	movs	r3, #128	; 0x80
 8005dee:	029b      	lsls	r3, r3, #10
 8005df0:	4013      	ands	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = McuOut01_Pin|McuOut02_Pin|McuOut03_Pin|McuOut04_Pin;
 8005df6:	211c      	movs	r1, #28
 8005df8:	187b      	adds	r3, r7, r1
 8005dfa:	22f0      	movs	r2, #240	; 0xf0
 8005dfc:	0112      	lsls	r2, r2, #4
 8005dfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e00:	187b      	adds	r3, r7, r1
 8005e02:	2202      	movs	r2, #2
 8005e04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e06:	187b      	adds	r3, r7, r1
 8005e08:	2200      	movs	r2, #0
 8005e0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e0c:	187b      	adds	r3, r7, r1
 8005e0e:	2200      	movs	r2, #0
 8005e10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005e12:	187b      	adds	r3, r7, r1
 8005e14:	2202      	movs	r2, #2
 8005e16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e18:	187a      	adds	r2, r7, r1
 8005e1a:	2390      	movs	r3, #144	; 0x90
 8005e1c:	05db      	lsls	r3, r3, #23
 8005e1e:	0011      	movs	r1, r2
 8005e20:	0018      	movs	r0, r3
 8005e22:	f7fa ff91 	bl	8000d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005e26:	e07a      	b.n	8005f1e <HAL_TIM_MspPostInit+0x166>
  else if(timHandle->Instance==TIM2)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	05db      	lsls	r3, r3, #23
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d14b      	bne.n	8005ecc <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e34:	4b3d      	ldr	r3, [pc, #244]	; (8005f2c <HAL_TIM_MspPostInit+0x174>)
 8005e36:	695a      	ldr	r2, [r3, #20]
 8005e38:	4b3c      	ldr	r3, [pc, #240]	; (8005f2c <HAL_TIM_MspPostInit+0x174>)
 8005e3a:	2180      	movs	r1, #128	; 0x80
 8005e3c:	02c9      	lsls	r1, r1, #11
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	615a      	str	r2, [r3, #20]
 8005e42:	4b3a      	ldr	r3, [pc, #232]	; (8005f2c <HAL_TIM_MspPostInit+0x174>)
 8005e44:	695a      	ldr	r2, [r3, #20]
 8005e46:	2380      	movs	r3, #128	; 0x80
 8005e48:	02db      	lsls	r3, r3, #11
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e50:	4b36      	ldr	r3, [pc, #216]	; (8005f2c <HAL_TIM_MspPostInit+0x174>)
 8005e52:	695a      	ldr	r2, [r3, #20]
 8005e54:	4b35      	ldr	r3, [pc, #212]	; (8005f2c <HAL_TIM_MspPostInit+0x174>)
 8005e56:	2180      	movs	r1, #128	; 0x80
 8005e58:	0289      	lsls	r1, r1, #10
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	615a      	str	r2, [r3, #20]
 8005e5e:	4b33      	ldr	r3, [pc, #204]	; (8005f2c <HAL_TIM_MspPostInit+0x174>)
 8005e60:	695a      	ldr	r2, [r3, #20]
 8005e62:	2380      	movs	r3, #128	; 0x80
 8005e64:	029b      	lsls	r3, r3, #10
 8005e66:	4013      	ands	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]
 8005e6a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = McuIn07B10_Pin|McuOut09_Pin|McuIn05B3_Pin;
 8005e6c:	211c      	movs	r1, #28
 8005e6e:	187b      	adds	r3, r7, r1
 8005e70:	4a2f      	ldr	r2, [pc, #188]	; (8005f30 <HAL_TIM_MspPostInit+0x178>)
 8005e72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e74:	187b      	adds	r3, r7, r1
 8005e76:	2202      	movs	r2, #2
 8005e78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e7a:	187b      	adds	r3, r7, r1
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e80:	187b      	adds	r3, r7, r1
 8005e82:	2200      	movs	r2, #0
 8005e84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8005e86:	187b      	adds	r3, r7, r1
 8005e88:	2202      	movs	r2, #2
 8005e8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e8c:	000c      	movs	r4, r1
 8005e8e:	187b      	adds	r3, r7, r1
 8005e90:	4a28      	ldr	r2, [pc, #160]	; (8005f34 <HAL_TIM_MspPostInit+0x17c>)
 8005e92:	0019      	movs	r1, r3
 8005e94:	0010      	movs	r0, r2
 8005e96:	f7fa ff57 	bl	8000d48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = McuPwm05_Pin;
 8005e9a:	0021      	movs	r1, r4
 8005e9c:	187b      	adds	r3, r7, r1
 8005e9e:	2280      	movs	r2, #128	; 0x80
 8005ea0:	0212      	lsls	r2, r2, #8
 8005ea2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ea4:	187b      	adds	r3, r7, r1
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eaa:	187b      	adds	r3, r7, r1
 8005eac:	2200      	movs	r2, #0
 8005eae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eb0:	187b      	adds	r3, r7, r1
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8005eb6:	187b      	adds	r3, r7, r1
 8005eb8:	2202      	movs	r2, #2
 8005eba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(McuPwm05_GPIO_Port, &GPIO_InitStruct);
 8005ebc:	187a      	adds	r2, r7, r1
 8005ebe:	2390      	movs	r3, #144	; 0x90
 8005ec0:	05db      	lsls	r3, r3, #23
 8005ec2:	0011      	movs	r1, r2
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f7fa ff3f 	bl	8000d48 <HAL_GPIO_Init>
}
 8005eca:	e028      	b.n	8005f1e <HAL_TIM_MspPostInit+0x166>
  else if(timHandle->Instance==TIM3)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a19      	ldr	r2, [pc, #100]	; (8005f38 <HAL_TIM_MspPostInit+0x180>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d123      	bne.n	8005f1e <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ed6:	4b15      	ldr	r3, [pc, #84]	; (8005f2c <HAL_TIM_MspPostInit+0x174>)
 8005ed8:	695a      	ldr	r2, [r3, #20]
 8005eda:	4b14      	ldr	r3, [pc, #80]	; (8005f2c <HAL_TIM_MspPostInit+0x174>)
 8005edc:	2180      	movs	r1, #128	; 0x80
 8005ede:	02c9      	lsls	r1, r1, #11
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	615a      	str	r2, [r3, #20]
 8005ee4:	4b11      	ldr	r3, [pc, #68]	; (8005f2c <HAL_TIM_MspPostInit+0x174>)
 8005ee6:	695a      	ldr	r2, [r3, #20]
 8005ee8:	2380      	movs	r3, #128	; 0x80
 8005eea:	02db      	lsls	r3, r3, #11
 8005eec:	4013      	ands	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = McuIn08B4_Pin;
 8005ef2:	211c      	movs	r1, #28
 8005ef4:	187b      	adds	r3, r7, r1
 8005ef6:	2210      	movs	r2, #16
 8005ef8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005efa:	187b      	adds	r3, r7, r1
 8005efc:	2202      	movs	r2, #2
 8005efe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f00:	187b      	adds	r3, r7, r1
 8005f02:	2200      	movs	r2, #0
 8005f04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f06:	187b      	adds	r3, r7, r1
 8005f08:	2200      	movs	r2, #0
 8005f0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8005f0c:	187b      	adds	r3, r7, r1
 8005f0e:	2201      	movs	r2, #1
 8005f10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(McuIn08B4_GPIO_Port, &GPIO_InitStruct);
 8005f12:	187b      	adds	r3, r7, r1
 8005f14:	4a07      	ldr	r2, [pc, #28]	; (8005f34 <HAL_TIM_MspPostInit+0x17c>)
 8005f16:	0019      	movs	r1, r3
 8005f18:	0010      	movs	r0, r2
 8005f1a:	f7fa ff15 	bl	8000d48 <HAL_GPIO_Init>
}
 8005f1e:	46c0      	nop			; (mov r8, r8)
 8005f20:	46bd      	mov	sp, r7
 8005f22:	b00d      	add	sp, #52	; 0x34
 8005f24:	bd90      	pop	{r4, r7, pc}
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	40012c00 	.word	0x40012c00
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	00000c08 	.word	0x00000c08
 8005f34:	48000400 	.word	0x48000400
 8005f38:	40000400 	.word	0x40000400

08005f3c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart8;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8005f40:	4b14      	ldr	r3, [pc, #80]	; (8005f94 <MX_USART3_UART_Init+0x58>)
 8005f42:	4a15      	ldr	r2, [pc, #84]	; (8005f98 <MX_USART3_UART_Init+0x5c>)
 8005f44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005f46:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <MX_USART3_UART_Init+0x58>)
 8005f48:	22e1      	movs	r2, #225	; 0xe1
 8005f4a:	0252      	lsls	r2, r2, #9
 8005f4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005f4e:	4b11      	ldr	r3, [pc, #68]	; (8005f94 <MX_USART3_UART_Init+0x58>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005f54:	4b0f      	ldr	r3, [pc, #60]	; (8005f94 <MX_USART3_UART_Init+0x58>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005f5a:	4b0e      	ldr	r3, [pc, #56]	; (8005f94 <MX_USART3_UART_Init+0x58>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005f60:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <MX_USART3_UART_Init+0x58>)
 8005f62:	220c      	movs	r2, #12
 8005f64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f66:	4b0b      	ldr	r3, [pc, #44]	; (8005f94 <MX_USART3_UART_Init+0x58>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f6c:	4b09      	ldr	r3, [pc, #36]	; (8005f94 <MX_USART3_UART_Init+0x58>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f72:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <MX_USART3_UART_Init+0x58>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f78:	4b06      	ldr	r3, [pc, #24]	; (8005f94 <MX_USART3_UART_Init+0x58>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005f7e:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <MX_USART3_UART_Init+0x58>)
 8005f80:	0018      	movs	r0, r3
 8005f82:	f7fd fe23 	bl	8003bcc <HAL_UART_Init>
 8005f86:	1e03      	subs	r3, r0, #0
 8005f88:	d001      	beq.n	8005f8e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005f8a:	f7ff fac7 	bl	800551c <Error_Handler>
  }

}
 8005f8e:	46c0      	nop			; (mov r8, r8)
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20000380 	.word	0x20000380
 8005f98:	40004800 	.word	0x40004800

08005f9c <MX_USART8_UART_Init>:
/* USART8 init function */

void MX_USART8_UART_Init(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0

  huart8.Instance = USART8;
 8005fa0:	4b14      	ldr	r3, [pc, #80]	; (8005ff4 <MX_USART8_UART_Init+0x58>)
 8005fa2:	4a15      	ldr	r2, [pc, #84]	; (8005ff8 <MX_USART8_UART_Init+0x5c>)
 8005fa4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8005fa6:	4b13      	ldr	r3, [pc, #76]	; (8005ff4 <MX_USART8_UART_Init+0x58>)
 8005fa8:	22e1      	movs	r2, #225	; 0xe1
 8005faa:	0252      	lsls	r2, r2, #9
 8005fac:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8005fae:	4b11      	ldr	r3, [pc, #68]	; (8005ff4 <MX_USART8_UART_Init+0x58>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8005fb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <MX_USART8_UART_Init+0x58>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8005fba:	4b0e      	ldr	r3, [pc, #56]	; (8005ff4 <MX_USART8_UART_Init+0x58>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <MX_USART8_UART_Init+0x58>)
 8005fc2:	220c      	movs	r2, #12
 8005fc4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fc6:	4b0b      	ldr	r3, [pc, #44]	; (8005ff4 <MX_USART8_UART_Init+0x58>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fcc:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <MX_USART8_UART_Init+0x58>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005fd2:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <MX_USART8_UART_Init+0x58>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005fd8:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <MX_USART8_UART_Init+0x58>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8005fde:	4b05      	ldr	r3, [pc, #20]	; (8005ff4 <MX_USART8_UART_Init+0x58>)
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	f7fd fdf3 	bl	8003bcc <HAL_UART_Init>
 8005fe6:	1e03      	subs	r3, r0, #0
 8005fe8:	d001      	beq.n	8005fee <MX_USART8_UART_Init+0x52>
  {
    Error_Handler();
 8005fea:	f7ff fa97 	bl	800551c <Error_Handler>
  }

}
 8005fee:	46c0      	nop			; (mov r8, r8)
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	200003f0 	.word	0x200003f0
 8005ff8:	40011c00 	.word	0x40011c00

08005ffc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08c      	sub	sp, #48	; 0x30
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006004:	231c      	movs	r3, #28
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	0018      	movs	r0, r3
 800600a:	2314      	movs	r3, #20
 800600c:	001a      	movs	r2, r3
 800600e:	2100      	movs	r1, #0
 8006010:	f000 f8d2 	bl	80061b8 <memset>
  if(uartHandle->Instance==USART3)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a38      	ldr	r2, [pc, #224]	; (80060fc <HAL_UART_MspInit+0x100>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d133      	bne.n	8006086 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800601e:	4b38      	ldr	r3, [pc, #224]	; (8006100 <HAL_UART_MspInit+0x104>)
 8006020:	69da      	ldr	r2, [r3, #28]
 8006022:	4b37      	ldr	r3, [pc, #220]	; (8006100 <HAL_UART_MspInit+0x104>)
 8006024:	2180      	movs	r1, #128	; 0x80
 8006026:	02c9      	lsls	r1, r1, #11
 8006028:	430a      	orrs	r2, r1
 800602a:	61da      	str	r2, [r3, #28]
 800602c:	4b34      	ldr	r3, [pc, #208]	; (8006100 <HAL_UART_MspInit+0x104>)
 800602e:	69da      	ldr	r2, [r3, #28]
 8006030:	2380      	movs	r3, #128	; 0x80
 8006032:	02db      	lsls	r3, r3, #11
 8006034:	4013      	ands	r3, r2
 8006036:	61bb      	str	r3, [r7, #24]
 8006038:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800603a:	4b31      	ldr	r3, [pc, #196]	; (8006100 <HAL_UART_MspInit+0x104>)
 800603c:	695a      	ldr	r2, [r3, #20]
 800603e:	4b30      	ldr	r3, [pc, #192]	; (8006100 <HAL_UART_MspInit+0x104>)
 8006040:	2180      	movs	r1, #128	; 0x80
 8006042:	0309      	lsls	r1, r1, #12
 8006044:	430a      	orrs	r2, r1
 8006046:	615a      	str	r2, [r3, #20]
 8006048:	4b2d      	ldr	r3, [pc, #180]	; (8006100 <HAL_UART_MspInit+0x104>)
 800604a:	695a      	ldr	r2, [r3, #20]
 800604c:	2380      	movs	r3, #128	; 0x80
 800604e:	031b      	lsls	r3, r3, #12
 8006050:	4013      	ands	r3, r2
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration    
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006056:	211c      	movs	r1, #28
 8006058:	187b      	adds	r3, r7, r1
 800605a:	22c0      	movs	r2, #192	; 0xc0
 800605c:	0112      	lsls	r2, r2, #4
 800605e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006060:	187b      	adds	r3, r7, r1
 8006062:	2202      	movs	r2, #2
 8006064:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006066:	187b      	adds	r3, r7, r1
 8006068:	2200      	movs	r2, #0
 800606a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800606c:	187b      	adds	r3, r7, r1
 800606e:	2203      	movs	r2, #3
 8006070:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8006072:	187b      	adds	r3, r7, r1
 8006074:	2201      	movs	r2, #1
 8006076:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006078:	187b      	adds	r3, r7, r1
 800607a:	4a22      	ldr	r2, [pc, #136]	; (8006104 <HAL_UART_MspInit+0x108>)
 800607c:	0019      	movs	r1, r3
 800607e:	0010      	movs	r0, r2
 8006080:	f7fa fe62 	bl	8000d48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART8_MspInit 1 */

  /* USER CODE END USART8_MspInit 1 */
  }
}
 8006084:	e035      	b.n	80060f2 <HAL_UART_MspInit+0xf6>
  else if(uartHandle->Instance==USART8)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a1f      	ldr	r2, [pc, #124]	; (8006108 <HAL_UART_MspInit+0x10c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d130      	bne.n	80060f2 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART8_CLK_ENABLE();
 8006090:	4b1b      	ldr	r3, [pc, #108]	; (8006100 <HAL_UART_MspInit+0x104>)
 8006092:	699a      	ldr	r2, [r3, #24]
 8006094:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <HAL_UART_MspInit+0x104>)
 8006096:	2180      	movs	r1, #128	; 0x80
 8006098:	430a      	orrs	r2, r1
 800609a:	619a      	str	r2, [r3, #24]
 800609c:	4b18      	ldr	r3, [pc, #96]	; (8006100 <HAL_UART_MspInit+0x104>)
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	2280      	movs	r2, #128	; 0x80
 80060a2:	4013      	ands	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060a8:	4b15      	ldr	r3, [pc, #84]	; (8006100 <HAL_UART_MspInit+0x104>)
 80060aa:	695a      	ldr	r2, [r3, #20]
 80060ac:	4b14      	ldr	r3, [pc, #80]	; (8006100 <HAL_UART_MspInit+0x104>)
 80060ae:	2180      	movs	r1, #128	; 0x80
 80060b0:	0349      	lsls	r1, r1, #13
 80060b2:	430a      	orrs	r2, r1
 80060b4:	615a      	str	r2, [r3, #20]
 80060b6:	4b12      	ldr	r3, [pc, #72]	; (8006100 <HAL_UART_MspInit+0x104>)
 80060b8:	695a      	ldr	r2, [r3, #20]
 80060ba:	2380      	movs	r3, #128	; 0x80
 80060bc:	035b      	lsls	r3, r3, #13
 80060be:	4013      	ands	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = McuBtTx_Pin|McuBtRx_Pin;
 80060c4:	211c      	movs	r1, #28
 80060c6:	187b      	adds	r3, r7, r1
 80060c8:	22c0      	movs	r2, #192	; 0xc0
 80060ca:	01d2      	lsls	r2, r2, #7
 80060cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ce:	187b      	adds	r3, r7, r1
 80060d0:	2202      	movs	r2, #2
 80060d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d4:	187b      	adds	r3, r7, r1
 80060d6:	2200      	movs	r2, #0
 80060d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80060da:	187b      	adds	r3, r7, r1
 80060dc:	2203      	movs	r2, #3
 80060de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART8;
 80060e0:	187b      	adds	r3, r7, r1
 80060e2:	2200      	movs	r2, #0
 80060e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80060e6:	187b      	adds	r3, r7, r1
 80060e8:	4a08      	ldr	r2, [pc, #32]	; (800610c <HAL_UART_MspInit+0x110>)
 80060ea:	0019      	movs	r1, r3
 80060ec:	0010      	movs	r0, r2
 80060ee:	f7fa fe2b 	bl	8000d48 <HAL_GPIO_Init>
}
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	46bd      	mov	sp, r7
 80060f6:	b00c      	add	sp, #48	; 0x30
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	46c0      	nop			; (mov r8, r8)
 80060fc:	40004800 	.word	0x40004800
 8006100:	40021000 	.word	0x40021000
 8006104:	48000800 	.word	0x48000800
 8006108:	40011c00 	.word	0x40011c00
 800610c:	48000c00 	.word	0x48000c00

08006110 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006110:	480d      	ldr	r0, [pc, #52]	; (8006148 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006112:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006114:	480d      	ldr	r0, [pc, #52]	; (800614c <LoopForever+0x6>)
  ldr r1, =_edata
 8006116:	490e      	ldr	r1, [pc, #56]	; (8006150 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006118:	4a0e      	ldr	r2, [pc, #56]	; (8006154 <LoopForever+0xe>)
  movs r3, #0
 800611a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800611c:	e002      	b.n	8006124 <LoopCopyDataInit>

0800611e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800611e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006122:	3304      	adds	r3, #4

08006124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006128:	d3f9      	bcc.n	800611e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800612a:	4a0b      	ldr	r2, [pc, #44]	; (8006158 <LoopForever+0x12>)
  ldr r4, =_ebss
 800612c:	4c0b      	ldr	r4, [pc, #44]	; (800615c <LoopForever+0x16>)
  movs r3, #0
 800612e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006130:	e001      	b.n	8006136 <LoopFillZerobss>

08006132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006134:	3204      	adds	r2, #4

08006136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006138:	d3fb      	bcc.n	8006132 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800613a:	f7ff fc15 	bl	8005968 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800613e:	f000 f817 	bl	8006170 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006142:	f7ff f8ad 	bl	80052a0 <main>

08006146 <LoopForever>:

LoopForever:
    b LoopForever
 8006146:	e7fe      	b.n	8006146 <LoopForever>
  ldr   r0, =_estack
 8006148:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800614c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006150:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8006154:	08006390 	.word	0x08006390
  ldr r2, =_sbss
 8006158:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800615c:	20000464 	.word	0x20000464

08006160 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006160:	e7fe      	b.n	8006160 <ADC1_COMP_IRQHandler>
	...

08006164 <__errno>:
 8006164:	4b01      	ldr	r3, [pc, #4]	; (800616c <__errno+0x8>)
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	4770      	bx	lr
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	20000004 	.word	0x20000004

08006170 <__libc_init_array>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	2600      	movs	r6, #0
 8006174:	4d0c      	ldr	r5, [pc, #48]	; (80061a8 <__libc_init_array+0x38>)
 8006176:	4c0d      	ldr	r4, [pc, #52]	; (80061ac <__libc_init_array+0x3c>)
 8006178:	1b64      	subs	r4, r4, r5
 800617a:	10a4      	asrs	r4, r4, #2
 800617c:	42a6      	cmp	r6, r4
 800617e:	d109      	bne.n	8006194 <__libc_init_array+0x24>
 8006180:	2600      	movs	r6, #0
 8006182:	f000 f8cf 	bl	8006324 <_init>
 8006186:	4d0a      	ldr	r5, [pc, #40]	; (80061b0 <__libc_init_array+0x40>)
 8006188:	4c0a      	ldr	r4, [pc, #40]	; (80061b4 <__libc_init_array+0x44>)
 800618a:	1b64      	subs	r4, r4, r5
 800618c:	10a4      	asrs	r4, r4, #2
 800618e:	42a6      	cmp	r6, r4
 8006190:	d105      	bne.n	800619e <__libc_init_array+0x2e>
 8006192:	bd70      	pop	{r4, r5, r6, pc}
 8006194:	00b3      	lsls	r3, r6, #2
 8006196:	58eb      	ldr	r3, [r5, r3]
 8006198:	4798      	blx	r3
 800619a:	3601      	adds	r6, #1
 800619c:	e7ee      	b.n	800617c <__libc_init_array+0xc>
 800619e:	00b3      	lsls	r3, r6, #2
 80061a0:	58eb      	ldr	r3, [r5, r3]
 80061a2:	4798      	blx	r3
 80061a4:	3601      	adds	r6, #1
 80061a6:	e7f2      	b.n	800618e <__libc_init_array+0x1e>
 80061a8:	08006388 	.word	0x08006388
 80061ac:	08006388 	.word	0x08006388
 80061b0:	08006388 	.word	0x08006388
 80061b4:	0800638c 	.word	0x0800638c

080061b8 <memset>:
 80061b8:	0003      	movs	r3, r0
 80061ba:	1812      	adds	r2, r2, r0
 80061bc:	4293      	cmp	r3, r2
 80061be:	d100      	bne.n	80061c2 <memset+0xa>
 80061c0:	4770      	bx	lr
 80061c2:	7019      	strb	r1, [r3, #0]
 80061c4:	3301      	adds	r3, #1
 80061c6:	e7f9      	b.n	80061bc <memset+0x4>

080061c8 <rand>:
 80061c8:	4b12      	ldr	r3, [pc, #72]	; (8006214 <rand+0x4c>)
 80061ca:	b510      	push	{r4, lr}
 80061cc:	681c      	ldr	r4, [r3, #0]
 80061ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10f      	bne.n	80061f4 <rand+0x2c>
 80061d4:	2018      	movs	r0, #24
 80061d6:	f000 f829 	bl	800622c <malloc>
 80061da:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <rand+0x50>)
 80061dc:	63a0      	str	r0, [r4, #56]	; 0x38
 80061de:	6003      	str	r3, [r0, #0]
 80061e0:	4b0e      	ldr	r3, [pc, #56]	; (800621c <rand+0x54>)
 80061e2:	2201      	movs	r2, #1
 80061e4:	6043      	str	r3, [r0, #4]
 80061e6:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <rand+0x58>)
 80061e8:	6083      	str	r3, [r0, #8]
 80061ea:	230b      	movs	r3, #11
 80061ec:	8183      	strh	r3, [r0, #12]
 80061ee:	2300      	movs	r3, #0
 80061f0:	6102      	str	r2, [r0, #16]
 80061f2:	6143      	str	r3, [r0, #20]
 80061f4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80061f6:	4a0b      	ldr	r2, [pc, #44]	; (8006224 <rand+0x5c>)
 80061f8:	6920      	ldr	r0, [r4, #16]
 80061fa:	6961      	ldr	r1, [r4, #20]
 80061fc:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <rand+0x60>)
 80061fe:	f7fa f80d 	bl	800021c <__aeabi_lmul>
 8006202:	2201      	movs	r2, #1
 8006204:	2300      	movs	r3, #0
 8006206:	1880      	adds	r0, r0, r2
 8006208:	4159      	adcs	r1, r3
 800620a:	6120      	str	r0, [r4, #16]
 800620c:	6161      	str	r1, [r4, #20]
 800620e:	0048      	lsls	r0, r1, #1
 8006210:	0840      	lsrs	r0, r0, #1
 8006212:	bd10      	pop	{r4, pc}
 8006214:	20000004 	.word	0x20000004
 8006218:	abcd330e 	.word	0xabcd330e
 800621c:	e66d1234 	.word	0xe66d1234
 8006220:	0005deec 	.word	0x0005deec
 8006224:	4c957f2d 	.word	0x4c957f2d
 8006228:	5851f42d 	.word	0x5851f42d

0800622c <malloc>:
 800622c:	b510      	push	{r4, lr}
 800622e:	4b03      	ldr	r3, [pc, #12]	; (800623c <malloc+0x10>)
 8006230:	0001      	movs	r1, r0
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	f000 f804 	bl	8006240 <_malloc_r>
 8006238:	bd10      	pop	{r4, pc}
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	20000004 	.word	0x20000004

08006240 <_malloc_r>:
 8006240:	2303      	movs	r3, #3
 8006242:	b570      	push	{r4, r5, r6, lr}
 8006244:	1ccd      	adds	r5, r1, #3
 8006246:	439d      	bics	r5, r3
 8006248:	3508      	adds	r5, #8
 800624a:	0006      	movs	r6, r0
 800624c:	2d0c      	cmp	r5, #12
 800624e:	d21e      	bcs.n	800628e <_malloc_r+0x4e>
 8006250:	250c      	movs	r5, #12
 8006252:	42a9      	cmp	r1, r5
 8006254:	d81d      	bhi.n	8006292 <_malloc_r+0x52>
 8006256:	0030      	movs	r0, r6
 8006258:	f000 f862 	bl	8006320 <__malloc_lock>
 800625c:	4a25      	ldr	r2, [pc, #148]	; (80062f4 <_malloc_r+0xb4>)
 800625e:	6814      	ldr	r4, [r2, #0]
 8006260:	0021      	movs	r1, r4
 8006262:	2900      	cmp	r1, #0
 8006264:	d119      	bne.n	800629a <_malloc_r+0x5a>
 8006266:	4c24      	ldr	r4, [pc, #144]	; (80062f8 <_malloc_r+0xb8>)
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d103      	bne.n	8006276 <_malloc_r+0x36>
 800626e:	0030      	movs	r0, r6
 8006270:	f000 f844 	bl	80062fc <_sbrk_r>
 8006274:	6020      	str	r0, [r4, #0]
 8006276:	0029      	movs	r1, r5
 8006278:	0030      	movs	r0, r6
 800627a:	f000 f83f 	bl	80062fc <_sbrk_r>
 800627e:	1c43      	adds	r3, r0, #1
 8006280:	d12b      	bne.n	80062da <_malloc_r+0x9a>
 8006282:	230c      	movs	r3, #12
 8006284:	0030      	movs	r0, r6
 8006286:	6033      	str	r3, [r6, #0]
 8006288:	f000 f84b 	bl	8006322 <__malloc_unlock>
 800628c:	e003      	b.n	8006296 <_malloc_r+0x56>
 800628e:	2d00      	cmp	r5, #0
 8006290:	dadf      	bge.n	8006252 <_malloc_r+0x12>
 8006292:	230c      	movs	r3, #12
 8006294:	6033      	str	r3, [r6, #0]
 8006296:	2000      	movs	r0, #0
 8006298:	bd70      	pop	{r4, r5, r6, pc}
 800629a:	680b      	ldr	r3, [r1, #0]
 800629c:	1b5b      	subs	r3, r3, r5
 800629e:	d419      	bmi.n	80062d4 <_malloc_r+0x94>
 80062a0:	2b0b      	cmp	r3, #11
 80062a2:	d903      	bls.n	80062ac <_malloc_r+0x6c>
 80062a4:	600b      	str	r3, [r1, #0]
 80062a6:	18cc      	adds	r4, r1, r3
 80062a8:	6025      	str	r5, [r4, #0]
 80062aa:	e003      	b.n	80062b4 <_malloc_r+0x74>
 80062ac:	684b      	ldr	r3, [r1, #4]
 80062ae:	428c      	cmp	r4, r1
 80062b0:	d10d      	bne.n	80062ce <_malloc_r+0x8e>
 80062b2:	6013      	str	r3, [r2, #0]
 80062b4:	0030      	movs	r0, r6
 80062b6:	f000 f834 	bl	8006322 <__malloc_unlock>
 80062ba:	0020      	movs	r0, r4
 80062bc:	2207      	movs	r2, #7
 80062be:	300b      	adds	r0, #11
 80062c0:	1d23      	adds	r3, r4, #4
 80062c2:	4390      	bics	r0, r2
 80062c4:	1ac3      	subs	r3, r0, r3
 80062c6:	d0e7      	beq.n	8006298 <_malloc_r+0x58>
 80062c8:	425a      	negs	r2, r3
 80062ca:	50e2      	str	r2, [r4, r3]
 80062cc:	e7e4      	b.n	8006298 <_malloc_r+0x58>
 80062ce:	6063      	str	r3, [r4, #4]
 80062d0:	000c      	movs	r4, r1
 80062d2:	e7ef      	b.n	80062b4 <_malloc_r+0x74>
 80062d4:	000c      	movs	r4, r1
 80062d6:	6849      	ldr	r1, [r1, #4]
 80062d8:	e7c3      	b.n	8006262 <_malloc_r+0x22>
 80062da:	2303      	movs	r3, #3
 80062dc:	1cc4      	adds	r4, r0, #3
 80062de:	439c      	bics	r4, r3
 80062e0:	42a0      	cmp	r0, r4
 80062e2:	d0e1      	beq.n	80062a8 <_malloc_r+0x68>
 80062e4:	1a21      	subs	r1, r4, r0
 80062e6:	0030      	movs	r0, r6
 80062e8:	f000 f808 	bl	80062fc <_sbrk_r>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d1db      	bne.n	80062a8 <_malloc_r+0x68>
 80062f0:	e7c7      	b.n	8006282 <_malloc_r+0x42>
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	20000088 	.word	0x20000088
 80062f8:	2000008c 	.word	0x2000008c

080062fc <_sbrk_r>:
 80062fc:	2300      	movs	r3, #0
 80062fe:	b570      	push	{r4, r5, r6, lr}
 8006300:	4c06      	ldr	r4, [pc, #24]	; (800631c <_sbrk_r+0x20>)
 8006302:	0005      	movs	r5, r0
 8006304:	0008      	movs	r0, r1
 8006306:	6023      	str	r3, [r4, #0]
 8006308:	f7ff fb02 	bl	8005910 <_sbrk>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d103      	bne.n	8006318 <_sbrk_r+0x1c>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d000      	beq.n	8006318 <_sbrk_r+0x1c>
 8006316:	602b      	str	r3, [r5, #0]
 8006318:	bd70      	pop	{r4, r5, r6, pc}
 800631a:	46c0      	nop			; (mov r8, r8)
 800631c:	20000460 	.word	0x20000460

08006320 <__malloc_lock>:
 8006320:	4770      	bx	lr

08006322 <__malloc_unlock>:
 8006322:	4770      	bx	lr

08006324 <_init>:
 8006324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800632a:	bc08      	pop	{r3}
 800632c:	469e      	mov	lr, r3
 800632e:	4770      	bx	lr

08006330 <_fini>:
 8006330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006332:	46c0      	nop			; (mov r8, r8)
 8006334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006336:	bc08      	pop	{r3}
 8006338:	469e      	mov	lr, r3
 800633a:	4770      	bx	lr
